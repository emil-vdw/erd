

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Oct 22 15:26:45 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46  0000                     
    47                           ; Version 1.44
    48                           ; Generated 14/09/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F45K20 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMRAM
    83  00130E                     __pidataCOMRAM:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _speed
    87  00130E  0001               	dw	1
    88                           
    89                           	psect	idataBANK0
    90  001310                     __pidataBANK0:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _state
    94  001310  0001               	dw	1
    95                           
    96                           	psect	smallconst
    97  000600                     __psmallconst:
    98                           	opt stack 0
    99  000600  00                 	db	0
   100  000601                     log@coeff:
   101                           	opt stack 0
   102  000601  00                 	db	0
   103  000602  00                 	db	0
   104  000603  00                 	db	0
   105  000604  00                 	db	0
   106  000605  80                 	db	128
   107  000606  3F                 	db	63
   108  000607  F0                 	db	240
   109  000608  FF                 	db	255
   110  000609  BE                 	db	190
   111  00060A  E2                 	db	226
   112  00060B  A9                 	db	169
   113  00060C  3E                 	db	62
   114  00060D  83                 	db	131
   115  00060E  76                 	db	118
   116  00060F  BE                 	db	190
   117  000610  AE                 	db	174
   118  000611  2B                 	db	43
   119  000612  3E                 	db	62
   120  000613  3C                 	db	60
   121  000614  C3                 	db	195
   122  000615  BD                 	db	189
   123  000616  D2                 	db	210
   124  000617  13                 	db	19
   125  000618  3D                 	db	61
   126  000619  78                 	db	120
   127  00061A  D3                 	db	211
   128  00061B  BB                 	db	187
   129  00061C                     __end_oflog@coeff:
   130                           	opt stack 0
   131  0000                     _PORTD	set	3971
   132  0000                     _ADCON0bits	set	4034
   133  0000                     _ADCON2	set	4032
   134  0000                     _ADCON1	set	4033
   135  0000                     _ANSELbits	set	3966
   136  0000                     _TRISAbits	set	3986
   137  0000                     _SSPCON2bits	set	4037
   138  0000                     _SSPBUF	set	4041
   139  0000                     _PORTEbits	set	3972
   140  0000                     _SSPCON1bits	set	4038
   141  0000                     _SSPSTATbits	set	4039
   142  0000                     _SSPADD	set	4040
   143  0000                     _ADRESH	set	4036
   144  0000                     _ADCON0	set	4034
   145  0000                     _RCREG	set	4014
   146  0000                     _PORTCbits	set	3970
   147  0000                     _TRISEbits	set	3990
   148  0000                     _ANSEL	set	3966
   149  0000                     _TRISD	set	3989
   150  0000                     _TRISC	set	3988
   151  0000                     _TXREG	set	4013
   152  0000                     _PIR1bits	set	3998
   153  0000                     _SPBRG	set	4015
   154  0000                     _OSCCONbits	set	4051
   155  0000                     _BAUDCONbits	set	4024
   156  0000                     _RCSTA	set	4011
   157  0000                     _TXSTA	set	4012
   158  0000                     _TRISCbits	set	3988
   159  0000                     _RCIF	set	31989
   160  0000                     _TRMT	set	32097
   161  0000                     _TXIF	set	31988
   162  00061C                     STR_4:
   163  00061C  4D                 	db	77	;'M'
   164  00061D  61                 	db	97	;'a'
   165  00061E  6E                 	db	110	;'n'
   166  00061F  75                 	db	117	;'u'
   167  000620  61                 	db	97	;'a'
   168  000621  6C                 	db	108	;'l'
   169  000622  00                 	db	0
   170  000623                     STR_1:
   171  000623  41                 	db	65	;'A'
   172  000624  44                 	db	68	;'D'
   173  000625  43                 	db	67	;'C'
   174  000626  3A                 	db	58	;':'
   175  000627  00                 	db	0
   176  000628                     STR_2:
   177  000628  49                 	db	73	;'I'
   178  000629  64                 	db	100	;'d'
   179  00062A  6C                 	db	108	;'l'
   180  00062B  65                 	db	101	;'e'
   181  00062C  00                 	db	0
   182  00062D                     STR_3:
   183  00062D  41                 	db	65	;'A'
   184  00062E  75                 	db	117	;'u'
   185  00062F  74                 	db	116	;'t'
   186  000630  6F                 	db	111	;'o'
   187  000631  00                 	db	0
   188                           
   189                           ; #config settings
   190  000632  00                 	db	0	; dummy byte at the end
   191  0000                     
   192                           	psect	cinit
   193  00106A                     __pcinit:
   194                           	opt stack 0
   195  00106A                     start_initialization:
   196                           	opt stack 0
   197  00106A                     __initialization:
   198                           	opt stack 0
   199                           
   200                           ; Initialize objects allocated to BANK0 (2 bytes)
   201                           ; load TBLPTR registers with __pidataBANK0
   202  00106A  0E10               	movlw	low __pidataBANK0
   203  00106C  6EF6               	movwf	tblptrl,c
   204  00106E  0E13               	movlw	high __pidataBANK0
   205  001070  6EF7               	movwf	tblptrh,c
   206  001072  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   207  001074  6EF8               	movwf	tblptru,c
   208  001076  0009               	tblrd		*+	;fetch initializer
   209  001078  CFF5 F064          	movff	tablat,__pdataBANK0
   210  00107C  0009               	tblrd		*+	;fetch initializer
   211  00107E  CFF5 F065          	movff	tablat,__pdataBANK0+1
   212                           
   213                           ; Initialize objects allocated to COMRAM (2 bytes)
   214                           ; load TBLPTR registers with __pidataCOMRAM
   215  001082  0E0E               	movlw	low __pidataCOMRAM
   216  001084  6EF6               	movwf	tblptrl,c
   217  001086  0E13               	movlw	high __pidataCOMRAM
   218  001088  6EF7               	movwf	tblptrh,c
   219  00108A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   220  00108C  6EF8               	movwf	tblptru,c
   221  00108E  0009               	tblrd		*+	;fetch initializer
   222  001090  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   223  001094  0009               	tblrd		*+	;fetch initializer
   224  001096  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
   225                           
   226                           ; Clear objects allocated to BANK0 (4 bytes)
   227  00109A  0100               	movlb	0
   228  00109C  6B63               	clrf	(__pbssBANK0+3)& (0+255),b
   229  00109E  6B62               	clrf	(__pbssBANK0+2)& (0+255),b
   230  0010A0  6B61               	clrf	(__pbssBANK0+1)& (0+255),b
   231  0010A2  6B60               	clrf	__pbssBANK0& (0+255),b
   232  0010A4                     end_of_initialization:
   233                           	opt stack 0
   234  0010A4                     __end_of__initialization:
   235                           	opt stack 0
   236  0010A4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   237  0010A6  6EF8               	movwf	tblptru,c
   238  0010A8  0E06               	movlw	high __Lsmallconst
   239  0010AA  6EF7               	movwf	tblptrh,c
   240  0010AC  0100               	movlb	0
   241  0010AE  EF59  F008         	goto	_main	;jump to C main() function
   242                           tblptru	equ	0xFF8
   243                           tblptrh	equ	0xFF7
   244                           tblptrl	equ	0xFF6
   245                           tablat	equ	0xFF5
   246                           
   247                           	psect	dataCOMRAM
   248  00005D                     __pdataCOMRAM:
   249                           	opt stack 0
   250  00005D                     _speed:
   251                           	opt stack 0
   252  00005D                     	ds	2
   253                           tblptru	equ	0xFF8
   254                           tblptrh	equ	0xFF7
   255                           tblptrl	equ	0xFF6
   256                           tablat	equ	0xFF5
   257                           
   258                           	psect	bssBANK0
   259  000060                     __pbssBANK0:
   260                           	opt stack 0
   261  000060                     _errno:
   262                           	opt stack 0
   263  000060                     	ds	2
   264  000062                     _mode:
   265                           	opt stack 0
   266  000062                     	ds	2
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           
   272                           	psect	dataBANK0
   273  000064                     __pdataBANK0:
   274                           	opt stack 0
   275  000064                     _state:
   276                           	opt stack 0
   277  000064                     	ds	2
   278                           tblptru	equ	0xFF8
   279                           tblptrh	equ	0xFF7
   280                           tblptrl	equ	0xFF6
   281                           tablat	equ	0xFF5
   282                           
   283                           	psect	cstackCOMRAM
   284  000001                     __pcstackCOMRAM:
   285                           	opt stack 0
   286  000001                     ?___awmod:
   287                           	opt stack 0
   288  000001                     ?___ftpack:
   289                           	opt stack 0
   290  000001                     ?_frexp:
   291                           	opt stack 0
   292  000001                     delay@x:
   293                           	opt stack 0
   294  000001                     ___awmod@dividend:
   295                           	opt stack 0
   296  000001                     ___ftpack@arg:
   297                           	opt stack 0
   298  000001                     frexp@value:
   299                           	opt stack 0
   300                           
   301                           ; 3 bytes @ 0x0
   302  000001                     	ds	2
   303  000003                     delay@i:
   304                           	opt stack 0
   305  000003                     ___awmod@divisor:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x2
   309  000003                     	ds	1
   310  000004                     ___ftpack@exp:
   311                           	opt stack 0
   312  000004                     frexp@eptr:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x3
   316  000004                     	ds	1
   317  000005                     WriteCommon@value:
   318                           	opt stack 0
   319  000005                     ___awmod@counter:
   320                           	opt stack 0
   321  000005                     ___ftpack@sign:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0x4
   325  000005                     	ds	1
   326  000006                     ??___ftpack:
   327  000006                     ??_frexp:
   328  000006                     WriteCtrl@value:
   329                           	opt stack 0
   330  000006                     WriteData@value:
   331                           	opt stack 0
   332  000006                     ___awmod@sign:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x5
   336  000006                     	ds	1
   337  000007                     ?___awdiv:
   338                           	opt stack 0
   339  000007                     goto_xy@y:
   340                           	opt stack 0
   341  000007                     WriteLCD@message:
   342                           	opt stack 0
   343  000007                     ___awdiv@dividend:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x6
   347  000007                     	ds	1
   348  000008                     goto_xy@x:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x7
   352  000008                     	ds	1
   353  000009                     ??_WriteLCD:
   354  000009                     ___awdiv@divisor:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x8
   358  000009                     	ds	2
   359  00000B                     WriteLCD@i:
   360                           	opt stack 0
   361  00000B                     ___awdiv@counter:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0xA
   365  00000B                     	ds	1
   366  00000C                     ___awdiv@sign:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0xB
   370  00000C                     	ds	1
   371  00000D                     ___awdiv@quotient:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0xC
   375  00000D                     	ds	2
   376  00000F                     ?___wmul:
   377                           	opt stack 0
   378  00000F                     ?___awtoft:
   379                           	opt stack 0
   380  00000F                     ___wmul@multiplier:
   381                           	opt stack 0
   382  00000F                     ___awtoft@c:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0xE
   386  00000F                     	ds	2
   387  000011                     ___wmul@multiplicand:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x10
   391  000011                     	ds	1
   392  000012                     ___awtoft@sign:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x11
   396  000012                     	ds	1
   397  000013                     ?___ftmul:
   398                           	opt stack 0
   399  000013                     ___wmul@product:
   400                           	opt stack 0
   401  000013                     ___ftmul@f1:
   402                           	opt stack 0
   403                           
   404                           ; 3 bytes @ 0x12
   405  000013                     	ds	2
   406  000015                     integerToLcd@num:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x14
   410  000015                     	ds	1
   411  000016                     ___ftmul@f2:
   412                           	opt stack 0
   413                           
   414                           ; 3 bytes @ 0x15
   415  000016                     	ds	1
   416  000017                     integerToLcd@thousands:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0x16
   420  000017                     	ds	1
   421  000018                     integerToLcd@hundreds:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x17
   425  000018                     	ds	1
   426  000019                     ??___ftmul:
   427  000019                     integerToLcd@tens:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x18
   431  000019                     	ds	1
   432  00001A                     integerToLcd@ones:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x19
   436  00001A                     	ds	1
   437  00001B                     adcToLcd@result:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x1A
   441  00001B                     	ds	1
   442  00001C                     ___ftmul@exp:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0x1B
   446  00001C                     	ds	1
   447  00001D                     ___ftmul@f3_as_product:
   448                           	opt stack 0
   449                           
   450                           ; 3 bytes @ 0x1C
   451  00001D                     	ds	3
   452  000020                     ___ftmul@cntr:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x1F
   456  000020                     	ds	1
   457  000021                     ___ftmul@sign:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x20
   461  000021                     	ds	1
   462  000022                     ?___ftadd:
   463                           	opt stack 0
   464  000022                     ___ftadd@f1:
   465                           	opt stack 0
   466                           
   467                           ; 3 bytes @ 0x21
   468  000022                     	ds	3
   469  000025                     ___ftadd@f2:
   470                           	opt stack 0
   471                           
   472                           ; 3 bytes @ 0x24
   473  000025                     	ds	3
   474  000028                     ??___ftadd:
   475                           
   476                           ; 1 bytes @ 0x27
   477  000028                     	ds	3
   478  00002B                     ___ftadd@sign:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0x2A
   482  00002B                     	ds	1
   483  00002C                     ___ftadd@exp2:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x2B
   487  00002C                     	ds	1
   488  00002D                     ___ftadd@exp1:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x2C
   492  00002D                     	ds	1
   493  00002E                     ?_eval_poly:
   494                           	opt stack 0
   495  00002E                     eval_poly@x:
   496                           	opt stack 0
   497                           
   498                           ; 3 bytes @ 0x2D
   499  00002E                     	ds	3
   500  000031                     eval_poly@d:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x30
   504  000031                     	ds	2
   505  000033                     eval_poly@n:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x32
   509  000033                     	ds	2
   510  000035                     ??_eval_poly:
   511                           
   512                           ; 1 bytes @ 0x34
   513  000035                     	ds	2
   514  000037                     eval_poly@res:
   515                           	opt stack 0
   516                           
   517                           ; 3 bytes @ 0x36
   518  000037                     	ds	3
   519  00003A                     ?_log:
   520                           	opt stack 0
   521  00003A                     log@x:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x39
   525  00003A                     	ds	3
   526  00003D                     log@exponent:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x3C
   530  00003D                     	ds	2
   531  00003F                     ?___fttol:
   532                           	opt stack 0
   533  00003F                     ___fttol@f1:
   534                           	opt stack 0
   535                           
   536                           ; 3 bytes @ 0x3E
   537  00003F                     	ds	4
   538  000043                     ??___fttol:
   539                           
   540                           ; 1 bytes @ 0x42
   541  000043                     	ds	5
   542  000048                     ___fttol@sign1:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x47
   546  000048                     	ds	1
   547  000049                     ___fttol@lval:
   548                           	opt stack 0
   549                           
   550                           ; 4 bytes @ 0x48
   551  000049                     	ds	4
   552  00004D                     ___fttol@exp1:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x4C
   556  00004D                     	ds	1
   557  00004E                     ?_get_temp:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x4D
   561  00004E                     	ds	2
   562  000050                     ??_get_temp:
   563                           
   564                           ; 1 bytes @ 0x4F
   565  000050                     	ds	2
   566  000052                     _get_temp$1712:
   567                           	opt stack 0
   568                           
   569                           ; 3 bytes @ 0x51
   570  000052                     	ds	3
   571  000055                     get_temp@logres:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x54
   575  000055                     	ds	2
   576  000057                     get_temp@result:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x56
   580  000057                     	ds	2
   581  000059                     display_temp@temp:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x58
   585  000059                     	ds	2
   586  00005B                     main@state_old:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x5A
   590  00005B                     	ds	2
   591                           tblptru	equ	0xFF8
   592                           tblptrh	equ	0xFF7
   593                           tblptrl	equ	0xFF6
   594                           tablat	equ	0xFF5
   595                           
   596 ;;
   597 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   598 ;;
   599 ;; *************** function _main *****************
   600 ;; Defined at:
   601 ;;		line 89 in file "hmi.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;		None
   604 ;; Auto vars:     Size  Location     Type
   605 ;;  state_old       2   90[COMRAM] int 
   606 ;; Return value:  Size  Location     Type
   607 ;;                  2   88[None  ] int 
   608 ;; Registers used:
   609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   615 ;;      Params:         0       0       0       0       0       0       0
   616 ;;      Locals:         2       0       0       0       0       0       0
   617 ;;      Temps:          0       0       0       0       0       0       0
   618 ;;      Totals:         2       0       0       0       0       0       0
   619 ;;Total ram usage:        2 bytes
   620 ;; Hardware stack levels required when called:    7
   621 ;; This function calls:
   622 ;;		_InitLCD
   623 ;;		_SerialReceive
   624 ;;		_adcToLcd
   625 ;;		_delay
   626 ;;		_hmi_out
   627 ;;		_init_adc
   628 ;; This function is called by:
   629 ;;		Startup code after reset
   630 ;; This function uses a non-reentrant model
   631 ;;
   632                           
   633                           	psect	text0
   634  0010B2                     __ptext0:
   635                           	opt stack 0
   636  0010B2                     _main:
   637                           	opt stack 24
   638                           
   639                           ;hmi.c: 92: TRISCbits.RC6=0;
   640                           
   641                           ;incstack = 0
   642  0010B2  9C94               	bcf	3988,6,c	;volatile
   643                           
   644                           ;hmi.c: 93: TRISCbits.RC7=1;
   645  0010B4  8E94               	bsf	3988,7,c	;volatile
   646                           
   647                           ;hmi.c: 94: TXSTA = 0b00100000;
   648  0010B6  0E20               	movlw	32
   649  0010B8  6EAC               	movwf	4012,c	;volatile
   650                           
   651                           ;hmi.c: 95: RCSTA = 0b10010000;
   652  0010BA  0E90               	movlw	144
   653  0010BC  6EAB               	movwf	4011,c	;volatile
   654                           
   655                           ;hmi.c: 97: BAUDCONbits.BRG16 =0;
   656  0010BE  96B8               	bcf	4024,3,c	;volatile
   657                           
   658                           ;hmi.c: 98: OSCCONbits.IRCF0 = 0;
   659  0010C0  98D3               	bcf	4051,4,c	;volatile
   660                           
   661                           ;hmi.c: 99: OSCCONbits.IRCF1 = 1;
   662  0010C2  8AD3               	bsf	4051,5,c	;volatile
   663                           
   664                           ;hmi.c: 100: OSCCONbits.IRCF2 = 1;
   665  0010C4  8CD3               	bsf	4051,6,c	;volatile
   666                           
   667                           ;hmi.c: 101: OSCCONbits.SCS1 =1;
   668  0010C6  82D3               	bsf	4051,1,c	;volatile
   669                           
   670                           ;hmi.c: 102: SPBRG = 12;
   671  0010C8  0E0C               	movlw	12
   672  0010CA  6EAF               	movwf	4015,c	;volatile
   673  0010CC                     
   674                           ;hmi.c: 105: {
   675                           ;hmi.c: 107: while(SerialReceive() != 'u');
   676  0010CC  EC7C  F009         	call	_SerialReceive	;wreg free
   677  0010D0  0A75               	xorlw	117
   678  0010D2  A4D8               	btfss	status,2,c
   679  0010D4  D7FB               	goto	l89
   680  0010D6                     u2060:
   681                           
   682                           ;hmi.c: 108: while(!PIR1bits.TXIF);
   683  0010D6  A89E               	btfss	3998,4,c	;volatile
   684  0010D8  D7FE               	goto	u2060
   685                           
   686                           ;hmi.c: 109: TXREG = 'p';
   687  0010DA  0E70               	movlw	112
   688  0010DC  6EAD               	movwf	4013,c	;volatile
   689  0010DE  D7F6               	goto	l89
   690  0010E0                     
   691                           ;hmi.c: 140: {
   692                           ;hmi.c: 141: adcToLcd();
   693  0010E0  ECD3  F008         	call	_adcToLcd	;wreg free
   694                           
   695                           ;hmi.c: 142: delay(100);
   696  0010E4  0E00               	movlw	0
   697  0010E6  6E02               	movwf	delay@x+1,c
   698  0010E8  0E64               	movlw	100
   699  0010EA  6E01               	movwf	delay@x,c
   700  0010EC  ECEF  F008         	call	_delay	;wreg free
   701  0010F0  D7F7               	goto	l98
   702  0010F2                     __end_of_main:
   703                           	opt stack 0
   704                           tblptru	equ	0xFF8
   705                           tblptrh	equ	0xFF7
   706                           tblptrl	equ	0xFF6
   707                           tablat	equ	0xFF5
   708                           status	equ	0xFD8
   709                           
   710 ;; *************** function _init_adc *****************
   711 ;; Defined at:
   712 ;;		line 9 in file "sensors.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;		None
   715 ;; Auto vars:     Size  Location     Type
   716 ;;		None
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, status,2, status,0, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   726 ;;      Params:         0       0       0       0       0       0       0
   727 ;;      Locals:         0       0       0       0       0       0       0
   728 ;;      Temps:          0       0       0       0       0       0       0
   729 ;;      Totals:         0       0       0       0       0       0       0
   730 ;;Total ram usage:        0 bytes
   731 ;; Hardware stack levels used:    1
   732 ;; Hardware stack levels required when called:    1
   733 ;; This function calls:
   734 ;;		_delay
   735 ;; This function is called by:
   736 ;;		_main
   737 ;; This function uses a non-reentrant model
   738 ;;
   739                           
   740                           	psect	text1
   741  0010F2                     __ptext1:
   742                           	opt stack 0
   743  0010F2                     _init_adc:
   744                           	opt stack 29
   745                           
   746                           ;sensors.c: 11: TRISAbits.RA0 = 1;
   747                           
   748                           ;incstack = 0
   749  0010F2  8092               	bsf	3986,0,c	;volatile
   750                           
   751                           ;sensors.c: 12: TRISAbits.RA1 = 1;
   752  0010F4  8292               	bsf	3986,1,c	;volatile
   753                           
   754                           ;sensors.c: 13: TRISAbits.RA2 = 1;
   755  0010F6  8492               	bsf	3986,2,c	;volatile
   756                           
   757                           ;sensors.c: 14: TRISAbits.RA3 = 1;
   758  0010F8  8692               	bsf	3986,3,c	;volatile
   759                           
   760                           ;sensors.c: 15: ANSELbits.ANS0 = 1;
   761  0010FA  807E               	bsf	3966,0,c	;volatile
   762                           
   763                           ;sensors.c: 16: ANSELbits.ANS1 = 1;
   764  0010FC  827E               	bsf	3966,1,c	;volatile
   765                           
   766                           ;sensors.c: 17: ANSELbits.ANS2 = 1;
   767  0010FE  847E               	bsf	3966,2,c	;volatile
   768                           
   769                           ;sensors.c: 18: ANSELbits.ANS3 = 1;
   770  001100  867E               	bsf	3966,3,c	;volatile
   771                           
   772                           ;sensors.c: 19: delay(2);
   773  001102  0E00               	movlw	0
   774  001104  6E02               	movwf	delay@x+1,c
   775  001106  0E02               	movlw	2
   776  001108  6E01               	movwf	delay@x,c
   777  00110A  ECEF  F008         	call	_delay	;wreg free
   778                           
   779                           ;sensors.c: 20: ADCON1 = 0;
   780  00110E  0E00               	movlw	0
   781  001110  6EC1               	movwf	4033,c	;volatile
   782                           
   783                           ;sensors.c: 21: delay(2);
   784  001112  0E00               	movlw	0
   785  001114  6E02               	movwf	delay@x+1,c
   786  001116  0E02               	movlw	2
   787  001118  6E01               	movwf	delay@x,c
   788  00111A  ECEF  F008         	call	_delay	;wreg free
   789                           
   790                           ;sensors.c: 22: ADCON2 = 0b00101011;
   791  00111E  0E2B               	movlw	43
   792  001120  6EC0               	movwf	4032,c	;volatile
   793                           
   794                           ;sensors.c: 23: delay(2);
   795  001122  0E00               	movlw	0
   796  001124  6E02               	movwf	delay@x+1,c
   797  001126  0E02               	movlw	2
   798  001128  6E01               	movwf	delay@x,c
   799  00112A  ECEF  F008         	call	_delay	;wreg free
   800  00112E  0012               	return		;funcret
   801  001130                     __end_of_init_adc:
   802                           	opt stack 0
   803                           tblptru	equ	0xFF8
   804                           tblptrh	equ	0xFF7
   805                           tblptrl	equ	0xFF6
   806                           tablat	equ	0xFF5
   807                           status	equ	0xFD8
   808                           
   809 ;; *************** function _hmi_out *****************
   810 ;; Defined at:
   811 ;;		line 190 in file "hmi.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   825 ;;      Params:         0       0       0       0       0       0       0
   826 ;;      Locals:         0       0       0       0       0       0       0
   827 ;;      Temps:          0       0       0       0       0       0       0
   828 ;;      Totals:         0       0       0       0       0       0       0
   829 ;;Total ram usage:        0 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    6
   832 ;; This function calls:
   833 ;;		_WriteLCD
   834 ;;		_clear_lcd
   835 ;;		_delay
   836 ;;		_display_mode
   837 ;;		_display_speed
   838 ;;		_display_temp
   839 ;;		_goto_xy
   840 ;; This function is called by:
   841 ;;		_main
   842 ;;		_get_input
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           	psect	text2
   847  000DEC                     __ptext2:
   848                           	opt stack 0
   849  000DEC                     _hmi_out:
   850                           	opt stack 24
   851                           
   852                           ;hmi.c: 192: if(!state)
   853                           
   854                           ;incstack = 0
   855  000DEC  0100               	movlb	0	; () banked
   856  000DEE  5164               	movf	_state& (0+255),w,b
   857  000DF0  1165               	iorwf	(_state+1)& (0+255),w,b
   858  000DF2  A4D8               	btfss	status,2,c
   859  000DF4  D009               	goto	l125
   860                           
   861                           ; BSR set to: 0
   862                           ;hmi.c: 193: {
   863                           ;hmi.c: 194: clear_lcd();
   864  000DF6  EC80  F009         	call	_clear_lcd	;wreg free
   865                           
   866                           ;hmi.c: 195: WriteLCD("Idle");
   867  000DFA  0E28               	movlw	low STR_2
   868  000DFC  6E07               	movwf	WriteLCD@message,c
   869  000DFE  0E06               	movlw	high STR_2
   870  000E00  6E08               	movwf	WriteLCD@message+1,c
   871  000E02  EC02  F008         	call	_WriteLCD	;wreg free
   872                           
   873                           ;hmi.c: 196: return;
   874  000E06  0012               	return	
   875  000E08                     l125:
   876                           
   877                           ;hmi.c: 197: }
   878                           ;hmi.c: 198: clear_lcd();
   879  000E08  EC80  F009         	call	_clear_lcd	;wreg free
   880                           
   881                           ;hmi.c: 199: delay(1);
   882  000E0C  0E00               	movlw	0
   883  000E0E  6E02               	movwf	delay@x+1,c
   884  000E10  0E01               	movlw	1
   885  000E12  6E01               	movwf	delay@x,c
   886  000E14  ECEF  F008         	call	_delay	;wreg free
   887                           
   888                           ;hmi.c: 200: goto_xy(1,15);
   889  000E18  0E0F               	movlw	15
   890  000E1A  6E07               	movwf	goto_xy@y,c
   891  000E1C  0E01               	movlw	1
   892  000E1E  EC43  F009         	call	_goto_xy
   893                           
   894                           ;hmi.c: 201: delay(1);
   895  000E22  0E00               	movlw	0
   896  000E24  6E02               	movwf	delay@x+1,c
   897  000E26  0E01               	movlw	1
   898  000E28  6E01               	movwf	delay@x,c
   899  000E2A  ECEF  F008         	call	_delay	;wreg free
   900                           
   901                           ;hmi.c: 202: display_speed();
   902  000E2E  EC70  F009         	call	_display_speed	;wreg free
   903                           
   904                           ;hmi.c: 207: delay(1);
   905  000E32  0E00               	movlw	0
   906  000E34  6E02               	movwf	delay@x+1,c
   907  000E36  0E01               	movlw	1
   908  000E38  6E01               	movwf	delay@x,c
   909  000E3A  ECEF  F008         	call	_delay	;wreg free
   910                           
   911                           ;hmi.c: 208: goto_xy(0,0);
   912  000E3E  0E00               	movlw	0
   913  000E40  6E07               	movwf	goto_xy@y,c
   914  000E42  0E00               	movlw	0
   915  000E44  EC43  F009         	call	_goto_xy
   916                           
   917                           ;hmi.c: 209: delay(1);
   918  000E48  0E00               	movlw	0
   919  000E4A  6E02               	movwf	delay@x+1,c
   920  000E4C  0E01               	movlw	1
   921  000E4E  6E01               	movwf	delay@x,c
   922  000E50  ECEF  F008         	call	_delay	;wreg free
   923                           
   924                           ;hmi.c: 210: display_temp();
   925  000E54  EC0A  F009         	call	_display_temp	;wreg free
   926                           
   927                           ;hmi.c: 211: delay(1);
   928  000E58  0E00               	movlw	0
   929  000E5A  6E02               	movwf	delay@x+1,c
   930  000E5C  0E01               	movlw	1
   931  000E5E  6E01               	movwf	delay@x,c
   932  000E60  ECEF  F008         	call	_delay	;wreg free
   933                           
   934                           ;hmi.c: 212: goto_xy(9,0);
   935  000E64  0E00               	movlw	0
   936  000E66  6E07               	movwf	goto_xy@y,c
   937  000E68  0E09               	movlw	9
   938  000E6A  EC43  F009         	call	_goto_xy
   939                           
   940                           ;hmi.c: 213: delay(1);
   941  000E6E  0E00               	movlw	0
   942  000E70  6E02               	movwf	delay@x+1,c
   943  000E72  0E01               	movlw	1
   944  000E74  6E01               	movwf	delay@x,c
   945  000E76  ECEF  F008         	call	_delay	;wreg free
   946                           
   947                           ;hmi.c: 214: display_mode();
   948  000E7A  EC1D  F009         	call	_display_mode	;wreg free
   949  000E7E  0012               	return		;funcret
   950  000E80                     __end_of_hmi_out:
   951                           	opt stack 0
   952                           tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           tblptrl	equ	0xFF6
   955                           tablat	equ	0xFF5
   956                           status	equ	0xFD8
   957                           
   958 ;; *************** function _goto_xy *****************
   959 ;; Defined at:
   960 ;;		line 136 in file "lcd.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;  x               1    wreg     unsigned char 
   963 ;;  y               1    6[COMRAM] unsigned char 
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  x               1    7[COMRAM] unsigned char 
   966 ;; Return value:  Size  Location     Type
   967 ;;                  1    wreg      void 
   968 ;; Registers used:
   969 ;;		wreg, status,2, status,0, cstack
   970 ;; Tracked objects:
   971 ;;		On entry : 0/0
   972 ;;		On exit  : 0/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   975 ;;      Params:         1       0       0       0       0       0       0
   976 ;;      Locals:         1       0       0       0       0       0       0
   977 ;;      Temps:          0       0       0       0       0       0       0
   978 ;;      Totals:         2       0       0       0       0       0       0
   979 ;;Total ram usage:        2 bytes
   980 ;; Hardware stack levels used:    1
   981 ;; Hardware stack levels required when called:    4
   982 ;; This function calls:
   983 ;;		_WriteCtrl
   984 ;; This function is called by:
   985 ;;		_hmi_out
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           	psect	text3
   990  001286                     __ptext3:
   991                           	opt stack 0
   992  001286                     _goto_xy:
   993                           	opt stack 25
   994                           
   995                           ;incstack = 0
   996                           ;goto_xy@x stored from wreg
   997  001286  6E08               	movwf	goto_xy@x,c
   998                           
   999                           ;lcd.c: 138: if(x<40)
  1000  001288  0E28               	movlw	40
  1001  00128A  6008               	cpfslt	goto_xy@x,c
  1002  00128C  0012               	return	
  1003                           
  1004                           ;lcd.c: 139: {
  1005                           ;lcd.c: 140: if(y) x|=0b01000000;
  1006  00128E  5007               	movf	goto_xy@y,w,c
  1007  001290  A4D8               	btfss	status,2,c
  1008  001292  8C08               	bsf	goto_xy@x,6,c
  1009                           
  1010                           ;lcd.c: 141: x|=0b10000000;
  1011  001294  8E08               	bsf	goto_xy@x,7,c
  1012                           
  1013                           ;lcd.c: 142: WriteCtrl(x);
  1014  001296  5008               	movf	goto_xy@x,w,c
  1015  001298  EC5B  F009         	call	_WriteCtrl
  1016  00129C  0012               	return	
  1017  00129E                     __end_of_goto_xy:
  1018                           	opt stack 0
  1019                           tblptru	equ	0xFF8
  1020                           tblptrh	equ	0xFF7
  1021                           tblptrl	equ	0xFF6
  1022                           tablat	equ	0xFF5
  1023                           status	equ	0xFD8
  1024                           
  1025 ;; *************** function _display_temp *****************
  1026 ;; Defined at:
  1027 ;;		line 236 in file "hmi.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;		None
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;  temp            2   88[COMRAM] int 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1041 ;;      Params:         0       0       0       0       0       0       0
  1042 ;;      Locals:         2       0       0       0       0       0       0
  1043 ;;      Temps:          0       0       0       0       0       0       0
  1044 ;;      Totals:         2       0       0       0       0       0       0
  1045 ;;Total ram usage:        2 bytes
  1046 ;; Hardware stack levels used:    1
  1047 ;; Hardware stack levels required when called:    5
  1048 ;; This function calls:
  1049 ;;		_WriteData
  1050 ;;		_get_temp
  1051 ;;		_integerToLcd
  1052 ;; This function is called by:
  1053 ;;		_hmi_out
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text4
  1058  001214                     __ptext4:
  1059                           	opt stack 0
  1060  001214                     _display_temp:
  1061                           	opt stack 24
  1062                           
  1063                           ;hmi.c: 238: int temp = get_temp();
  1064                           
  1065                           ;incstack = 0
  1066  001214  EC77  F009         	call	_get_temp	;wreg free
  1067  001218  C04E  F059         	movff	?_get_temp,display_temp@temp
  1068  00121C  C04F  F05A         	movff	?_get_temp+1,display_temp@temp+1
  1069                           
  1070                           ;hmi.c: 239: integerToLcd(temp);
  1071  001220  C059  F015         	movff	display_temp@temp,integerToLcd@num
  1072  001224  C05A  F016         	movff	display_temp@temp+1,integerToLcd@num+1
  1073  001228  EC45  F006         	call	_integerToLcd	;wreg free
  1074                           
  1075                           ;hmi.c: 240: WriteData(0b11011111);
  1076  00122C  0EDF               	movlw	223
  1077  00122E  EC4F  F009         	call	_WriteData
  1078                           
  1079                           ;hmi.c: 241: WriteData('C');
  1080  001232  0E43               	movlw	67
  1081  001234  EC4F  F009         	call	_WriteData
  1082  001238  0012               	return		;funcret
  1083  00123A                     __end_of_display_temp:
  1084                           	opt stack 0
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           status	equ	0xFD8
  1090                           
  1091 ;; *************** function _get_temp *****************
  1092 ;; Defined at:
  1093 ;;		line 31 in file "sensors.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;		None
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;  result          2   86[COMRAM] int 
  1098 ;;  logres          2   84[COMRAM] int 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  2   77[COMRAM] int 
  1101 ;; Registers used:
  1102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1108 ;;      Params:         2       0       0       0       0       0       0
  1109 ;;      Locals:         7       0       0       0       0       0       0
  1110 ;;      Temps:          2       0       0       0       0       0       0
  1111 ;;      Totals:        11       0       0       0       0       0       0
  1112 ;;Total ram usage:       11 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; Hardware stack levels required when called:    4
  1115 ;; This function calls:
  1116 ;;		___awdiv
  1117 ;;		___awtoft
  1118 ;;		___fttol
  1119 ;;		___wmul
  1120 ;;		_adc_poll
  1121 ;;		_log
  1122 ;; This function is called by:
  1123 ;;		_display_temp
  1124 ;;		_display_light
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           	psect	text5
  1129  0012EE                     __ptext5:
  1130                           	opt stack 0
  1131  0012EE                     _get_temp:
  1132                           	opt stack 24
  1133                           
  1134                           ;sensors.c: 33: return 27;
  1135                           
  1136                           ;incstack = 0
  1137  0012EE  0E00               	movlw	0
  1138  0012F0  6E4F               	movwf	?_get_temp+1,c
  1139  0012F2  0E1B               	movlw	27
  1140  0012F4  6E4E               	movwf	?_get_temp,c
  1141  0012F6  0012               	return	
  1142  0012F8                     __end_of_get_temp:
  1143                           	opt stack 0
  1144                           tblptru	equ	0xFF8
  1145                           tblptrh	equ	0xFF7
  1146                           tblptrl	equ	0xFF6
  1147                           tablat	equ	0xFF5
  1148                           status	equ	0xFD8
  1149                           
  1150 ;; *************** function _log *****************
  1151 ;; Defined at:
  1152 ;;		line 5 in file "/opt/microchip/xc8/v1.44/sources/common/log.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  x               3   57[COMRAM] int 
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;  exponent        2   60[COMRAM] int 
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  3   57[COMRAM] int 
  1159 ;; Registers used:
  1160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1166 ;;      Params:         3       0       0       0       0       0       0
  1167 ;;      Locals:         2       0       0       0       0       0       0
  1168 ;;      Temps:          0       0       0       0       0       0       0
  1169 ;;      Totals:         5       0       0       0       0       0       0
  1170 ;;Total ram usage:        5 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    3
  1173 ;; This function calls:
  1174 ;;		___awtoft
  1175 ;;		___ftadd
  1176 ;;		___ftmul
  1177 ;;		_eval_poly
  1178 ;;		_frexp
  1179 ;; This function is called by:
  1180 ;;		_get_temp
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text6
  1185  0007E0                     __ptext6:
  1186                           	opt stack 0
  1187  0007E0                     _log:
  1188                           	opt stack 24
  1189                           
  1190                           ;incstack = 0
  1191  0007E0  AE3C               	btfss	log@x+2,7,c
  1192  0007E2  D00C               	goto	l743
  1193  0007E4  0E00               	movlw	0
  1194  0007E6  0100               	movlb	0	; () banked
  1195  0007E8  6F61               	movwf	(_errno+1)& (0+255),b
  1196  0007EA  0E21               	movlw	33
  1197  0007EC  6F60               	movwf	_errno& (0+255),b
  1198  0007EE  0E00               	movlw	0
  1199  0007F0  6E3A               	movwf	?_log,c
  1200  0007F2  0E00               	movlw	0
  1201  0007F4  6E3B               	movwf	?_log+1,c
  1202  0007F6  0E00               	movlw	0
  1203  0007F8  6E3C               	movwf	?_log+2,c
  1204                           
  1205                           ; BSR set to: 0
  1206  0007FA  0012               	return	
  1207  0007FC                     l743:
  1208                           
  1209                           ; BSR set to: 0
  1210  0007FC  503A               	movf	log@x,w,c
  1211  0007FE  103B               	iorwf	log@x+1,w,c
  1212  000800  103C               	iorwf	log@x+2,w,c
  1213  000802  A4D8               	btfss	status,2,c
  1214  000804  D00C               	goto	l745
  1215  000806  0E00               	movlw	0
  1216  000808  0100               	movlb	0	; () banked
  1217  00080A  6F61               	movwf	(_errno+1)& (0+255),b
  1218  00080C  0E22               	movlw	34
  1219  00080E  6F60               	movwf	_errno& (0+255),b
  1220  000810  0E00               	movlw	0
  1221  000812  6E3A               	movwf	?_log,c
  1222  000814  0E00               	movlw	0
  1223  000816  6E3B               	movwf	?_log+1,c
  1224  000818  0E00               	movlw	0
  1225  00081A  6E3C               	movwf	?_log+2,c
  1226                           
  1227                           ; BSR set to: 0
  1228  00081C  0012               	return	
  1229  00081E                     l745:
  1230                           
  1231                           ; BSR set to: 0
  1232  00081E  0E00               	movlw	0
  1233  000820  6E16               	movwf	___ftmul@f2,c
  1234  000822  0E00               	movlw	0
  1235  000824  6E17               	movwf	___ftmul@f2+1,c
  1236  000826  0E40               	movlw	64
  1237  000828  6E18               	movwf	___ftmul@f2+2,c
  1238  00082A  0E3D               	movlw	low log@exponent
  1239  00082C  6E04               	movwf	frexp@eptr,c
  1240  00082E  0E00               	movlw	high log@exponent
  1241  000830  6E05               	movwf	frexp@eptr+1,c
  1242  000832  C03A  F001         	movff	log@x,frexp@value
  1243  000836  C03B  F002         	movff	log@x+1,frexp@value+1
  1244  00083A  C03C  F003         	movff	log@x+2,frexp@value+2
  1245  00083E  EC40  F007         	call	_frexp	;wreg free
  1246  000842  C001  F013         	movff	?_frexp,___ftmul@f1
  1247  000846  C002  F014         	movff	?_frexp+1,___ftmul@f1+1
  1248  00084A  C003  F015         	movff	?_frexp+2,___ftmul@f1+2
  1249  00084E  EC7F  F004         	call	___ftmul	;wreg free
  1250  000852  C013  F022         	movff	?___ftmul,___ftadd@f1
  1251  000856  C014  F023         	movff	?___ftmul+1,___ftadd@f1+1
  1252  00085A  C015  F024         	movff	?___ftmul+2,___ftadd@f1+2
  1253  00085E  0E00               	movlw	0
  1254  000860  6E25               	movwf	___ftadd@f2,c
  1255  000862  0E80               	movlw	128
  1256  000864  6E26               	movwf	___ftadd@f2+1,c
  1257  000866  0EBF               	movlw	191
  1258  000868  6E27               	movwf	___ftadd@f2+2,c
  1259  00086A  EC1A  F003         	call	___ftadd	;wreg free
  1260  00086E  C022  F03A         	movff	?___ftadd,log@x
  1261  000872  C023  F03B         	movff	?___ftadd+1,log@x+1
  1262  000876  C024  F03C         	movff	?___ftadd+2,log@x+2
  1263  00087A  063D               	decf	log@exponent,f,c
  1264  00087C  A0D8               	btfss	status,0,c
  1265  00087E  063E               	decf	log@exponent+1,f,c
  1266  000880  C03A  F02E         	movff	log@x,eval_poly@x
  1267  000884  C03B  F02F         	movff	log@x+1,eval_poly@x+1
  1268  000888  C03C  F030         	movff	log@x+2,eval_poly@x+2
  1269  00088C  0E01               	movlw	low log@coeff
  1270  00088E  6E31               	movwf	eval_poly@d,c
  1271  000890  0E06               	movlw	high log@coeff
  1272  000892  6E32               	movwf	eval_poly@d+1,c
  1273  000894  0E00               	movlw	0
  1274  000896  6E34               	movwf	eval_poly@n+1,c
  1275  000898  0E08               	movlw	8
  1276  00089A  6E33               	movwf	eval_poly@n,c
  1277  00089C  EC73  F005         	call	_eval_poly	;wreg free
  1278  0008A0  C02E  F03A         	movff	?_eval_poly,log@x
  1279  0008A4  C02F  F03B         	movff	?_eval_poly+1,log@x+1
  1280  0008A8  C030  F03C         	movff	?_eval_poly+2,log@x+2
  1281  0008AC  0E72               	movlw	114
  1282  0008AE  6E16               	movwf	___ftmul@f2,c
  1283  0008B0  0E31               	movlw	49
  1284  0008B2  6E17               	movwf	___ftmul@f2+1,c
  1285  0008B4  0E3F               	movlw	63
  1286  0008B6  6E18               	movwf	___ftmul@f2+2,c
  1287  0008B8  C03D  F00F         	movff	log@exponent,___awtoft@c
  1288  0008BC  C03E  F010         	movff	log@exponent+1,___awtoft@c+1
  1289  0008C0  ECB7  F008         	call	___awtoft	;wreg free
  1290  0008C4  C00F  F013         	movff	?___awtoft,___ftmul@f1
  1291  0008C8  C010  F014         	movff	?___awtoft+1,___ftmul@f1+1
  1292  0008CC  C011  F015         	movff	?___awtoft+2,___ftmul@f1+2
  1293  0008D0  EC7F  F004         	call	___ftmul	;wreg free
  1294  0008D4  C013  F022         	movff	?___ftmul,___ftadd@f1
  1295  0008D8  C014  F023         	movff	?___ftmul+1,___ftadd@f1+1
  1296  0008DC  C015  F024         	movff	?___ftmul+2,___ftadd@f1+2
  1297  0008E0  C03A  F025         	movff	log@x,___ftadd@f2
  1298  0008E4  C03B  F026         	movff	log@x+1,___ftadd@f2+1
  1299  0008E8  C03C  F027         	movff	log@x+2,___ftadd@f2+2
  1300  0008EC  EC1A  F003         	call	___ftadd	;wreg free
  1301  0008F0  C022  F03A         	movff	?___ftadd,?_log
  1302  0008F4  C023  F03B         	movff	?___ftadd+1,?_log+1
  1303  0008F8  C024  F03C         	movff	?___ftadd+2,?_log+2
  1304  0008FC  0012               	return	
  1305  0008FE                     __end_of_log:
  1306                           	opt stack 0
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           status	equ	0xFD8
  1312                           
  1313 ;; *************** function _frexp *****************
  1314 ;; Defined at:
  1315 ;;		line 254 in file "/opt/microchip/xc8/v1.44/sources/common/frexp.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  value           3    0[COMRAM] int 
  1318 ;;  eptr            2    3[COMRAM] PTR int 
  1319 ;;		 -> log@exponent(2), 
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  3    0[COMRAM] PTR int 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1331 ;;      Params:         5       0       0       0       0       0       0
  1332 ;;      Locals:         0       0       0       0       0       0       0
  1333 ;;      Temps:          2       0       0       0       0       0       0
  1334 ;;      Totals:         7       0       0       0       0       0       0
  1335 ;;Total ram usage:        7 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; This function calls:
  1338 ;;		Nothing
  1339 ;; This function is called by:
  1340 ;;		_log
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text7
  1345  000E80                     __ptext7:
  1346                           	opt stack 0
  1347  000E80                     _frexp:
  1348                           	opt stack 26
  1349                           
  1350                           ;incstack = 0
  1351  000E80  5001               	movf	frexp@value,w,c
  1352  000E82  1002               	iorwf	frexp@value+1,w,c
  1353  000E84  1003               	iorwf	frexp@value+2,w,c
  1354  000E86  A4D8               	btfss	status,2,c
  1355  000E88  D00F               	goto	l956
  1356  000E8A  C004  FFD9         	movff	frexp@eptr,fsr2l
  1357  000E8E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1358  000E92  0E00               	movlw	0
  1359  000E94  6EDE               	movwf	postinc2,c
  1360  000E96  0E00               	movlw	0
  1361  000E98  6EDD               	movwf	postdec2,c
  1362  000E9A  0E00               	movlw	0
  1363  000E9C  6E01               	movwf	?_frexp,c
  1364  000E9E  0E00               	movlw	0
  1365  000EA0  6E02               	movwf	?_frexp+1,c
  1366  000EA2  0E00               	movlw	0
  1367  000EA4  6E03               	movwf	?_frexp+2,c
  1368  000EA6  0012               	return	
  1369  000EA8                     l956:
  1370  000EA8  5003               	movf	frexp@value+2,w,c
  1371  000EAA  0B7F               	andlw	127
  1372  000EAC  6E06               	movwf	??_frexp& (0+255),c
  1373  000EAE  6A07               	clrf	(??_frexp+1)& (0+255),c
  1374  000EB0  90D8               	bcf	status,0,c
  1375  000EB2  3606               	rlcf	??_frexp,f,c
  1376  000EB4  3607               	rlcf	??_frexp+1,f,c
  1377  000EB6  C004  FFD9         	movff	frexp@eptr,fsr2l
  1378  000EBA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1379  000EBE  C006  FFDE         	movff	??_frexp,postinc2
  1380  000EC2  C007  FFDD         	movff	??_frexp+1,postdec2
  1381  000EC6  AE02               	btfss	frexp@value+1,7,c
  1382  000EC8  D003               	goto	u1540
  1383  000ECA  6A06               	clrf	??_frexp& (0+255),c
  1384  000ECC  2A06               	incf	??_frexp& (0+255),f,c
  1385  000ECE  D001               	goto	u1548
  1386  000ED0                     u1540:
  1387  000ED0  6A06               	clrf	??_frexp& (0+255),c
  1388  000ED2                     u1548:
  1389  000ED2  5006               	movf	??_frexp,w,c
  1390  000ED4  C004  FFD9         	movff	frexp@eptr,fsr2l
  1391  000ED8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1392  000EDC  12DE               	iorwf	postinc2,f,c
  1393  000EDE  0E00               	movlw	0
  1394  000EE0  12DD               	iorwf	postdec2,f,c
  1395  000EE2  C004  FFD9         	movff	frexp@eptr,fsr2l
  1396  000EE6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1397  000EEA  0E82               	movlw	130
  1398  000EEC  26DE               	addwf	postinc2,f,c
  1399  000EEE  0EFF               	movlw	255
  1400  000EF0  22DD               	addwfc	postdec2,f,c
  1401  000EF2  8003               	bsf	frexp@value+2,0,c
  1402  000EF4  8203               	bsf	frexp@value+2,1,c
  1403  000EF6  8403               	bsf	frexp@value+2,2,c
  1404  000EF8  8603               	bsf	frexp@value+2,3,c
  1405  000EFA  8803               	bsf	frexp@value+2,4,c
  1406  000EFC  8A03               	bsf	frexp@value+2,5,c
  1407  000EFE  9C03               	bcf	frexp@value+2,6,c
  1408  000F00  9E02               	bcf	frexp@value+1,7,c
  1409  000F02  C001  F001         	movff	frexp@value,?_frexp
  1410  000F06  C002  F002         	movff	frexp@value+1,?_frexp+1
  1411  000F0A  C003  F003         	movff	frexp@value+2,?_frexp+2
  1412  000F0E  0012               	return	
  1413  000F10                     __end_of_frexp:
  1414                           	opt stack 0
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           postinc2	equ	0xFDE
  1420                           postdec2	equ	0xFDD
  1421                           fsr2h	equ	0xFDA
  1422                           fsr2l	equ	0xFD9
  1423                           status	equ	0xFD8
  1424                           
  1425 ;; *************** function _eval_poly *****************
  1426 ;; Defined at:
  1427 ;;		line 4 in file "/opt/microchip/xc8/v1.44/sources/common/evalpoly.c"
  1428 ;; Parameters:    Size  Location     Type
  1429 ;;  x               3   45[COMRAM] PTR int 
  1430 ;;  d               2   48[COMRAM] PTR const 
  1431 ;;		 -> log@coeff(27), 
  1432 ;;  n               2   50[COMRAM] int 
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;  res             3   54[COMRAM] int 
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  3   45[COMRAM] int 
  1437 ;; Registers used:
  1438 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1444 ;;      Params:         7       0       0       0       0       0       0
  1445 ;;      Locals:         3       0       0       0       0       0       0
  1446 ;;      Temps:          2       0       0       0       0       0       0
  1447 ;;      Totals:        12       0       0       0       0       0       0
  1448 ;;Total ram usage:       12 bytes
  1449 ;; Hardware stack levels used:    1
  1450 ;; Hardware stack levels required when called:    2
  1451 ;; This function calls:
  1452 ;;		___ftadd
  1453 ;;		___ftmul
  1454 ;;		___wmul
  1455 ;; This function is called by:
  1456 ;;		_log
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460                           	psect	text8
  1461  000AE6                     __ptext8:
  1462                           	opt stack 0
  1463  000AE6                     _eval_poly:
  1464                           	opt stack 24
  1465                           
  1466                           ;incstack = 0
  1467  000AE6  C033  F00F         	movff	eval_poly@n,___wmul@multiplier
  1468  000AEA  C034  F010         	movff	eval_poly@n+1,___wmul@multiplier+1
  1469  000AEE  0E00               	movlw	0
  1470  000AF0  6E12               	movwf	___wmul@multiplicand+1,c
  1471  000AF2  0E03               	movlw	3
  1472  000AF4  6E11               	movwf	___wmul@multiplicand,c
  1473  000AF6  EC30  F009         	call	___wmul	;wreg free
  1474  000AFA  C031  F035         	movff	eval_poly@d,??_eval_poly
  1475  000AFE  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  1476  000B02  500F               	movf	?___wmul,w,c
  1477  000B04  2635               	addwf	??_eval_poly,f,c
  1478  000B06  5010               	movf	?___wmul+1,w,c
  1479  000B08  2236               	addwfc	??_eval_poly+1,f,c
  1480  000B0A  C035  FFF6         	movff	??_eval_poly,tblptrl
  1481  000B0E  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  1482  000B12                     	if	0	;tblptru may be non-zero
  1483  000B12                     	endif
  1484  000B12                     	if	0	;tblptru may be non-zero
  1485  000B12                     	endif
  1486  000B12  0009               	tblrd		*+
  1487  000B14  CFF5 F037          	movff	tablat,eval_poly@res
  1488  000B18  0009               	tblrd		*+
  1489  000B1A  CFF5 F038          	movff	tablat,eval_poly@res+1
  1490  000B1E  000A               	tblrd		*-
  1491  000B20  CFF5 F039          	movff	tablat,eval_poly@res+2
  1492  000B24  D03E               	goto	l948
  1493  000B26  C037  F016         	movff	eval_poly@res,___ftmul@f2
  1494  000B2A  C038  F017         	movff	eval_poly@res+1,___ftmul@f2+1
  1495  000B2E  C039  F018         	movff	eval_poly@res+2,___ftmul@f2+2
  1496  000B32  C02E  F013         	movff	eval_poly@x,___ftmul@f1
  1497  000B36  C02F  F014         	movff	eval_poly@x+1,___ftmul@f1+1
  1498  000B3A  C030  F015         	movff	eval_poly@x+2,___ftmul@f1+2
  1499  000B3E  EC7F  F004         	call	___ftmul	;wreg free
  1500  000B42  C013  F022         	movff	?___ftmul,___ftadd@f1
  1501  000B46  C014  F023         	movff	?___ftmul+1,___ftadd@f1+1
  1502  000B4A  C015  F024         	movff	?___ftmul+2,___ftadd@f1+2
  1503  000B4E  0E00               	movlw	0
  1504  000B50  6E12               	movwf	___wmul@multiplicand+1,c
  1505  000B52  0E03               	movlw	3
  1506  000B54  6E11               	movwf	___wmul@multiplicand,c
  1507  000B56  0633               	decf	eval_poly@n,f,c
  1508  000B58  A0D8               	btfss	status,0,c
  1509  000B5A  0634               	decf	eval_poly@n+1,f,c
  1510  000B5C  C033  F00F         	movff	eval_poly@n,___wmul@multiplier
  1511  000B60  C034  F010         	movff	eval_poly@n+1,___wmul@multiplier+1
  1512  000B64  EC30  F009         	call	___wmul	;wreg free
  1513  000B68  C031  F035         	movff	eval_poly@d,??_eval_poly
  1514  000B6C  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  1515  000B70  500F               	movf	?___wmul,w,c
  1516  000B72  2635               	addwf	??_eval_poly,f,c
  1517  000B74  5010               	movf	?___wmul+1,w,c
  1518  000B76  2236               	addwfc	??_eval_poly+1,f,c
  1519  000B78  C035  FFF6         	movff	??_eval_poly,tblptrl
  1520  000B7C  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  1521  000B80                     	if	0	;tblptru may be non-zero
  1522  000B80                     	endif
  1523  000B80                     	if	0	;tblptru may be non-zero
  1524  000B80                     	endif
  1525  000B80  0009               	tblrd		*+
  1526  000B82  CFF5 F025          	movff	tablat,___ftadd@f2
  1527  000B86  0009               	tblrd		*+
  1528  000B88  CFF5 F026          	movff	tablat,___ftadd@f2+1
  1529  000B8C  000A               	tblrd		*-
  1530  000B8E  CFF5 F027          	movff	tablat,___ftadd@f2+2
  1531  000B92  EC1A  F003         	call	___ftadd	;wreg free
  1532  000B96  C022  F037         	movff	?___ftadd,eval_poly@res
  1533  000B9A  C023  F038         	movff	?___ftadd+1,eval_poly@res+1
  1534  000B9E  C024  F039         	movff	?___ftadd+2,eval_poly@res+2
  1535  000BA2                     l948:
  1536  000BA2  5033               	movf	eval_poly@n,w,c
  1537  000BA4  1034               	iorwf	eval_poly@n+1,w,c
  1538  000BA6  A4D8               	btfss	status,2,c
  1539  000BA8  D7BE               	goto	l949
  1540  000BAA  C037  F02E         	movff	eval_poly@res,?_eval_poly
  1541  000BAE  C038  F02F         	movff	eval_poly@res+1,?_eval_poly+1
  1542  000BB2  C039  F030         	movff	eval_poly@res+2,?_eval_poly+2
  1543  000BB6  0012               	return		;funcret
  1544  000BB8                     __end_of_eval_poly:
  1545                           	opt stack 0
  1546                           tblptru	equ	0xFF8
  1547                           tblptrh	equ	0xFF7
  1548                           tblptrl	equ	0xFF6
  1549                           tablat	equ	0xFF5
  1550                           postinc2	equ	0xFDE
  1551                           postdec2	equ	0xFDD
  1552                           fsr2h	equ	0xFDA
  1553                           fsr2l	equ	0xFD9
  1554                           status	equ	0xFD8
  1555                           
  1556 ;; *************** function ___ftmul *****************
  1557 ;; Defined at:
  1558 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/ftmul.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;  f1              3   18[COMRAM] float 
  1561 ;;  f2              3   21[COMRAM] float 
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;  f3_as_produc    3   28[COMRAM] unsigned um
  1564 ;;  sign            1   32[COMRAM] unsigned char 
  1565 ;;  cntr            1   31[COMRAM] unsigned char 
  1566 ;;  exp             1   27[COMRAM] unsigned char 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  3   18[COMRAM] float 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1576 ;;      Params:         6       0       0       0       0       0       0
  1577 ;;      Locals:         6       0       0       0       0       0       0
  1578 ;;      Temps:          3       0       0       0       0       0       0
  1579 ;;      Totals:        15       0       0       0       0       0       0
  1580 ;;Total ram usage:       15 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    1
  1583 ;; This function calls:
  1584 ;;		___ftpack
  1585 ;; This function is called by:
  1586 ;;		_log
  1587 ;;		_eval_poly
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text9
  1592  0008FE                     __ptext9:
  1593                           	opt stack 0
  1594  0008FE                     ___ftmul:
  1595                           	opt stack 24
  1596                           
  1597                           ;incstack = 0
  1598  0008FE  C015  F019         	movff	___ftmul@f1+2,??___ftmul
  1599  000902  6A1A               	clrf	(??___ftmul+1)& (0+255),c
  1600  000904  6A1B               	clrf	(??___ftmul+2)& (0+255),c
  1601  000906  3414               	rlcf	___ftmul@f1+1,w,c
  1602  000908  3619               	rlcf	??___ftmul& (0+255),f,c
  1603  00090A  E301               	bnc	u1461
  1604  00090C  801A               	bsf	(??___ftmul+1)& (0+255),0,c
  1605  00090E                     u1461:
  1606  00090E  5019               	movf	??___ftmul,w,c
  1607  000910  6E1C               	movwf	___ftmul@exp,c
  1608  000912  501C               	movf	___ftmul@exp,w,c
  1609  000914  A4D8               	btfss	status,2,c
  1610  000916  D007               	goto	l651
  1611  000918  0E00               	movlw	0
  1612  00091A  6E13               	movwf	?___ftmul,c
  1613  00091C  0E00               	movlw	0
  1614  00091E  6E14               	movwf	?___ftmul+1,c
  1615  000920  0E00               	movlw	0
  1616  000922  6E15               	movwf	?___ftmul+2,c
  1617  000924  0012               	return	
  1618  000926                     l651:
  1619  000926  C018  F019         	movff	___ftmul@f2+2,??___ftmul
  1620  00092A  6A1A               	clrf	(??___ftmul+1)& (0+255),c
  1621  00092C  6A1B               	clrf	(??___ftmul+2)& (0+255),c
  1622  00092E  3417               	rlcf	___ftmul@f2+1,w,c
  1623  000930  3619               	rlcf	??___ftmul& (0+255),f,c
  1624  000932  E301               	bnc	u1481
  1625  000934  801A               	bsf	(??___ftmul+1)& (0+255),0,c
  1626  000936                     u1481:
  1627  000936  5019               	movf	??___ftmul,w,c
  1628  000938  6E21               	movwf	___ftmul@sign,c
  1629  00093A  5021               	movf	___ftmul@sign,w,c
  1630  00093C  A4D8               	btfss	status,2,c
  1631  00093E  D007               	goto	l653
  1632  000940  0E00               	movlw	0
  1633  000942  6E13               	movwf	?___ftmul,c
  1634  000944  0E00               	movlw	0
  1635  000946  6E14               	movwf	?___ftmul+1,c
  1636  000948  0E00               	movlw	0
  1637  00094A  6E15               	movwf	?___ftmul+2,c
  1638  00094C  0012               	return	
  1639  00094E                     l653:
  1640  00094E  5021               	movf	___ftmul@sign,w,c
  1641  000950  0F7B               	addlw	123
  1642  000952  261C               	addwf	___ftmul@exp,f,c
  1643  000954  C015  F021         	movff	___ftmul@f1+2,___ftmul@sign
  1644  000958  5018               	movf	___ftmul@f2+2,w,c
  1645  00095A  1A21               	xorwf	___ftmul@sign,f,c
  1646  00095C  0E80               	movlw	128
  1647  00095E  1621               	andwf	___ftmul@sign,f,c
  1648  000960  8E14               	bsf	___ftmul@f1+1,7,c
  1649  000962  8E17               	bsf	___ftmul@f2+1,7,c
  1650  000964  0EFF               	movlw	255
  1651  000966  1616               	andwf	___ftmul@f2,f,c
  1652  000968  0EFF               	movlw	255
  1653  00096A  1617               	andwf	___ftmul@f2+1,f,c
  1654  00096C  0E00               	movlw	0
  1655  00096E  1618               	andwf	___ftmul@f2+2,f,c
  1656  000970  0E00               	movlw	0
  1657  000972  6E1D               	movwf	___ftmul@f3_as_product,c
  1658  000974  0E00               	movlw	0
  1659  000976  6E1E               	movwf	___ftmul@f3_as_product+1,c
  1660  000978  0E00               	movlw	0
  1661  00097A  6E1F               	movwf	___ftmul@f3_as_product+2,c
  1662  00097C  0E07               	movlw	7
  1663  00097E  6E20               	movwf	___ftmul@cntr,c
  1664  000980  A013               	btfss	___ftmul@f1,0,c
  1665  000982  D006               	goto	l655
  1666  000984  5016               	movf	___ftmul@f2,w,c
  1667  000986  261D               	addwf	___ftmul@f3_as_product,f,c
  1668  000988  5017               	movf	___ftmul@f2+1,w,c
  1669  00098A  221E               	addwfc	___ftmul@f3_as_product+1,f,c
  1670  00098C  5018               	movf	___ftmul@f2+2,w,c
  1671  00098E  221F               	addwfc	___ftmul@f3_as_product+2,f,c
  1672  000990                     l655:
  1673  000990  90D8               	bcf	status,0,c
  1674  000992  3215               	rrcf	___ftmul@f1+2,f,c
  1675  000994  3214               	rrcf	___ftmul@f1+1,f,c
  1676  000996  3213               	rrcf	___ftmul@f1,f,c
  1677  000998  90D8               	bcf	status,0,c
  1678  00099A  3616               	rlcf	___ftmul@f2,f,c
  1679  00099C  3617               	rlcf	___ftmul@f2+1,f,c
  1680  00099E  3618               	rlcf	___ftmul@f2+2,f,c
  1681  0009A0  2E20               	decfsz	___ftmul@cntr,f,c
  1682  0009A2  D7EE               	goto	l654
  1683  0009A4  0E09               	movlw	9
  1684  0009A6  6E20               	movwf	___ftmul@cntr,c
  1685  0009A8  A013               	btfss	___ftmul@f1,0,c
  1686  0009AA  D006               	goto	l658
  1687  0009AC  5016               	movf	___ftmul@f2,w,c
  1688  0009AE  261D               	addwf	___ftmul@f3_as_product,f,c
  1689  0009B0  5017               	movf	___ftmul@f2+1,w,c
  1690  0009B2  221E               	addwfc	___ftmul@f3_as_product+1,f,c
  1691  0009B4  5018               	movf	___ftmul@f2+2,w,c
  1692  0009B6  221F               	addwfc	___ftmul@f3_as_product+2,f,c
  1693  0009B8                     l658:
  1694  0009B8  90D8               	bcf	status,0,c
  1695  0009BA  3215               	rrcf	___ftmul@f1+2,f,c
  1696  0009BC  3214               	rrcf	___ftmul@f1+1,f,c
  1697  0009BE  3213               	rrcf	___ftmul@f1,f,c
  1698  0009C0  90D8               	bcf	status,0,c
  1699  0009C2  321F               	rrcf	___ftmul@f3_as_product+2,f,c
  1700  0009C4  321E               	rrcf	___ftmul@f3_as_product+1,f,c
  1701  0009C6  321D               	rrcf	___ftmul@f3_as_product,f,c
  1702  0009C8  2E20               	decfsz	___ftmul@cntr,f,c
  1703  0009CA  D7EE               	goto	l657
  1704  0009CC  C01D  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  1705  0009D0  C01E  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  1706  0009D4  C01F  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  1707  0009D8  C01C  F004         	movff	___ftmul@exp,___ftpack@exp
  1708  0009DC  C021  F005         	movff	___ftmul@sign,___ftpack@sign
  1709  0009E0  EC9F  F006         	call	___ftpack	;wreg free
  1710  0009E4  C001  F013         	movff	?___ftpack,?___ftmul
  1711  0009E8  C002  F014         	movff	?___ftpack+1,?___ftmul+1
  1712  0009EC  C003  F015         	movff	?___ftpack+2,?___ftmul+2
  1713  0009F0  0012               	return	
  1714  0009F2                     __end_of___ftmul:
  1715                           	opt stack 0
  1716                           tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           postinc2	equ	0xFDE
  1721                           postdec2	equ	0xFDD
  1722                           fsr2h	equ	0xFDA
  1723                           fsr2l	equ	0xFD9
  1724                           status	equ	0xFD8
  1725                           
  1726 ;; *************** function ___ftadd *****************
  1727 ;; Defined at:
  1728 ;;		line 86 in file "/opt/microchip/xc8/v1.44/sources/common/ftadd.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  f1              3   33[COMRAM] float 
  1731 ;;  f2              3   36[COMRAM] float 
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  exp1            1   44[COMRAM] unsigned char 
  1734 ;;  exp2            1   43[COMRAM] unsigned char 
  1735 ;;  sign            1   42[COMRAM] unsigned char 
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  3   33[COMRAM] float 
  1738 ;; Registers used:
  1739 ;;		wreg, status,2, status,0, cstack
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1745 ;;      Params:         6       0       0       0       0       0       0
  1746 ;;      Locals:         3       0       0       0       0       0       0
  1747 ;;      Temps:          3       0       0       0       0       0       0
  1748 ;;      Totals:        12       0       0       0       0       0       0
  1749 ;;Total ram usage:       12 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    1
  1752 ;; This function calls:
  1753 ;;		___ftpack
  1754 ;; This function is called by:
  1755 ;;		_log
  1756 ;;		_eval_poly
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text10
  1761  000634                     __ptext10:
  1762                           	opt stack 0
  1763  000634                     ___ftadd:
  1764                           	opt stack 24
  1765                           
  1766                           ;incstack = 0
  1767  000634  C024  F028         	movff	___ftadd@f1+2,??___ftadd
  1768  000638  6A29               	clrf	(??___ftadd+1)& (0+255),c
  1769  00063A  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  1770  00063C  3423               	rlcf	___ftadd@f1+1,w,c
  1771  00063E  3628               	rlcf	??___ftadd& (0+255),f,c
  1772  000640  E301               	bnc	u1251
  1773  000642  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  1774  000644                     u1251:
  1775  000644  5028               	movf	??___ftadd,w,c
  1776  000646  6E2D               	movwf	___ftadd@exp1,c
  1777  000648  C027  F028         	movff	___ftadd@f2+2,??___ftadd
  1778  00064C  6A29               	clrf	(??___ftadd+1)& (0+255),c
  1779  00064E  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  1780  000650  3426               	rlcf	___ftadd@f2+1,w,c
  1781  000652  3628               	rlcf	??___ftadd& (0+255),f,c
  1782  000654  E301               	bnc	u1261
  1783  000656  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  1784  000658                     u1261:
  1785  000658  5028               	movf	??___ftadd,w,c
  1786  00065A  6E2C               	movwf	___ftadd@exp2,c
  1787  00065C  502D               	movf	___ftadd@exp1,w,c
  1788  00065E  B4D8               	btfsc	status,2,c
  1789  000660  D00B               	goto	u1290
  1790  000662  502C               	movf	___ftadd@exp2,w,c
  1791  000664  5C2D               	subwf	___ftadd@exp1,w,c
  1792  000666  B0D8               	btfsc	status,0,c
  1793  000668  D00E               	goto	l603
  1794  00066A  502D               	movf	___ftadd@exp1,w,c
  1795  00066C  0800               	sublw	0
  1796  00066E  242C               	addwf	___ftadd@exp2,w,c
  1797  000670  6E28               	movwf	??___ftadd& (0+255),c
  1798  000672  0E18               	movlw	24
  1799  000674  6428               	cpfsgt	??___ftadd,c
  1800  000676  D007               	goto	l603
  1801  000678                     u1290:
  1802  000678  C025  F022         	movff	___ftadd@f2,?___ftadd
  1803  00067C  C026  F023         	movff	___ftadd@f2+1,?___ftadd+1
  1804  000680  C027  F024         	movff	___ftadd@f2+2,?___ftadd+2
  1805  000684  0012               	return	
  1806  000686                     l603:
  1807  000686  502C               	movf	___ftadd@exp2,w,c
  1808  000688  B4D8               	btfsc	status,2,c
  1809  00068A  D00B               	goto	u1320
  1810  00068C  502D               	movf	___ftadd@exp1,w,c
  1811  00068E  5C2C               	subwf	___ftadd@exp2,w,c
  1812  000690  B0D8               	btfsc	status,0,c
  1813  000692  D00E               	goto	l607
  1814  000694  502C               	movf	___ftadd@exp2,w,c
  1815  000696  0800               	sublw	0
  1816  000698  242D               	addwf	___ftadd@exp1,w,c
  1817  00069A  6E28               	movwf	??___ftadd& (0+255),c
  1818  00069C  0E18               	movlw	24
  1819  00069E  6428               	cpfsgt	??___ftadd,c
  1820  0006A0  D007               	goto	l607
  1821  0006A2                     u1320:
  1822  0006A2  C022  F022         	movff	___ftadd@f1,?___ftadd
  1823  0006A6  C023  F023         	movff	___ftadd@f1+1,?___ftadd+1
  1824  0006AA  C024  F024         	movff	___ftadd@f1+2,?___ftadd+2
  1825  0006AE  0012               	return	
  1826  0006B0                     l607:
  1827  0006B0  0E06               	movlw	6
  1828  0006B2  6E2B               	movwf	___ftadd@sign,c
  1829  0006B4  BE24               	btfsc	___ftadd@f1+2,7,c
  1830  0006B6  8E2B               	bsf	___ftadd@sign,7,c
  1831  0006B8  BE27               	btfsc	___ftadd@f2+2,7,c
  1832  0006BA  8C2B               	bsf	___ftadd@sign,6,c
  1833  0006BC  8E23               	bsf	___ftadd@f1+1,7,c
  1834  0006BE  0EFF               	movlw	255
  1835  0006C0  1622               	andwf	___ftadd@f1,f,c
  1836  0006C2  0EFF               	movlw	255
  1837  0006C4  1623               	andwf	___ftadd@f1+1,f,c
  1838  0006C6  0E00               	movlw	0
  1839  0006C8  1624               	andwf	___ftadd@f1+2,f,c
  1840  0006CA  8E26               	bsf	___ftadd@f2+1,7,c
  1841  0006CC  0EFF               	movlw	255
  1842  0006CE  1625               	andwf	___ftadd@f2,f,c
  1843  0006D0  0EFF               	movlw	255
  1844  0006D2  1626               	andwf	___ftadd@f2+1,f,c
  1845  0006D4  0E00               	movlw	0
  1846  0006D6  1627               	andwf	___ftadd@f2+2,f,c
  1847  0006D8  502C               	movf	___ftadd@exp2,w,c
  1848  0006DA  5C2D               	subwf	___ftadd@exp1,w,c
  1849  0006DC  B0D8               	btfsc	status,0,c
  1850  0006DE  D01B               	goto	l612
  1851  0006E0                     u1350:
  1852  0006E0  90D8               	bcf	status,0,c
  1853  0006E2  3625               	rlcf	___ftadd@f2,f,c
  1854  0006E4  3626               	rlcf	___ftadd@f2+1,f,c
  1855  0006E6  3627               	rlcf	___ftadd@f2+2,f,c
  1856  0006E8  062C               	decf	___ftadd@exp2,f,c
  1857  0006EA  502D               	movf	___ftadd@exp1,w,c
  1858  0006EC  182C               	xorwf	___ftadd@exp2,w,c
  1859  0006EE  B4D8               	btfsc	status,2,c
  1860  0006F0  D00D               	goto	l617
  1861  0006F2  062B               	decf	___ftadd@sign,f,c
  1862  0006F4  C02B  F028         	movff	___ftadd@sign,??___ftadd
  1863  0006F8  0E07               	movlw	7
  1864  0006FA  1628               	andwf	??___ftadd,f,c
  1865  0006FC  B4D8               	btfsc	status,2,c
  1866  0006FE  D006               	goto	l617
  1867  000700  D7EF               	goto	u1350
  1868  000702  90D8               	bcf	status,0,c
  1869  000704  3224               	rrcf	___ftadd@f1+2,f,c
  1870  000706  3223               	rrcf	___ftadd@f1+1,f,c
  1871  000708  3222               	rrcf	___ftadd@f1,f,c
  1872  00070A  2A2D               	incf	___ftadd@exp1,f,c
  1873  00070C                     l617:
  1874  00070C  502C               	movf	___ftadd@exp2,w,c
  1875  00070E  182D               	xorwf	___ftadd@exp1,w,c
  1876  000710  B4D8               	btfsc	status,2,c
  1877  000712  D01F               	goto	u1420
  1878  000714  D7F6               	goto	l618
  1879  000716                     l612:
  1880  000716  502D               	movf	___ftadd@exp1,w,c
  1881  000718  5C2C               	subwf	___ftadd@exp2,w,c
  1882  00071A  B0D8               	btfsc	status,0,c
  1883  00071C  D01A               	goto	u1420
  1884  00071E                     u1390:
  1885  00071E  90D8               	bcf	status,0,c
  1886  000720  3622               	rlcf	___ftadd@f1,f,c
  1887  000722  3623               	rlcf	___ftadd@f1+1,f,c
  1888  000724  3624               	rlcf	___ftadd@f1+2,f,c
  1889  000726  062D               	decf	___ftadd@exp1,f,c
  1890  000728  502D               	movf	___ftadd@exp1,w,c
  1891  00072A  182C               	xorwf	___ftadd@exp2,w,c
  1892  00072C  B4D8               	btfsc	status,2,c
  1893  00072E  D00D               	goto	l626
  1894  000730  062B               	decf	___ftadd@sign,f,c
  1895  000732  C02B  F028         	movff	___ftadd@sign,??___ftadd
  1896  000736  0E07               	movlw	7
  1897  000738  1628               	andwf	??___ftadd,f,c
  1898  00073A  B4D8               	btfsc	status,2,c
  1899  00073C  D006               	goto	l626
  1900  00073E  D7EF               	goto	u1390
  1901  000740  90D8               	bcf	status,0,c
  1902  000742  3227               	rrcf	___ftadd@f2+2,f,c
  1903  000744  3226               	rrcf	___ftadd@f2+1,f,c
  1904  000746  3225               	rrcf	___ftadd@f2,f,c
  1905  000748  2A2C               	incf	___ftadd@exp2,f,c
  1906  00074A                     l626:
  1907  00074A  502C               	movf	___ftadd@exp2,w,c
  1908  00074C  182D               	xorwf	___ftadd@exp1,w,c
  1909  00074E  A4D8               	btfss	status,2,c
  1910  000750  D7F7               	goto	l627
  1911  000752                     u1420:
  1912  000752  AE2B               	btfss	___ftadd@sign,7,c
  1913  000754  D00C               	goto	l629
  1914  000756  0EFF               	movlw	255
  1915  000758  1A22               	xorwf	___ftadd@f1,f,c
  1916  00075A  0EFF               	movlw	255
  1917  00075C  1A23               	xorwf	___ftadd@f1+1,f,c
  1918  00075E  0EFF               	movlw	255
  1919  000760  1A24               	xorwf	___ftadd@f1+2,f,c
  1920  000762  0E01               	movlw	1
  1921  000764  2622               	addwf	___ftadd@f1,f,c
  1922  000766  0E00               	movlw	0
  1923  000768  2223               	addwfc	___ftadd@f1+1,f,c
  1924  00076A  0E00               	movlw	0
  1925  00076C  2224               	addwfc	___ftadd@f1+2,f,c
  1926  00076E                     l629:
  1927  00076E  AC2B               	btfss	___ftadd@sign,6,c
  1928  000770  D00C               	goto	l630
  1929  000772  0EFF               	movlw	255
  1930  000774  1A25               	xorwf	___ftadd@f2,f,c
  1931  000776  0EFF               	movlw	255
  1932  000778  1A26               	xorwf	___ftadd@f2+1,f,c
  1933  00077A  0EFF               	movlw	255
  1934  00077C  1A27               	xorwf	___ftadd@f2+2,f,c
  1935  00077E  0E01               	movlw	1
  1936  000780  2625               	addwf	___ftadd@f2,f,c
  1937  000782  0E00               	movlw	0
  1938  000784  2226               	addwfc	___ftadd@f2+1,f,c
  1939  000786  0E00               	movlw	0
  1940  000788  2227               	addwfc	___ftadd@f2+2,f,c
  1941  00078A                     l630:
  1942  00078A  0E00               	movlw	0
  1943  00078C  6E2B               	movwf	___ftadd@sign,c
  1944  00078E  5022               	movf	___ftadd@f1,w,c
  1945  000790  2625               	addwf	___ftadd@f2,f,c
  1946  000792  5023               	movf	___ftadd@f1+1,w,c
  1947  000794  2226               	addwfc	___ftadd@f2+1,f,c
  1948  000796  5024               	movf	___ftadd@f1+2,w,c
  1949  000798  2227               	addwfc	___ftadd@f2+2,f,c
  1950  00079A  AE27               	btfss	___ftadd@f2+2,7,c
  1951  00079C  D00E               	goto	l631
  1952  00079E  0EFF               	movlw	255
  1953  0007A0  1A25               	xorwf	___ftadd@f2,f,c
  1954  0007A2  0EFF               	movlw	255
  1955  0007A4  1A26               	xorwf	___ftadd@f2+1,f,c
  1956  0007A6  0EFF               	movlw	255
  1957  0007A8  1A27               	xorwf	___ftadd@f2+2,f,c
  1958  0007AA  0E01               	movlw	1
  1959  0007AC  2625               	addwf	___ftadd@f2,f,c
  1960  0007AE  0E00               	movlw	0
  1961  0007B0  2226               	addwfc	___ftadd@f2+1,f,c
  1962  0007B2  0E00               	movlw	0
  1963  0007B4  2227               	addwfc	___ftadd@f2+2,f,c
  1964  0007B6  0E01               	movlw	1
  1965  0007B8  6E2B               	movwf	___ftadd@sign,c
  1966  0007BA                     l631:
  1967  0007BA  C025  F001         	movff	___ftadd@f2,___ftpack@arg
  1968  0007BE  C026  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  1969  0007C2  C027  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  1970  0007C6  C02D  F004         	movff	___ftadd@exp1,___ftpack@exp
  1971  0007CA  C02B  F005         	movff	___ftadd@sign,___ftpack@sign
  1972  0007CE  EC9F  F006         	call	___ftpack	;wreg free
  1973  0007D2  C001  F022         	movff	?___ftpack,?___ftadd
  1974  0007D6  C002  F023         	movff	?___ftpack+1,?___ftadd+1
  1975  0007DA  C003  F024         	movff	?___ftpack+2,?___ftadd+2
  1976  0007DE  0012               	return	
  1977  0007E0                     __end_of___ftadd:
  1978                           	opt stack 0
  1979                           tblptru	equ	0xFF8
  1980                           tblptrh	equ	0xFF7
  1981                           tblptrl	equ	0xFF6
  1982                           tablat	equ	0xFF5
  1983                           postinc2	equ	0xFDE
  1984                           postdec2	equ	0xFDD
  1985                           fsr2h	equ	0xFDA
  1986                           fsr2l	equ	0xFD9
  1987                           status	equ	0xFD8
  1988                           
  1989 ;; *************** function ___awtoft *****************
  1990 ;; Defined at:
  1991 ;;		line 32 in file "/opt/microchip/xc8/v1.44/sources/common/awtoft.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  c               2   14[COMRAM] int 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  sign            1   17[COMRAM] unsigned char 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  3   14[COMRAM] float 
  1998 ;; Registers used:
  1999 ;;		wreg, status,2, status,0, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2005 ;;      Params:         3       0       0       0       0       0       0
  2006 ;;      Locals:         1       0       0       0       0       0       0
  2007 ;;      Temps:          0       0       0       0       0       0       0
  2008 ;;      Totals:         4       0       0       0       0       0       0
  2009 ;;Total ram usage:        4 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    1
  2012 ;; This function calls:
  2013 ;;		___ftpack
  2014 ;; This function is called by:
  2015 ;;		_get_temp
  2016 ;;		_log
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text11
  2021  00116E                     __ptext11:
  2022                           	opt stack 0
  2023  00116E                     ___awtoft:
  2024                           	opt stack 25
  2025                           
  2026                           ;incstack = 0
  2027  00116E  0E00               	movlw	0
  2028  001170  6E12               	movwf	___awtoft@sign,c
  2029  001172  AE10               	btfss	___awtoft@c+1,7,c
  2030  001174  D006               	goto	l553
  2031  001176  6C0F               	negf	___awtoft@c,c
  2032  001178  1E10               	comf	___awtoft@c+1,f,c
  2033  00117A  B0D8               	btfsc	status,0,c
  2034  00117C  2A10               	incf	___awtoft@c+1,f,c
  2035  00117E  0E01               	movlw	1
  2036  001180  6E12               	movwf	___awtoft@sign,c
  2037  001182                     l553:
  2038  001182  C00F  F001         	movff	___awtoft@c,___ftpack@arg
  2039  001186  C010  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2040  00118A  6A03               	clrf	___ftpack@arg+2,c
  2041  00118C  0E8E               	movlw	142
  2042  00118E  6E04               	movwf	___ftpack@exp,c
  2043  001190  C012  F005         	movff	___awtoft@sign,___ftpack@sign
  2044  001194  EC9F  F006         	call	___ftpack	;wreg free
  2045  001198  C001  F00F         	movff	?___ftpack,?___awtoft
  2046  00119C  C002  F010         	movff	?___ftpack+1,?___awtoft+1
  2047  0011A0  C003  F011         	movff	?___ftpack+2,?___awtoft+2
  2048  0011A4  0012               	return	
  2049  0011A6                     __end_of___awtoft:
  2050                           	opt stack 0
  2051                           tblptru	equ	0xFF8
  2052                           tblptrh	equ	0xFF7
  2053                           tblptrl	equ	0xFF6
  2054                           tablat	equ	0xFF5
  2055                           postinc2	equ	0xFDE
  2056                           postdec2	equ	0xFDD
  2057                           fsr2h	equ	0xFDA
  2058                           fsr2l	equ	0xFD9
  2059                           status	equ	0xFD8
  2060                           
  2061 ;; *************** function ___ftpack *****************
  2062 ;; Defined at:
  2063 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/float.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;  arg             3    0[COMRAM] unsigned um
  2066 ;;  exp             1    3[COMRAM] unsigned char 
  2067 ;;  sign            1    4[COMRAM] unsigned char 
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  3    0[COMRAM] float 
  2072 ;; Registers used:
  2073 ;;		wreg, status,2, status,0
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2079 ;;      Params:         5       0       0       0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0       0       0
  2081 ;;      Temps:          3       0       0       0       0       0       0
  2082 ;;      Totals:         8       0       0       0       0       0       0
  2083 ;;Total ram usage:        8 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		___awtoft
  2089 ;;		___ftadd
  2090 ;;		___ftmul
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           	psect	text12
  2095  000D3E                     __ptext12:
  2096                           	opt stack 0
  2097  000D3E                     ___ftpack:
  2098                           	opt stack 24
  2099                           
  2100                           ;incstack = 0
  2101  000D3E  5004               	movf	___ftpack@exp,w,c
  2102  000D40  B4D8               	btfsc	status,2,c
  2103  000D42  D005               	goto	u1180
  2104  000D44  5001               	movf	___ftpack@arg,w,c
  2105  000D46  1002               	iorwf	___ftpack@arg+1,w,c
  2106  000D48  1003               	iorwf	___ftpack@arg+2,w,c
  2107  000D4A  A4D8               	btfss	status,2,c
  2108  000D4C  D00C               	goto	l572
  2109  000D4E                     u1180:
  2110  000D4E  0E00               	movlw	0
  2111  000D50  6E01               	movwf	?___ftpack,c
  2112  000D52  0E00               	movlw	0
  2113  000D54  6E02               	movwf	?___ftpack+1,c
  2114  000D56  0E00               	movlw	0
  2115  000D58  6E03               	movwf	?___ftpack+2,c
  2116  000D5A  0012               	return	
  2117  000D5C  2A04               	incf	___ftpack@exp,f,c
  2118  000D5E  90D8               	bcf	status,0,c
  2119  000D60  3203               	rrcf	___ftpack@arg+2,f,c
  2120  000D62  3202               	rrcf	___ftpack@arg+1,f,c
  2121  000D64  3201               	rrcf	___ftpack@arg,f,c
  2122  000D66                     l572:
  2123  000D66  0E00               	movlw	0
  2124  000D68  1401               	andwf	___ftpack@arg,w,c
  2125  000D6A  6E06               	movwf	??___ftpack& (0+255),c
  2126  000D6C  0E00               	movlw	0
  2127  000D6E  1402               	andwf	___ftpack@arg+1,w,c
  2128  000D70  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2129  000D72  0EFE               	movlw	254
  2130  000D74  1403               	andwf	___ftpack@arg+2,w,c
  2131  000D76  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2132  000D78  5006               	movf	??___ftpack,w,c
  2133  000D7A  1007               	iorwf	??___ftpack+1,w,c
  2134  000D7C  1008               	iorwf	??___ftpack+2,w,c
  2135  000D7E  B4D8               	btfsc	status,2,c
  2136  000D80  D00C               	goto	l575
  2137  000D82  D7EC               	goto	l573
  2138  000D84  2A04               	incf	___ftpack@exp,f,c
  2139  000D86  0E01               	movlw	1
  2140  000D88  2601               	addwf	___ftpack@arg,f,c
  2141  000D8A  0E00               	movlw	0
  2142  000D8C  2202               	addwfc	___ftpack@arg+1,f,c
  2143  000D8E  0E00               	movlw	0
  2144  000D90  2203               	addwfc	___ftpack@arg+2,f,c
  2145  000D92  90D8               	bcf	status,0,c
  2146  000D94  3203               	rrcf	___ftpack@arg+2,f,c
  2147  000D96  3202               	rrcf	___ftpack@arg+1,f,c
  2148  000D98  3201               	rrcf	___ftpack@arg,f,c
  2149  000D9A                     l575:
  2150  000D9A  0E00               	movlw	0
  2151  000D9C  1401               	andwf	___ftpack@arg,w,c
  2152  000D9E  6E06               	movwf	??___ftpack& (0+255),c
  2153  000DA0  0E00               	movlw	0
  2154  000DA2  1402               	andwf	___ftpack@arg+1,w,c
  2155  000DA4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2156  000DA6  0EFF               	movlw	255
  2157  000DA8  1403               	andwf	___ftpack@arg+2,w,c
  2158  000DAA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2159  000DAC  5006               	movf	??___ftpack,w,c
  2160  000DAE  1007               	iorwf	??___ftpack+1,w,c
  2161  000DB0  1008               	iorwf	??___ftpack+2,w,c
  2162  000DB2  B4D8               	btfsc	status,2,c
  2163  000DB4  D006               	goto	l578
  2164  000DB6  D7E6               	goto	l576
  2165  000DB8  0604               	decf	___ftpack@exp,f,c
  2166  000DBA  90D8               	bcf	status,0,c
  2167  000DBC  3601               	rlcf	___ftpack@arg,f,c
  2168  000DBE  3602               	rlcf	___ftpack@arg+1,f,c
  2169  000DC0  3603               	rlcf	___ftpack@arg+2,f,c
  2170  000DC2                     l578:
  2171  000DC2  BE02               	btfsc	___ftpack@arg+1,7,c
  2172  000DC4  D003               	goto	u1220
  2173  000DC6  0E02               	movlw	2
  2174  000DC8  6004               	cpfslt	___ftpack@exp,c
  2175  000DCA  D7F6               	goto	l579
  2176  000DCC                     u1220:
  2177  000DCC  A004               	btfss	___ftpack@exp,0,c
  2178  000DCE  9E02               	bcf	___ftpack@arg+1,7,c
  2179  000DD0  90D8               	bcf	status,0,c
  2180  000DD2  3204               	rrcf	___ftpack@exp,f,c
  2181  000DD4  5004               	movf	___ftpack@exp,w,c
  2182  000DD6  1203               	iorwf	___ftpack@arg+2,f,c
  2183  000DD8  5005               	movf	___ftpack@sign,w,c
  2184  000DDA  A4D8               	btfss	status,2,c
  2185  000DDC  8E03               	bsf	___ftpack@arg+2,7,c
  2186  000DDE  C001  F001         	movff	___ftpack@arg,?___ftpack
  2187  000DE2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  2188  000DE6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  2189  000DEA  0012               	return	
  2190  000DEC                     __end_of___ftpack:
  2191                           	opt stack 0
  2192                           tblptru	equ	0xFF8
  2193                           tblptrh	equ	0xFF7
  2194                           tblptrl	equ	0xFF6
  2195                           tablat	equ	0xFF5
  2196                           postinc2	equ	0xFDE
  2197                           postdec2	equ	0xFDD
  2198                           fsr2h	equ	0xFDA
  2199                           fsr2l	equ	0xFD9
  2200                           status	equ	0xFD8
  2201                           
  2202 ;; *************** function ___fttol *****************
  2203 ;; Defined at:
  2204 ;;		line 44 in file "/opt/microchip/xc8/v1.44/sources/common/fttol.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  f1              3   62[COMRAM] float 
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;  lval            4   72[COMRAM] unsigned long 
  2209 ;;  exp1            1   76[COMRAM] unsigned char 
  2210 ;;  sign1           1   71[COMRAM] unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  4   62[COMRAM] long 
  2213 ;; Registers used:
  2214 ;;		wreg, status,2, status,0
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2220 ;;      Params:         4       0       0       0       0       0       0
  2221 ;;      Locals:         6       0       0       0       0       0       0
  2222 ;;      Temps:          5       0       0       0       0       0       0
  2223 ;;      Totals:        15       0       0       0       0       0       0
  2224 ;;Total ram usage:       15 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; This function calls:
  2227 ;;		Nothing
  2228 ;; This function is called by:
  2229 ;;		_get_temp
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text13
  2234  0009F2                     __ptext13:
  2235                           	opt stack 0
  2236  0009F2                     ___fttol:
  2237                           	opt stack 27
  2238                           
  2239                           ;incstack = 0
  2240  0009F2  C041  F043         	movff	___fttol@f1+2,??___fttol
  2241  0009F6  6A44               	clrf	(??___fttol+1)& (0+255),c
  2242  0009F8  6A45               	clrf	(??___fttol+2)& (0+255),c
  2243  0009FA  3440               	rlcf	___fttol@f1+1,w,c
  2244  0009FC  3643               	rlcf	??___fttol& (0+255),f,c
  2245  0009FE  E301               	bnc	u1711
  2246  000A00  8044               	bsf	(??___fttol+1)& (0+255),0,c
  2247  000A02                     u1711:
  2248  000A02  5043               	movf	??___fttol,w,c
  2249  000A04  6E4D               	movwf	___fttol@exp1,c
  2250  000A06  504D               	movf	___fttol@exp1,w,c
  2251  000A08  A4D8               	btfss	status,2,c
  2252  000A0A  D009               	goto	l672
  2253  000A0C  0E00               	movlw	0
  2254  000A0E  6E3F               	movwf	?___fttol,c
  2255  000A10  0E00               	movlw	0
  2256  000A12  6E40               	movwf	?___fttol+1,c
  2257  000A14  0E00               	movlw	0
  2258  000A16  6E41               	movwf	?___fttol+2,c
  2259  000A18  0E00               	movlw	0
  2260  000A1A  6E42               	movwf	?___fttol+3,c
  2261  000A1C  0012               	return	
  2262  000A1E                     l672:
  2263  000A1E  0E17               	movlw	23
  2264  000A20  6E43               	movwf	??___fttol& (0+255),c
  2265  000A22  C03F  F044         	movff	___fttol@f1,??___fttol+1
  2266  000A26  C040  F045         	movff	___fttol@f1+1,??___fttol+2
  2267  000A2A  C041  F046         	movff	___fttol@f1+2,??___fttol+3
  2268  000A2E  2843               	incf	??___fttol,w,c
  2269  000A30  6E47               	movwf	(??___fttol+4)& (0+255),c
  2270  000A32  D004               	goto	u1730
  2271  000A34                     u1735:
  2272  000A34  90D8               	bcf	status,0,c
  2273  000A36  3246               	rrcf	??___fttol+3,f,c
  2274  000A38  3245               	rrcf	??___fttol+2,f,c
  2275  000A3A  3244               	rrcf	??___fttol+1,f,c
  2276  000A3C                     u1730:
  2277  000A3C  2E47               	decfsz	(??___fttol+4)& (0+255),f,c
  2278  000A3E  D7FA               	goto	u1735
  2279  000A40  5044               	movf	??___fttol+1,w,c
  2280  000A42  6E48               	movwf	___fttol@sign1,c
  2281  000A44  8E40               	bsf	___fttol@f1+1,7,c
  2282  000A46  0EFF               	movlw	255
  2283  000A48  163F               	andwf	___fttol@f1,f,c
  2284  000A4A  0EFF               	movlw	255
  2285  000A4C  1640               	andwf	___fttol@f1+1,f,c
  2286  000A4E  0E00               	movlw	0
  2287  000A50  1641               	andwf	___fttol@f1+2,f,c
  2288  000A52  503F               	movf	___fttol@f1,w,c
  2289  000A54  6E49               	movwf	___fttol@lval,c
  2290  000A56  5040               	movf	___fttol@f1+1,w,c
  2291  000A58  6E4A               	movwf	___fttol@lval+1,c
  2292  000A5A  5041               	movf	___fttol@f1+2,w,c
  2293  000A5C  6E4B               	movwf	___fttol@lval+2,c
  2294  000A5E  6A4C               	clrf	___fttol@lval+3,c
  2295  000A60  0E8E               	movlw	142
  2296  000A62  5E4D               	subwf	___fttol@exp1,f,c
  2297  000A64  AE4D               	btfss	___fttol@exp1,7,c
  2298  000A66  D016               	goto	l674
  2299  000A68  504D               	movf	___fttol@exp1,w,c
  2300  000A6A  0A80               	xorlw	128
  2301  000A6C  0F8F               	addlw	143
  2302  000A6E  B0D8               	btfsc	status,0,c
  2303  000A70  D009               	goto	l675
  2304  000A72  0E00               	movlw	0
  2305  000A74  6E3F               	movwf	?___fttol,c
  2306  000A76  0E00               	movlw	0
  2307  000A78  6E40               	movwf	?___fttol+1,c
  2308  000A7A  0E00               	movlw	0
  2309  000A7C  6E41               	movwf	?___fttol+2,c
  2310  000A7E  0E00               	movlw	0
  2311  000A80  6E42               	movwf	?___fttol+3,c
  2312  000A82  0012               	return	
  2313  000A84                     l675:
  2314  000A84  90D8               	bcf	status,0,c
  2315  000A86  324C               	rrcf	___fttol@lval+3,f,c
  2316  000A88  324B               	rrcf	___fttol@lval+2,f,c
  2317  000A8A  324A               	rrcf	___fttol@lval+1,f,c
  2318  000A8C  3249               	rrcf	___fttol@lval,f,c
  2319  000A8E  3E4D               	incfsz	___fttol@exp1,f,c
  2320  000A90  D7F9               	goto	l675
  2321  000A92  D015               	goto	u1770
  2322  000A94                     l674:
  2323  000A94  0E17               	movlw	23
  2324  000A96  644D               	cpfsgt	___fttol@exp1,c
  2325  000A98  D00F               	goto	l680
  2326  000A9A  0E00               	movlw	0
  2327  000A9C  6E3F               	movwf	?___fttol,c
  2328  000A9E  0E00               	movlw	0
  2329  000AA0  6E40               	movwf	?___fttol+1,c
  2330  000AA2  0E00               	movlw	0
  2331  000AA4  6E41               	movwf	?___fttol+2,c
  2332  000AA6  0E00               	movlw	0
  2333  000AA8  6E42               	movwf	?___fttol+3,c
  2334  000AAA  0012               	return	
  2335  000AAC  90D8               	bcf	status,0,c
  2336  000AAE  3649               	rlcf	___fttol@lval,f,c
  2337  000AB0  364A               	rlcf	___fttol@lval+1,f,c
  2338  000AB2  364B               	rlcf	___fttol@lval+2,f,c
  2339  000AB4  364C               	rlcf	___fttol@lval+3,f,c
  2340  000AB6  064D               	decf	___fttol@exp1,f,c
  2341  000AB8                     l680:
  2342  000AB8  504D               	movf	___fttol@exp1,w,c
  2343  000ABA  A4D8               	btfss	status,2,c
  2344  000ABC  D7F7               	goto	l681
  2345  000ABE                     u1770:
  2346  000ABE  5048               	movf	___fttol@sign1,w,c
  2347  000AC0  B4D8               	btfsc	status,2,c
  2348  000AC2  D008               	goto	l683
  2349  000AC4  1E4C               	comf	___fttol@lval+3,f,c
  2350  000AC6  1E4B               	comf	___fttol@lval+2,f,c
  2351  000AC8  1E4A               	comf	___fttol@lval+1,f,c
  2352  000ACA  6C49               	negf	___fttol@lval,c
  2353  000ACC  0E00               	movlw	0
  2354  000ACE  224A               	addwfc	___fttol@lval+1,f,c
  2355  000AD0  224B               	addwfc	___fttol@lval+2,f,c
  2356  000AD2  224C               	addwfc	___fttol@lval+3,f,c
  2357  000AD4                     l683:
  2358  000AD4  C049  F03F         	movff	___fttol@lval,?___fttol
  2359  000AD8  C04A  F040         	movff	___fttol@lval+1,?___fttol+1
  2360  000ADC  C04B  F041         	movff	___fttol@lval+2,?___fttol+2
  2361  000AE0  C04C  F042         	movff	___fttol@lval+3,?___fttol+3
  2362  000AE4  0012               	return	
  2363  000AE6                     __end_of___fttol:
  2364                           	opt stack 0
  2365                           tblptru	equ	0xFF8
  2366                           tblptrh	equ	0xFF7
  2367                           tblptrl	equ	0xFF6
  2368                           tablat	equ	0xFF5
  2369                           postinc2	equ	0xFDE
  2370                           postdec2	equ	0xFDD
  2371                           fsr2h	equ	0xFDA
  2372                           fsr2l	equ	0xFD9
  2373                           status	equ	0xFD8
  2374                           
  2375 ;; *************** function _display_speed *****************
  2376 ;; Defined at:
  2377 ;;		line 249 in file "hmi.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;		None
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;		None
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  1    wreg      void 
  2384 ;; Registers used:
  2385 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2391 ;;      Params:         0       0       0       0       0       0       0
  2392 ;;      Locals:         0       0       0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0       0       0
  2394 ;;      Totals:         0       0       0       0       0       0       0
  2395 ;;Total ram usage:        0 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; Hardware stack levels required when called:    5
  2398 ;; This function calls:
  2399 ;;		_integerToLcd
  2400 ;; This function is called by:
  2401 ;;		_hmi_out
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           	psect	text14
  2406  0012E0                     __ptext14:
  2407                           	opt stack 0
  2408  0012E0                     _display_speed:
  2409                           	opt stack 24
  2410                           
  2411                           ;hmi.c: 251: integerToLcd(speed);
  2412                           
  2413                           ;incstack = 0
  2414  0012E0  C05D  F015         	movff	_speed,integerToLcd@num
  2415  0012E4  C05E  F016         	movff	_speed+1,integerToLcd@num+1
  2416  0012E8  EC45  F006         	call	_integerToLcd	;wreg free
  2417  0012EC  0012               	return		;funcret
  2418  0012EE                     __end_of_display_speed:
  2419                           	opt stack 0
  2420                           tblptru	equ	0xFF8
  2421                           tblptrh	equ	0xFF7
  2422                           tblptrl	equ	0xFF6
  2423                           tablat	equ	0xFF5
  2424                           postinc2	equ	0xFDE
  2425                           postdec2	equ	0xFDD
  2426                           fsr2h	equ	0xFDA
  2427                           fsr2l	equ	0xFD9
  2428                           status	equ	0xFD8
  2429                           
  2430 ;; *************** function _display_mode *****************
  2431 ;; Defined at:
  2432 ;;		line 228 in file "hmi.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;		None
  2435 ;; Auto vars:     Size  Location     Type
  2436 ;;		None
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  1    wreg      void 
  2439 ;; Registers used:
  2440 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2446 ;;      Params:         0       0       0       0       0       0       0
  2447 ;;      Locals:         0       0       0       0       0       0       0
  2448 ;;      Temps:          0       0       0       0       0       0       0
  2449 ;;      Totals:         0       0       0       0       0       0       0
  2450 ;;Total ram usage:        0 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:    5
  2453 ;; This function calls:
  2454 ;;		_WriteLCD
  2455 ;; This function is called by:
  2456 ;;		_hmi_out
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text15
  2461  00123A                     __ptext15:
  2462                           	opt stack 0
  2463  00123A                     _display_mode:
  2464                           	opt stack 24
  2465                           
  2466                           ;hmi.c: 230: if(mode == 0)
  2467                           
  2468                           ;incstack = 0
  2469  00123A  0100               	movlb	0	; () banked
  2470  00123C  5162               	movf	_mode& (0+255),w,b
  2471  00123E  1163               	iorwf	(_mode+1)& (0+255),w,b
  2472  001240  A4D8               	btfss	status,2,c
  2473  001242  D007               	goto	l136
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;hmi.c: 231: WriteLCD("Auto");
  2477  001244  0E2D               	movlw	low STR_3
  2478  001246  6E07               	movwf	WriteLCD@message,c
  2479  001248  0E06               	movlw	high STR_3
  2480  00124A  6E08               	movwf	WriteLCD@message+1,c
  2481  00124C  EC02  F008         	call	_WriteLCD	;wreg free
  2482  001250  0012               	return	
  2483  001252                     l136:
  2484                           
  2485                           ;hmi.c: 232: else
  2486                           ;hmi.c: 233: WriteLCD("Manual");
  2487  001252  0E1C               	movlw	low STR_4
  2488  001254  6E07               	movwf	WriteLCD@message,c
  2489  001256  0E06               	movlw	high STR_4
  2490  001258  6E08               	movwf	WriteLCD@message+1,c
  2491  00125A  EC02  F008         	call	_WriteLCD	;wreg free
  2492  00125E  0012               	return	
  2493  001260                     __end_of_display_mode:
  2494                           	opt stack 0
  2495                           tblptru	equ	0xFF8
  2496                           tblptrh	equ	0xFF7
  2497                           tblptrl	equ	0xFF6
  2498                           tablat	equ	0xFF5
  2499                           postinc2	equ	0xFDE
  2500                           postdec2	equ	0xFDD
  2501                           fsr2h	equ	0xFDA
  2502                           fsr2l	equ	0xFD9
  2503                           status	equ	0xFD8
  2504                           
  2505 ;; *************** function _adcToLcd *****************
  2506 ;; Defined at:
  2507 ;;		line 179 in file "hmi.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;		None
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;  result          2   26[COMRAM] int 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  1    wreg      void 
  2514 ;; Registers used:
  2515 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2521 ;;      Params:         0       0       0       0       0       0       0
  2522 ;;      Locals:         2       0       0       0       0       0       0
  2523 ;;      Temps:          0       0       0       0       0       0       0
  2524 ;;      Totals:         2       0       0       0       0       0       0
  2525 ;;Total ram usage:        2 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:    5
  2528 ;; This function calls:
  2529 ;;		_WriteLCD
  2530 ;;		_adc_poll
  2531 ;;		_clear_lcd
  2532 ;;		_delay
  2533 ;;		_integerToLcd
  2534 ;; This function is called by:
  2535 ;;		_main
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           	psect	text16
  2540  0011A6                     __ptext16:
  2541                           	opt stack 0
  2542  0011A6                     _adcToLcd:
  2543                           	opt stack 25
  2544                           
  2545                           ;hmi.c: 181: clear_lcd();
  2546                           
  2547                           ;incstack = 0
  2548  0011A6  EC80  F009         	call	_clear_lcd	;wreg free
  2549                           
  2550                           ;hmi.c: 182: delay(5);
  2551  0011AA  0E00               	movlw	0
  2552  0011AC  6E02               	movwf	delay@x+1,c
  2553  0011AE  0E05               	movlw	5
  2554  0011B0  6E01               	movwf	delay@x,c
  2555  0011B2  ECEF  F008         	call	_delay	;wreg free
  2556                           
  2557                           ;hmi.c: 183: ADCON0 = 0b00001011;
  2558  0011B6  0E0B               	movlw	11
  2559  0011B8  6EC2               	movwf	4034,c	;volatile
  2560                           
  2561                           ;hmi.c: 184: adc_poll();
  2562  0011BA  EC84  F009         	call	_adc_poll	;wreg free
  2563                           
  2564                           ;hmi.c: 185: int result = ADRESH;
  2565  0011BE  CFC4 F01B          	movff	4036,adcToLcd@result	;volatile
  2566  0011C2  6A1C               	clrf	adcToLcd@result+1,c
  2567                           
  2568                           ;hmi.c: 186: WriteLCD("ADC:");
  2569  0011C4  0E23               	movlw	low STR_1
  2570  0011C6  6E07               	movwf	WriteLCD@message,c
  2571  0011C8  0E06               	movlw	high STR_1
  2572  0011CA  6E08               	movwf	WriteLCD@message+1,c
  2573  0011CC  EC02  F008         	call	_WriteLCD	;wreg free
  2574                           
  2575                           ;hmi.c: 187: integerToLcd(result);
  2576  0011D0  C01B  F015         	movff	adcToLcd@result,integerToLcd@num
  2577  0011D4  C01C  F016         	movff	adcToLcd@result+1,integerToLcd@num+1
  2578  0011D8  EC45  F006         	call	_integerToLcd	;wreg free
  2579  0011DC  0012               	return		;funcret
  2580  0011DE                     __end_of_adcToLcd:
  2581                           	opt stack 0
  2582                           tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           postinc2	equ	0xFDE
  2587                           postdec2	equ	0xFDD
  2588                           fsr2h	equ	0xFDA
  2589                           fsr2l	equ	0xFD9
  2590                           status	equ	0xFD8
  2591                           
  2592 ;; *************** function _integerToLcd *****************
  2593 ;; Defined at:
  2594 ;;		line 146 in file "lcd.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;  num             2   20[COMRAM] int 
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  ones            1   25[COMRAM] unsigned char 
  2599 ;;  tens            1   24[COMRAM] unsigned char 
  2600 ;;  hundreds        1   23[COMRAM] unsigned char 
  2601 ;;  thousands       1   22[COMRAM] unsigned char 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2611 ;;      Params:         2       0       0       0       0       0       0
  2612 ;;      Locals:         4       0       0       0       0       0       0
  2613 ;;      Temps:          0       0       0       0       0       0       0
  2614 ;;      Totals:         6       0       0       0       0       0       0
  2615 ;;Total ram usage:        6 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    4
  2618 ;; This function calls:
  2619 ;;		_WriteData
  2620 ;;		___awdiv
  2621 ;;		___awmod
  2622 ;;		___wmul
  2623 ;; This function is called by:
  2624 ;;		_adcToLcd
  2625 ;;		_display_temp
  2626 ;;		_display_speed
  2627 ;;		_display_light
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           	psect	text17
  2632  000C8A                     __ptext17:
  2633                           	opt stack 0
  2634  000C8A                     _integerToLcd:
  2635                           	opt stack 24
  2636                           
  2637                           ;lcd.c: 150: unsigned char thousands ,hundreds,tens,ones;
  2638                           ;lcd.c: 151: thousands = num / 1000;
  2639                           
  2640                           ;incstack = 0
  2641  000C8A  C015  F007         	movff	integerToLcd@num,___awdiv@dividend
  2642  000C8E  C016  F008         	movff	integerToLcd@num+1,___awdiv@dividend+1
  2643  000C92  0E03               	movlw	3
  2644  000C94  6E0A               	movwf	___awdiv@divisor+1,c
  2645  000C96  0EE8               	movlw	232
  2646  000C98  6E09               	movwf	___awdiv@divisor,c
  2647  000C9A  EC88  F007         	call	___awdiv	;wreg free
  2648  000C9E  5007               	movf	?___awdiv,w,c
  2649  000CA0  6E17               	movwf	integerToLcd@thousands,c
  2650                           
  2651                           ;lcd.c: 153: hundreds = ((num - thousands*1000)-1) / 100;
  2652  000CA2  C017  F00F         	movff	integerToLcd@thousands,___wmul@multiplier
  2653  000CA6  6A10               	clrf	___wmul@multiplier+1,c
  2654  000CA8  0E03               	movlw	3
  2655  000CAA  6E12               	movwf	___wmul@multiplicand+1,c
  2656  000CAC  0EE8               	movlw	232
  2657  000CAE  6E11               	movwf	___wmul@multiplicand,c
  2658  000CB0  EC30  F009         	call	___wmul	;wreg free
  2659  000CB4  0E01               	movlw	1
  2660  000CB6  260F               	addwf	?___wmul,f,c
  2661  000CB8  0E00               	movlw	0
  2662  000CBA  2210               	addwfc	?___wmul+1,f,c
  2663  000CBC  1E0F               	comf	?___wmul,f,c
  2664  000CBE  1E10               	comf	?___wmul+1,f,c
  2665  000CC0  4A0F               	infsnz	?___wmul,f,c
  2666  000CC2  2A10               	incf	?___wmul+1,f,c
  2667  000CC4  5015               	movf	integerToLcd@num,w,c
  2668  000CC6  240F               	addwf	?___wmul,w,c
  2669  000CC8  6E07               	movwf	___awdiv@dividend,c
  2670  000CCA  5016               	movf	integerToLcd@num+1,w,c
  2671  000CCC  2010               	addwfc	?___wmul+1,w,c
  2672  000CCE  6E08               	movwf	___awdiv@dividend+1,c
  2673  000CD0  0E00               	movlw	0
  2674  000CD2  6E0A               	movwf	___awdiv@divisor+1,c
  2675  000CD4  0E64               	movlw	100
  2676  000CD6  6E09               	movwf	___awdiv@divisor,c
  2677  000CD8  EC88  F007         	call	___awdiv	;wreg free
  2678  000CDC  5007               	movf	?___awdiv,w,c
  2679  000CDE  6E18               	movwf	integerToLcd@hundreds,c
  2680                           
  2681                           ;lcd.c: 155: WriteData( hundreds + 0x30);
  2682  000CE0  5018               	movf	integerToLcd@hundreds,w,c
  2683  000CE2  0F30               	addlw	48
  2684  000CE4  EC4F  F009         	call	_WriteData
  2685                           
  2686                           ;lcd.c: 156: tens = (num%100)/10;
  2687  000CE8  0E00               	movlw	0
  2688  000CEA  6E04               	movwf	___awmod@divisor+1,c
  2689  000CEC  0E64               	movlw	100
  2690  000CEE  6E03               	movwf	___awmod@divisor,c
  2691  000CF0  C015  F001         	movff	integerToLcd@num,___awmod@dividend
  2692  000CF4  C016  F002         	movff	integerToLcd@num+1,___awmod@dividend+1
  2693  000CF8  ECCA  F007         	call	___awmod	;wreg free
  2694  000CFC  C001  F007         	movff	?___awmod,___awdiv@dividend
  2695  000D00  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2696  000D04  0E00               	movlw	0
  2697  000D06  6E0A               	movwf	___awdiv@divisor+1,c
  2698  000D08  0E0A               	movlw	10
  2699  000D0A  6E09               	movwf	___awdiv@divisor,c
  2700  000D0C  EC88  F007         	call	___awdiv	;wreg free
  2701  000D10  5007               	movf	?___awdiv,w,c
  2702  000D12  6E19               	movwf	integerToLcd@tens,c
  2703                           
  2704                           ;lcd.c: 158: WriteData( tens + 0x30);
  2705  000D14  5019               	movf	integerToLcd@tens,w,c
  2706  000D16  0F30               	addlw	48
  2707  000D18  EC4F  F009         	call	_WriteData
  2708                           
  2709                           ;lcd.c: 159: ones = num%10;
  2710  000D1C  C015  F001         	movff	integerToLcd@num,___awmod@dividend
  2711  000D20  C016  F002         	movff	integerToLcd@num+1,___awmod@dividend+1
  2712  000D24  0E00               	movlw	0
  2713  000D26  6E04               	movwf	___awmod@divisor+1,c
  2714  000D28  0E0A               	movlw	10
  2715  000D2A  6E03               	movwf	___awmod@divisor,c
  2716  000D2C  ECCA  F007         	call	___awmod	;wreg free
  2717  000D30  5001               	movf	?___awmod,w,c
  2718  000D32  6E1A               	movwf	integerToLcd@ones,c
  2719                           
  2720                           ;lcd.c: 161: WriteData( ones + 0x30);
  2721  000D34  501A               	movf	integerToLcd@ones,w,c
  2722  000D36  0F30               	addlw	48
  2723  000D38  EC4F  F009         	call	_WriteData
  2724  000D3C  0012               	return		;funcret
  2725  000D3E                     __end_of_integerToLcd:
  2726                           	opt stack 0
  2727                           tblptru	equ	0xFF8
  2728                           tblptrh	equ	0xFF7
  2729                           tblptrl	equ	0xFF6
  2730                           tablat	equ	0xFF5
  2731                           postinc2	equ	0xFDE
  2732                           postdec2	equ	0xFDD
  2733                           fsr2h	equ	0xFDA
  2734                           fsr2l	equ	0xFD9
  2735                           status	equ	0xFD8
  2736                           
  2737 ;; *************** function ___wmul *****************
  2738 ;; Defined at:
  2739 ;;		line 15 in file "/opt/microchip/xc8/v1.44/sources/common/Umul16.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  multiplier      2   14[COMRAM] unsigned int 
  2742 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;  product         2   18[COMRAM] unsigned int 
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  2   14[COMRAM] unsigned int 
  2747 ;; Registers used:
  2748 ;;		wreg, status,2, status,0, prodl, prodh
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2754 ;;      Params:         4       0       0       0       0       0       0
  2755 ;;      Locals:         2       0       0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0
  2757 ;;      Totals:         6       0       0       0       0       0       0
  2758 ;;Total ram usage:        6 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; This function calls:
  2761 ;;		Nothing
  2762 ;; This function is called by:
  2763 ;;		_get_temp
  2764 ;;		_integerToLcd
  2765 ;;		_eval_poly
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           	psect	text18
  2770  001260                     __ptext18:
  2771                           	opt stack 0
  2772  001260                     ___wmul:
  2773                           	opt stack 27
  2774                           
  2775                           ;incstack = 0
  2776  001260  500F               	movf	___wmul@multiplier,w,c
  2777  001262  0211               	mulwf	___wmul@multiplicand,c
  2778  001264  CFF3 F013          	movff	prodl,___wmul@product
  2779  001268  CFF4 F014          	movff	prodh,___wmul@product+1
  2780  00126C  500F               	movf	___wmul@multiplier,w,c
  2781  00126E  0212               	mulwf	___wmul@multiplicand+1,c
  2782  001270  50F3               	movf	prodl,w,c
  2783  001272  2614               	addwf	___wmul@product+1,f,c
  2784  001274  5010               	movf	___wmul@multiplier+1,w,c
  2785  001276  0211               	mulwf	___wmul@multiplicand,c
  2786  001278  50F3               	movf	prodl,w,c
  2787  00127A  2614               	addwf	___wmul@product+1,f,c
  2788  00127C  C013  F00F         	movff	___wmul@product,?___wmul
  2789  001280  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2790  001284  0012               	return	
  2791  001286                     __end_of___wmul:
  2792                           	opt stack 0
  2793                           tblptru	equ	0xFF8
  2794                           tblptrh	equ	0xFF7
  2795                           tblptrl	equ	0xFF6
  2796                           tablat	equ	0xFF5
  2797                           prodh	equ	0xFF4
  2798                           prodl	equ	0xFF3
  2799                           postinc2	equ	0xFDE
  2800                           postdec2	equ	0xFDD
  2801                           fsr2h	equ	0xFDA
  2802                           fsr2l	equ	0xFD9
  2803                           status	equ	0xFD8
  2804                           
  2805 ;; *************** function ___awmod *****************
  2806 ;; Defined at:
  2807 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awmod.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  dividend        2    0[COMRAM] int 
  2810 ;;  divisor         2    2[COMRAM] int 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  sign            1    5[COMRAM] unsigned char 
  2813 ;;  counter         1    4[COMRAM] unsigned char 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  2    0[COMRAM] int 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2, status,0
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2823 ;;      Params:         4       0       0       0       0       0       0
  2824 ;;      Locals:         2       0       0       0       0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0
  2826 ;;      Totals:         6       0       0       0       0       0       0
  2827 ;;Total ram usage:        6 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; This function calls:
  2830 ;;		Nothing
  2831 ;; This function is called by:
  2832 ;;		_integerToLcd
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text19
  2837  000F94                     __ptext19:
  2838                           	opt stack 0
  2839  000F94                     ___awmod:
  2840                           	opt stack 27
  2841                           
  2842                           ;incstack = 0
  2843  000F94  0E00               	movlw	0
  2844  000F96  6E06               	movwf	___awmod@sign,c
  2845  000F98  AE02               	btfss	___awmod@dividend+1,7,c
  2846  000F9A  D006               	goto	l538
  2847  000F9C  6C01               	negf	___awmod@dividend,c
  2848  000F9E  1E02               	comf	___awmod@dividend+1,f,c
  2849  000FA0  B0D8               	btfsc	status,0,c
  2850  000FA2  2A02               	incf	___awmod@dividend+1,f,c
  2851  000FA4  0E01               	movlw	1
  2852  000FA6  6E06               	movwf	___awmod@sign,c
  2853  000FA8                     l538:
  2854  000FA8  AE04               	btfss	___awmod@divisor+1,7,c
  2855  000FAA  D004               	goto	l539
  2856  000FAC  6C03               	negf	___awmod@divisor,c
  2857  000FAE  1E04               	comf	___awmod@divisor+1,f,c
  2858  000FB0  B0D8               	btfsc	status,0,c
  2859  000FB2  2A04               	incf	___awmod@divisor+1,f,c
  2860  000FB4                     l539:
  2861  000FB4  5003               	movf	___awmod@divisor,w,c
  2862  000FB6  1004               	iorwf	___awmod@divisor+1,w,c
  2863  000FB8  B4D8               	btfsc	status,2,c
  2864  000FBA  D018               	goto	l546
  2865  000FBC  0E01               	movlw	1
  2866  000FBE  6E05               	movwf	___awmod@counter,c
  2867  000FC0  D004               	goto	l541
  2868  000FC2  90D8               	bcf	status,0,c
  2869  000FC4  3603               	rlcf	___awmod@divisor,f,c
  2870  000FC6  3604               	rlcf	___awmod@divisor+1,f,c
  2871  000FC8  2A05               	incf	___awmod@counter,f,c
  2872  000FCA                     l541:
  2873  000FCA  AE04               	btfss	___awmod@divisor+1,7,c
  2874  000FCC  D7FA               	goto	l542
  2875  000FCE                     u1680:
  2876  000FCE  5003               	movf	___awmod@divisor,w,c
  2877  000FD0  5C01               	subwf	___awmod@dividend,w,c
  2878  000FD2  5004               	movf	___awmod@divisor+1,w,c
  2879  000FD4  5802               	subwfb	___awmod@dividend+1,w,c
  2880  000FD6  A0D8               	btfss	status,0,c
  2881  000FD8  D004               	goto	l545
  2882  000FDA  5003               	movf	___awmod@divisor,w,c
  2883  000FDC  5E01               	subwf	___awmod@dividend,f,c
  2884  000FDE  5004               	movf	___awmod@divisor+1,w,c
  2885  000FE0  5A02               	subwfb	___awmod@dividend+1,f,c
  2886  000FE2                     l545:
  2887  000FE2  90D8               	bcf	status,0,c
  2888  000FE4  3204               	rrcf	___awmod@divisor+1,f,c
  2889  000FE6  3203               	rrcf	___awmod@divisor,f,c
  2890  000FE8  2E05               	decfsz	___awmod@counter,f,c
  2891  000FEA  D7F1               	goto	u1680
  2892  000FEC                     l546:
  2893  000FEC  5006               	movf	___awmod@sign,w,c
  2894  000FEE  B4D8               	btfsc	status,2,c
  2895  000FF0  D004               	goto	l547
  2896  000FF2  6C01               	negf	___awmod@dividend,c
  2897  000FF4  1E02               	comf	___awmod@dividend+1,f,c
  2898  000FF6  B0D8               	btfsc	status,0,c
  2899  000FF8  2A02               	incf	___awmod@dividend+1,f,c
  2900  000FFA                     l547:
  2901  000FFA  C001  F001         	movff	___awmod@dividend,?___awmod
  2902  000FFE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2903  001002  0012               	return	
  2904  001004                     __end_of___awmod:
  2905                           	opt stack 0
  2906                           tblptru	equ	0xFF8
  2907                           tblptrh	equ	0xFF7
  2908                           tblptrl	equ	0xFF6
  2909                           tablat	equ	0xFF5
  2910                           prodh	equ	0xFF4
  2911                           prodl	equ	0xFF3
  2912                           postinc2	equ	0xFDE
  2913                           postdec2	equ	0xFDD
  2914                           fsr2h	equ	0xFDA
  2915                           fsr2l	equ	0xFD9
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function ___awdiv *****************
  2919 ;; Defined at:
  2920 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awdiv.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;  dividend        2    6[COMRAM] int 
  2923 ;;  divisor         2    8[COMRAM] int 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;  quotient        2   12[COMRAM] int 
  2926 ;;  sign            1   11[COMRAM] unsigned char 
  2927 ;;  counter         1   10[COMRAM] unsigned char 
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  2    6[COMRAM] int 
  2930 ;; Registers used:
  2931 ;;		wreg, status,2, status,0
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2937 ;;      Params:         4       0       0       0       0       0       0
  2938 ;;      Locals:         4       0       0       0       0       0       0
  2939 ;;      Temps:          0       0       0       0       0       0       0
  2940 ;;      Totals:         8       0       0       0       0       0       0
  2941 ;;Total ram usage:        8 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; This function calls:
  2944 ;;		Nothing
  2945 ;; This function is called by:
  2946 ;;		_get_temp
  2947 ;;		_integerToLcd
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           	psect	text20
  2952  000F10                     __ptext20:
  2953                           	opt stack 0
  2954  000F10                     ___awdiv:
  2955                           	opt stack 27
  2956                           
  2957                           ;incstack = 0
  2958  000F10  0E00               	movlw	0
  2959  000F12  6E0C               	movwf	___awdiv@sign,c
  2960  000F14  AE0A               	btfss	___awdiv@divisor+1,7,c
  2961  000F16  D006               	goto	l525
  2962  000F18  6C09               	negf	___awdiv@divisor,c
  2963  000F1A  1E0A               	comf	___awdiv@divisor+1,f,c
  2964  000F1C  B0D8               	btfsc	status,0,c
  2965  000F1E  2A0A               	incf	___awdiv@divisor+1,f,c
  2966  000F20  0E01               	movlw	1
  2967  000F22  6E0C               	movwf	___awdiv@sign,c
  2968  000F24                     l525:
  2969  000F24  AE08               	btfss	___awdiv@dividend+1,7,c
  2970  000F26  D006               	goto	l526
  2971  000F28  6C07               	negf	___awdiv@dividend,c
  2972  000F2A  1E08               	comf	___awdiv@dividend+1,f,c
  2973  000F2C  B0D8               	btfsc	status,0,c
  2974  000F2E  2A08               	incf	___awdiv@dividend+1,f,c
  2975  000F30  0E01               	movlw	1
  2976  000F32  1A0C               	xorwf	___awdiv@sign,f,c
  2977  000F34                     l526:
  2978  000F34  0E00               	movlw	0
  2979  000F36  6E0E               	movwf	___awdiv@quotient+1,c
  2980  000F38  0E00               	movlw	0
  2981  000F3A  6E0D               	movwf	___awdiv@quotient,c
  2982  000F3C  5009               	movf	___awdiv@divisor,w,c
  2983  000F3E  100A               	iorwf	___awdiv@divisor+1,w,c
  2984  000F40  B4D8               	btfsc	status,2,c
  2985  000F42  D01C               	goto	l533
  2986  000F44  0E01               	movlw	1
  2987  000F46  6E0B               	movwf	___awdiv@counter,c
  2988  000F48  D004               	goto	l528
  2989  000F4A  90D8               	bcf	status,0,c
  2990  000F4C  3609               	rlcf	___awdiv@divisor,f,c
  2991  000F4E  360A               	rlcf	___awdiv@divisor+1,f,c
  2992  000F50  2A0B               	incf	___awdiv@counter,f,c
  2993  000F52                     l528:
  2994  000F52  AE0A               	btfss	___awdiv@divisor+1,7,c
  2995  000F54  D7FA               	goto	l529
  2996  000F56                     u1620:
  2997  000F56  90D8               	bcf	status,0,c
  2998  000F58  360D               	rlcf	___awdiv@quotient,f,c
  2999  000F5A  360E               	rlcf	___awdiv@quotient+1,f,c
  3000  000F5C  5009               	movf	___awdiv@divisor,w,c
  3001  000F5E  5C07               	subwf	___awdiv@dividend,w,c
  3002  000F60  500A               	movf	___awdiv@divisor+1,w,c
  3003  000F62  5808               	subwfb	___awdiv@dividend+1,w,c
  3004  000F64  A0D8               	btfss	status,0,c
  3005  000F66  D005               	goto	l532
  3006  000F68  5009               	movf	___awdiv@divisor,w,c
  3007  000F6A  5E07               	subwf	___awdiv@dividend,f,c
  3008  000F6C  500A               	movf	___awdiv@divisor+1,w,c
  3009  000F6E  5A08               	subwfb	___awdiv@dividend+1,f,c
  3010  000F70  800D               	bsf	___awdiv@quotient,0,c
  3011  000F72                     l532:
  3012  000F72  90D8               	bcf	status,0,c
  3013  000F74  320A               	rrcf	___awdiv@divisor+1,f,c
  3014  000F76  3209               	rrcf	___awdiv@divisor,f,c
  3015  000F78  2E0B               	decfsz	___awdiv@counter,f,c
  3016  000F7A  D7ED               	goto	u1620
  3017  000F7C                     l533:
  3018  000F7C  500C               	movf	___awdiv@sign,w,c
  3019  000F7E  B4D8               	btfsc	status,2,c
  3020  000F80  D004               	goto	l534
  3021  000F82  6C0D               	negf	___awdiv@quotient,c
  3022  000F84  1E0E               	comf	___awdiv@quotient+1,f,c
  3023  000F86  B0D8               	btfsc	status,0,c
  3024  000F88  2A0E               	incf	___awdiv@quotient+1,f,c
  3025  000F8A                     l534:
  3026  000F8A  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3027  000F8E  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3028  000F92  0012               	return	
  3029  000F94                     __end_of___awdiv:
  3030                           	opt stack 0
  3031                           tblptru	equ	0xFF8
  3032                           tblptrh	equ	0xFF7
  3033                           tblptrl	equ	0xFF6
  3034                           tablat	equ	0xFF5
  3035                           prodh	equ	0xFF4
  3036                           prodl	equ	0xFF3
  3037                           postinc2	equ	0xFDE
  3038                           postdec2	equ	0xFDD
  3039                           fsr2h	equ	0xFDA
  3040                           fsr2l	equ	0xFD9
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function _adc_poll *****************
  3044 ;; Defined at:
  3045 ;;		line 26 in file "sensors.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;		None
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;		None
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  1    wreg      void 
  3052 ;; Registers used:
  3053 ;;		None
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3059 ;;      Params:         0       0       0       0       0       0       0
  3060 ;;      Locals:         0       0       0       0       0       0       0
  3061 ;;      Temps:          0       0       0       0       0       0       0
  3062 ;;      Totals:         0       0       0       0       0       0       0
  3063 ;;Total ram usage:        0 bytes
  3064 ;; Hardware stack levels used:    1
  3065 ;; This function calls:
  3066 ;;		Nothing
  3067 ;; This function is called by:
  3068 ;;		_adcToLcd
  3069 ;;		_get_temp
  3070 ;;		_get_light
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text21
  3075  001308                     __ptext21:
  3076                           	opt stack 0
  3077  001308                     _adc_poll:
  3078                           	opt stack 27
  3079                           
  3080                           ;sensors.c: 28: while(ADCON0bits.GO);
  3081                           
  3082                           ;incstack = 0
  3083  001308  A2C2               	btfss	4034,1,c	;volatile
  3084  00130A  0012               	return	
  3085  00130C  D7FD               	goto	_adc_poll
  3086  00130E                     __end_of_adc_poll:
  3087                           	opt stack 0
  3088                           tblptru	equ	0xFF8
  3089                           tblptrh	equ	0xFF7
  3090                           tblptrl	equ	0xFF6
  3091                           tablat	equ	0xFF5
  3092                           prodh	equ	0xFF4
  3093                           prodl	equ	0xFF3
  3094                           postinc2	equ	0xFDE
  3095                           postdec2	equ	0xFDD
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           
  3100 ;; *************** function _WriteLCD *****************
  3101 ;; Defined at:
  3102 ;;		line 87 in file "lcd.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  message         2    6[COMRAM] PTR unsigned char 
  3105 ;;		 -> STR_4(7), STR_3(5), STR_2(5), STR_1(5), 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;  i               1   10[COMRAM] unsigned char 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      void 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3117 ;;      Params:         2       0       0       0       0       0       0
  3118 ;;      Locals:         1       0       0       0       0       0       0
  3119 ;;      Temps:          2       0       0       0       0       0       0
  3120 ;;      Totals:         5       0       0       0       0       0       0
  3121 ;;Total ram usage:        5 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    4
  3124 ;; This function calls:
  3125 ;;		_WriteData
  3126 ;;		_delay
  3127 ;; This function is called by:
  3128 ;;		_adcToLcd
  3129 ;;		_hmi_out
  3130 ;;		_display_mode
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text22
  3135  001004                     __ptext22:
  3136                           	opt stack 0
  3137  001004                     _WriteLCD:
  3138                           	opt stack 24
  3139                           
  3140                           ;lcd.c: 89: delay(1);
  3141                           
  3142                           ;incstack = 0
  3143  001004  0E00               	movlw	0
  3144  001006  6E02               	movwf	delay@x+1,c
  3145  001008  0E01               	movlw	1
  3146  00100A  6E01               	movwf	delay@x,c
  3147  00100C  ECEF  F008         	call	_delay	;wreg free
  3148                           
  3149                           ;lcd.c: 90: unsigned char i;
  3150                           ;lcd.c: 91: for(i=0; i<20; i++)
  3151  001010  0E00               	movlw	0
  3152  001012  6E0B               	movwf	WriteLCD@i,c
  3153  001014                     l2231:
  3154  001014  0E13               	movlw	19
  3155  001016  640B               	cpfsgt	WriteLCD@i,c
  3156  001018  D001               	goto	l334
  3157  00101A  0012               	return	
  3158  00101C                     l334:
  3159                           
  3160                           ;lcd.c: 92: {
  3161                           ;lcd.c: 93: if( !message[i] )
  3162  00101C  500B               	movf	WriteLCD@i,w,c
  3163  00101E  0D01               	mullw	1
  3164  001020  C007  F009         	movff	WriteLCD@message,??_WriteLCD
  3165  001024  C008  F00A         	movff	WriteLCD@message+1,??_WriteLCD+1
  3166  001028  50F3               	movf	prodl,w,c
  3167  00102A  2609               	addwf	??_WriteLCD,f,c
  3168  00102C  50F4               	movf	prodh,w,c
  3169  00102E  220A               	addwfc	??_WriteLCD+1,f,c
  3170  001030  C009  FFF6         	movff	??_WriteLCD,tblptrl
  3171  001034  C00A  FFF7         	movff	??_WriteLCD+1,tblptrh
  3172  001038                     	if	0	;tblptru may be non-zero
  3173  001038                     	endif
  3174  001038                     	if	0	;tblptru may be non-zero
  3175  001038                     	endif
  3176  001038  0008               	tblrd		*
  3177  00103A  50F5               	movf	tablat,w,c
  3178  00103C  0900               	iorlw	0
  3179  00103E  B4D8               	btfsc	status,2,c
  3180  001040  0012               	return	
  3181                           
  3182                           ;lcd.c: 95: WriteData(message[i]);
  3183                           
  3184                           ;lcd.c: 94: break;
  3185  001042  500B               	movf	WriteLCD@i,w,c
  3186  001044  0D01               	mullw	1
  3187  001046  C007  F009         	movff	WriteLCD@message,??_WriteLCD
  3188  00104A  C008  F00A         	movff	WriteLCD@message+1,??_WriteLCD+1
  3189  00104E  50F3               	movf	prodl,w,c
  3190  001050  2609               	addwf	??_WriteLCD,f,c
  3191  001052  50F4               	movf	prodh,w,c
  3192  001054  220A               	addwfc	??_WriteLCD+1,f,c
  3193  001056  C009  FFF6         	movff	??_WriteLCD,tblptrl
  3194  00105A  C00A  FFF7         	movff	??_WriteLCD+1,tblptrh
  3195  00105E                     	if	0	;tblptru may be non-zero
  3196  00105E                     	endif
  3197  00105E                     	if	0	;tblptru may be non-zero
  3198  00105E                     	endif
  3199  00105E  0008               	tblrd		*
  3200  001060  50F5               	movf	tablat,w,c
  3201  001062  EC4F  F009         	call	_WriteData
  3202  001066  2A0B               	incf	WriteLCD@i,f,c
  3203  001068  D7D5               	goto	l2231
  3204  00106A                     __end_of_WriteLCD:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           postinc2	equ	0xFDE
  3213                           postdec2	equ	0xFDD
  3214                           fsr2h	equ	0xFDA
  3215                           fsr2l	equ	0xFD9
  3216                           status	equ	0xFD8
  3217                           
  3218 ;; *************** function _WriteData *****************
  3219 ;; Defined at:
  3220 ;;		line 106 in file "lcd.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  value           1    wreg     unsigned char 
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;  value           1    5[COMRAM] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      void 
  3227 ;; Registers used:
  3228 ;;		wreg, status,2, status,0, cstack
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3234 ;;      Params:         0       0       0       0       0       0       0
  3235 ;;      Locals:         1       0       0       0       0       0       0
  3236 ;;      Temps:          0       0       0       0       0       0       0
  3237 ;;      Totals:         1       0       0       0       0       0       0
  3238 ;;Total ram usage:        1 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    3
  3241 ;; This function calls:
  3242 ;;		_WriteCommon
  3243 ;;		_delay
  3244 ;; This function is called by:
  3245 ;;		_display_temp
  3246 ;;		_WriteLCD
  3247 ;;		_integerToLcd
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           	psect	text23
  3252  00129E                     __ptext23:
  3253                           	opt stack 0
  3254  00129E                     _WriteData:
  3255                           	opt stack 24
  3256                           
  3257                           ;incstack = 0
  3258                           ;WriteData@value stored from wreg
  3259  00129E  6E06               	movwf	WriteData@value,c
  3260                           
  3261                           ;lcd.c: 108: PORTCbits.RC0 = 1;
  3262  0012A0  8082               	bsf	3970,0,c	;volatile
  3263                           
  3264                           ;lcd.c: 109: delay(1);
  3265  0012A2  0E00               	movlw	0
  3266  0012A4  6E02               	movwf	delay@x+1,c
  3267  0012A6  0E01               	movlw	1
  3268  0012A8  6E01               	movwf	delay@x,c
  3269  0012AA  ECEF  F008         	call	_delay	;wreg free
  3270                           
  3271                           ;lcd.c: 110: WriteCommon( value );
  3272  0012AE  5006               	movf	WriteData@value,w,c
  3273  0012B0  EC98  F008         	call	_WriteCommon
  3274  0012B4  0012               	return		;funcret
  3275  0012B6                     __end_of_WriteData:
  3276                           	opt stack 0
  3277                           tblptru	equ	0xFF8
  3278                           tblptrh	equ	0xFF7
  3279                           tblptrl	equ	0xFF6
  3280                           tablat	equ	0xFF5
  3281                           prodh	equ	0xFF4
  3282                           prodl	equ	0xFF3
  3283                           postinc2	equ	0xFDE
  3284                           postdec2	equ	0xFDD
  3285                           fsr2h	equ	0xFDA
  3286                           fsr2l	equ	0xFD9
  3287                           status	equ	0xFD8
  3288                           
  3289 ;; *************** function _SerialReceive *****************
  3290 ;; Defined at:
  3291 ;;		line 171 in file "hmi.c"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;		None
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;		None
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  1    wreg      unsigned char 
  3298 ;; Registers used:
  3299 ;;		wreg, status,2
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3305 ;;      Params:         0       0       0       0       0       0       0
  3306 ;;      Locals:         0       0       0       0       0       0       0
  3307 ;;      Temps:          0       0       0       0       0       0       0
  3308 ;;      Totals:         0       0       0       0       0       0       0
  3309 ;;Total ram usage:        0 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; This function calls:
  3312 ;;		Nothing
  3313 ;; This function is called by:
  3314 ;;		_main
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           	psect	text24
  3319  0012F8                     __ptext24:
  3320                           	opt stack 0
  3321  0012F8                     _SerialReceive:
  3322                           	opt stack 30
  3323                           
  3324                           ;hmi.c: 173: while(!RCIF);
  3325                           
  3326                           ;incstack = 0
  3327  0012F8  AA9E               	btfss	3998,5,c	;volatile
  3328  0012FA  D7FE               	goto	_SerialReceive
  3329                           
  3330                           ;hmi.c: 174: return RCREG;
  3331  0012FC  50AE               	movf	4014,w,c	;volatile
  3332  0012FE  0012               	return	
  3333  001300                     __end_of_SerialReceive:
  3334                           	opt stack 0
  3335                           tblptru	equ	0xFF8
  3336                           tblptrh	equ	0xFF7
  3337                           tblptrl	equ	0xFF6
  3338                           tablat	equ	0xFF5
  3339                           prodh	equ	0xFF4
  3340                           prodl	equ	0xFF3
  3341                           postinc2	equ	0xFDE
  3342                           postdec2	equ	0xFDD
  3343                           fsr2h	equ	0xFDA
  3344                           fsr2l	equ	0xFD9
  3345                           status	equ	0xFD8
  3346                           
  3347 ;; *************** function _InitLCD *****************
  3348 ;; Defined at:
  3349 ;;		line 10 in file "lcd.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;		None
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;		None
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, status,0, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3363 ;;      Params:         0       0       0       0       0       0       0
  3364 ;;      Locals:         0       0       0       0       0       0       0
  3365 ;;      Temps:          0       0       0       0       0       0       0
  3366 ;;      Totals:         0       0       0       0       0       0       0
  3367 ;;Total ram usage:        0 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    5
  3370 ;; This function calls:
  3371 ;;		_WriteCtrl
  3372 ;;		_clear_lcd
  3373 ;;		_delay
  3374 ;;		_pulse_enable
  3375 ;; This function is called by:
  3376 ;;		_main
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text25
  3381  000BB8                     __ptext25:
  3382                           	opt stack 0
  3383  000BB8                     _InitLCD:
  3384                           	opt stack 25
  3385                           
  3386                           ;lcd.c: 55: delay(200);
  3387                           
  3388                           ;incstack = 0
  3389  000BB8  0E00               	movlw	0
  3390  000BBA  6E02               	movwf	delay@x+1,c
  3391  000BBC  0EC8               	movlw	200
  3392  000BBE  6E01               	movwf	delay@x,c
  3393  000BC0  ECEF  F008         	call	_delay	;wreg free
  3394                           
  3395                           ;lcd.c: 57: PORTD = 3;
  3396  000BC4  0E03               	movlw	3
  3397  000BC6  6E83               	movwf	3971,c	;volatile
  3398                           
  3399                           ;lcd.c: 58: delay(2);
  3400  000BC8  0E00               	movlw	0
  3401  000BCA  6E02               	movwf	delay@x+1,c
  3402  000BCC  0E02               	movlw	2
  3403  000BCE  6E01               	movwf	delay@x,c
  3404  000BD0  ECEF  F008         	call	_delay	;wreg free
  3405                           
  3406                           ;lcd.c: 59: pulse_enable();
  3407  000BD4  EC67  F009         	call	_pulse_enable	;wreg free
  3408                           
  3409                           ;lcd.c: 60: delay(25);
  3410  000BD8  0E00               	movlw	0
  3411  000BDA  6E02               	movwf	delay@x+1,c
  3412  000BDC  0E19               	movlw	25
  3413  000BDE  6E01               	movwf	delay@x,c
  3414  000BE0  ECEF  F008         	call	_delay	;wreg free
  3415                           
  3416                           ;lcd.c: 61: pulse_enable();
  3417  000BE4  EC67  F009         	call	_pulse_enable	;wreg free
  3418                           
  3419                           ;lcd.c: 62: delay(25);
  3420  000BE8  0E00               	movlw	0
  3421  000BEA  6E02               	movwf	delay@x+1,c
  3422  000BEC  0E19               	movlw	25
  3423  000BEE  6E01               	movwf	delay@x,c
  3424  000BF0  ECEF  F008         	call	_delay	;wreg free
  3425                           
  3426                           ;lcd.c: 63: pulse_enable();
  3427  000BF4  EC67  F009         	call	_pulse_enable	;wreg free
  3428                           
  3429                           ;lcd.c: 64: PORTD = 2;
  3430  000BF8  0E02               	movlw	2
  3431  000BFA  6E83               	movwf	3971,c	;volatile
  3432                           
  3433                           ;lcd.c: 65: delay(2);
  3434  000BFC  0E00               	movlw	0
  3435  000BFE  6E02               	movwf	delay@x+1,c
  3436  000C00  0E02               	movlw	2
  3437  000C02  6E01               	movwf	delay@x,c
  3438  000C04  ECEF  F008         	call	_delay	;wreg free
  3439                           
  3440                           ;lcd.c: 66: pulse_enable();
  3441  000C08  EC67  F009         	call	_pulse_enable	;wreg free
  3442                           
  3443                           ;lcd.c: 67: delay(25);
  3444  000C0C  0E00               	movlw	0
  3445  000C0E  6E02               	movwf	delay@x+1,c
  3446  000C10  0E19               	movlw	25
  3447  000C12  6E01               	movwf	delay@x,c
  3448  000C14  ECEF  F008         	call	_delay	;wreg free
  3449                           
  3450                           ;lcd.c: 68: WriteCtrl(0x08);
  3451  000C18  0E08               	movlw	8
  3452  000C1A  EC5B  F009         	call	_WriteCtrl
  3453                           
  3454                           ;lcd.c: 69: delay(250);
  3455  000C1E  0E00               	movlw	0
  3456  000C20  6E02               	movwf	delay@x+1,c
  3457  000C22  0EFA               	movlw	250
  3458  000C24  6E01               	movwf	delay@x,c
  3459  000C26  ECEF  F008         	call	_delay	;wreg free
  3460                           
  3461                           ;lcd.c: 70: WriteCtrl(0x28);
  3462  000C2A  0E28               	movlw	40
  3463  000C2C  EC5B  F009         	call	_WriteCtrl
  3464                           
  3465                           ;lcd.c: 71: delay(250);
  3466  000C30  0E00               	movlw	0
  3467  000C32  6E02               	movwf	delay@x+1,c
  3468  000C34  0EFA               	movlw	250
  3469  000C36  6E01               	movwf	delay@x,c
  3470  000C38  ECEF  F008         	call	_delay	;wreg free
  3471                           
  3472                           ;lcd.c: 73: WriteCtrl(0x14);
  3473  000C3C  0E14               	movlw	20
  3474  000C3E  EC5B  F009         	call	_WriteCtrl
  3475                           
  3476                           ;lcd.c: 74: delay(250);
  3477  000C42  0E00               	movlw	0
  3478  000C44  6E02               	movwf	delay@x+1,c
  3479  000C46  0EFA               	movlw	250
  3480  000C48  6E01               	movwf	delay@x,c
  3481  000C4A  ECEF  F008         	call	_delay	;wreg free
  3482                           
  3483                           ;lcd.c: 77: WriteCtrl(0x06);
  3484  000C4E  0E06               	movlw	6
  3485  000C50  EC5B  F009         	call	_WriteCtrl
  3486                           
  3487                           ;lcd.c: 78: delay(250);
  3488  000C54  0E00               	movlw	0
  3489  000C56  6E02               	movwf	delay@x+1,c
  3490  000C58  0EFA               	movlw	250
  3491  000C5A  6E01               	movwf	delay@x,c
  3492  000C5C  ECEF  F008         	call	_delay	;wreg free
  3493                           
  3494                           ;lcd.c: 79: WriteCtrl(0x80);
  3495  000C60  0E80               	movlw	128
  3496  000C62  EC5B  F009         	call	_WriteCtrl
  3497                           
  3498                           ;lcd.c: 80: delay(250);
  3499  000C66  0E00               	movlw	0
  3500  000C68  6E02               	movwf	delay@x+1,c
  3501  000C6A  0EFA               	movlw	250
  3502  000C6C  6E01               	movwf	delay@x,c
  3503  000C6E  ECEF  F008         	call	_delay	;wreg free
  3504                           
  3505                           ;lcd.c: 81: clear_lcd();
  3506  000C72  EC80  F009         	call	_clear_lcd	;wreg free
  3507                           
  3508                           ;lcd.c: 82: WriteCtrl(0x0C);
  3509  000C76  0E0C               	movlw	12
  3510  000C78  EC5B  F009         	call	_WriteCtrl
  3511                           
  3512                           ;lcd.c: 83: delay(250);
  3513  000C7C  0E00               	movlw	0
  3514  000C7E  6E02               	movwf	delay@x+1,c
  3515  000C80  0EFA               	movlw	250
  3516  000C82  6E01               	movwf	delay@x,c
  3517  000C84  ECEF  F008         	call	_delay	;wreg free
  3518  000C88  0012               	return		;funcret
  3519  000C8A                     __end_of_InitLCD:
  3520                           	opt stack 0
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           postinc2	equ	0xFDE
  3528                           postdec2	equ	0xFDD
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function _clear_lcd *****************
  3534 ;; Defined at:
  3535 ;;		line 5 in file "lcd.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;		None
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;		None
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3549 ;;      Params:         0       0       0       0       0       0       0
  3550 ;;      Locals:         0       0       0       0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0
  3552 ;;      Totals:         0       0       0       0       0       0       0
  3553 ;;Total ram usage:        0 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    4
  3556 ;; This function calls:
  3557 ;;		_WriteCtrl
  3558 ;; This function is called by:
  3559 ;;		_adcToLcd
  3560 ;;		_hmi_out
  3561 ;;		_InitLCD
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text26
  3566  001300                     __ptext26:
  3567                           	opt stack 0
  3568  001300                     _clear_lcd:
  3569                           	opt stack 25
  3570                           
  3571                           ;lcd.c: 7: WriteCtrl(0x01);
  3572                           
  3573                           ;incstack = 0
  3574  001300  0E01               	movlw	1
  3575  001302  EC5B  F009         	call	_WriteCtrl
  3576  001306  0012               	return		;funcret
  3577  001308                     __end_of_clear_lcd:
  3578                           	opt stack 0
  3579                           tblptru	equ	0xFF8
  3580                           tblptrh	equ	0xFF7
  3581                           tblptrl	equ	0xFF6
  3582                           tablat	equ	0xFF5
  3583                           prodh	equ	0xFF4
  3584                           prodl	equ	0xFF3
  3585                           postinc2	equ	0xFDE
  3586                           postdec2	equ	0xFDD
  3587                           fsr2h	equ	0xFDA
  3588                           fsr2l	equ	0xFD9
  3589                           status	equ	0xFD8
  3590                           
  3591 ;; *************** function _WriteCtrl *****************
  3592 ;; Defined at:
  3593 ;;		line 99 in file "lcd.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;  value           1    wreg     unsigned char 
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;  value           1    5[COMRAM] unsigned char 
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  1    wreg      void 
  3600 ;; Registers used:
  3601 ;;		wreg, status,2, status,0, cstack
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3607 ;;      Params:         0       0       0       0       0       0       0
  3608 ;;      Locals:         1       0       0       0       0       0       0
  3609 ;;      Temps:          0       0       0       0       0       0       0
  3610 ;;      Totals:         1       0       0       0       0       0       0
  3611 ;;Total ram usage:        1 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; Hardware stack levels required when called:    3
  3614 ;; This function calls:
  3615 ;;		_WriteCommon
  3616 ;;		_delay
  3617 ;; This function is called by:
  3618 ;;		_clear_lcd
  3619 ;;		_InitLCD
  3620 ;;		_goto_xy
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text27
  3625  0012B6                     __ptext27:
  3626                           	opt stack 0
  3627  0012B6                     _WriteCtrl:
  3628                           	opt stack 25
  3629                           
  3630                           ;incstack = 0
  3631                           ;WriteCtrl@value stored from wreg
  3632  0012B6  6E06               	movwf	WriteCtrl@value,c
  3633                           
  3634                           ;lcd.c: 101: PORTCbits.RC0 = 0;
  3635  0012B8  9082               	bcf	3970,0,c	;volatile
  3636                           
  3637                           ;lcd.c: 102: delay(1);
  3638  0012BA  0E00               	movlw	0
  3639  0012BC  6E02               	movwf	delay@x+1,c
  3640  0012BE  0E01               	movlw	1
  3641  0012C0  6E01               	movwf	delay@x,c
  3642  0012C2  ECEF  F008         	call	_delay	;wreg free
  3643                           
  3644                           ;lcd.c: 103: WriteCommon( value );
  3645  0012C6  5006               	movf	WriteCtrl@value,w,c
  3646  0012C8  EC98  F008         	call	_WriteCommon
  3647  0012CC  0012               	return		;funcret
  3648  0012CE                     __end_of_WriteCtrl:
  3649                           	opt stack 0
  3650                           tblptru	equ	0xFF8
  3651                           tblptrh	equ	0xFF7
  3652                           tblptrl	equ	0xFF6
  3653                           tablat	equ	0xFF5
  3654                           prodh	equ	0xFF4
  3655                           prodl	equ	0xFF3
  3656                           postinc2	equ	0xFDE
  3657                           postdec2	equ	0xFDD
  3658                           fsr2h	equ	0xFDA
  3659                           fsr2l	equ	0xFD9
  3660                           status	equ	0xFD8
  3661                           
  3662 ;; *************** function _WriteCommon *****************
  3663 ;; Defined at:
  3664 ;;		line 120 in file "lcd.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;  value           1    wreg     unsigned char 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  value           1    4[COMRAM] unsigned char 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      void 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3678 ;;      Params:         0       0       0       0       0       0       0
  3679 ;;      Locals:         1       0       0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0
  3681 ;;      Totals:         1       0       0       0       0       0       0
  3682 ;;Total ram usage:        1 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    2
  3685 ;; This function calls:
  3686 ;;		_delay
  3687 ;;		_pulse_enable
  3688 ;; This function is called by:
  3689 ;;		_WriteCtrl
  3690 ;;		_WriteData
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text28
  3695  001130                     __ptext28:
  3696                           	opt stack 0
  3697  001130                     _WriteCommon:
  3698                           	opt stack 25
  3699                           
  3700                           ;incstack = 0
  3701                           ;WriteCommon@value stored from wreg
  3702  001130  6E05               	movwf	WriteCommon@value,c
  3703                           
  3704                           ;lcd.c: 122: delay(1);
  3705  001132  0E00               	movlw	0
  3706  001134  6E02               	movwf	delay@x+1,c
  3707  001136  0E01               	movlw	1
  3708  001138  6E01               	movwf	delay@x,c
  3709  00113A  ECEF  F008         	call	_delay	;wreg free
  3710                           
  3711                           ;lcd.c: 124: PORTD = ((value >> 4) & 0x0F);
  3712  00113E  3805               	swapf	WriteCommon@value,w,c
  3713  001140  0B0F               	andlw	15
  3714  001142  0B0F               	andlw	15
  3715  001144  6E83               	movwf	3971,c	;volatile
  3716                           
  3717                           ;lcd.c: 125: pulse_enable();
  3718  001146  EC67  F009         	call	_pulse_enable	;wreg free
  3719                           
  3720                           ;lcd.c: 126: delay(5);
  3721  00114A  0E00               	movlw	0
  3722  00114C  6E02               	movwf	delay@x+1,c
  3723  00114E  0E05               	movlw	5
  3724  001150  6E01               	movwf	delay@x,c
  3725  001152  ECEF  F008         	call	_delay	;wreg free
  3726                           
  3727                           ;lcd.c: 128: PORTD = (value & 0x0F);
  3728  001156  5005               	movf	WriteCommon@value,w,c
  3729  001158  0B0F               	andlw	15
  3730  00115A  6E83               	movwf	3971,c	;volatile
  3731                           
  3732                           ;lcd.c: 129: pulse_enable();
  3733  00115C  EC67  F009         	call	_pulse_enable	;wreg free
  3734                           
  3735                           ;lcd.c: 131: delay(1);
  3736  001160  0E00               	movlw	0
  3737  001162  6E02               	movwf	delay@x+1,c
  3738  001164  0E01               	movlw	1
  3739  001166  6E01               	movwf	delay@x,c
  3740  001168  ECEF  F008         	call	_delay	;wreg free
  3741  00116C  0012               	return		;funcret
  3742  00116E                     __end_of_WriteCommon:
  3743                           	opt stack 0
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           prodh	equ	0xFF4
  3749                           prodl	equ	0xFF3
  3750                           postinc2	equ	0xFDE
  3751                           postdec2	equ	0xFDD
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8
  3755                           
  3756 ;; *************** function _pulse_enable *****************
  3757 ;; Defined at:
  3758 ;;		line 113 in file "lcd.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;		None
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  1    wreg      void 
  3765 ;; Registers used:
  3766 ;;		wreg, status,2, status,0, cstack
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3772 ;;      Params:         0       0       0       0       0       0       0
  3773 ;;      Locals:         0       0       0       0       0       0       0
  3774 ;;      Temps:          0       0       0       0       0       0       0
  3775 ;;      Totals:         0       0       0       0       0       0       0
  3776 ;;Total ram usage:        0 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; Hardware stack levels required when called:    1
  3779 ;; This function calls:
  3780 ;;		_delay
  3781 ;; This function is called by:
  3782 ;;		_InitLCD
  3783 ;;		_WriteCommon
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text29
  3788  0012CE                     __ptext29:
  3789                           	opt stack 0
  3790  0012CE                     _pulse_enable:
  3791                           	opt stack 25
  3792                           
  3793                           ;lcd.c: 115: PORTCbits.RC1 = 1;
  3794                           
  3795                           ;incstack = 0
  3796  0012CE  8282               	bsf	3970,1,c	;volatile
  3797                           
  3798                           ;lcd.c: 116: delay(2);
  3799  0012D0  0E00               	movlw	0
  3800  0012D2  6E02               	movwf	delay@x+1,c
  3801  0012D4  0E02               	movlw	2
  3802  0012D6  6E01               	movwf	delay@x,c
  3803  0012D8  ECEF  F008         	call	_delay	;wreg free
  3804                           
  3805                           ;lcd.c: 117: PORTCbits.RC1 = 0;
  3806  0012DC  9282               	bcf	3970,1,c	;volatile
  3807  0012DE  0012               	return		;funcret
  3808  0012E0                     __end_of_pulse_enable:
  3809                           	opt stack 0
  3810                           tblptru	equ	0xFF8
  3811                           tblptrh	equ	0xFF7
  3812                           tblptrl	equ	0xFF6
  3813                           tablat	equ	0xFF5
  3814                           prodh	equ	0xFF4
  3815                           prodl	equ	0xFF3
  3816                           postinc2	equ	0xFDE
  3817                           postdec2	equ	0xFDD
  3818                           fsr2h	equ	0xFDA
  3819                           fsr2l	equ	0xFD9
  3820                           status	equ	0xFD8
  3821                           
  3822 ;; *************** function _delay *****************
  3823 ;; Defined at:
  3824 ;;		line 219 in file "hmi.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;  x               2    0[COMRAM] int 
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;  i               2    2[COMRAM] int 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, status,2, status,0
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3838 ;;      Params:         2       0       0       0       0       0       0
  3839 ;;      Locals:         2       0       0       0       0       0       0
  3840 ;;      Temps:          0       0       0       0       0       0       0
  3841 ;;      Totals:         4       0       0       0       0       0       0
  3842 ;;Total ram usage:        4 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; This function calls:
  3845 ;;		Nothing
  3846 ;; This function is called by:
  3847 ;;		_main
  3848 ;;		_adcToLcd
  3849 ;;		_hmi_out
  3850 ;;		_init_adc
  3851 ;;		_InitLCD
  3852 ;;		_WriteLCD
  3853 ;;		_WriteCtrl
  3854 ;;		_WriteData
  3855 ;;		_pulse_enable
  3856 ;;		_WriteCommon
  3857 ;;		_get_input
  3858 ;;		_IQS333_setup
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           	psect	text30
  3863  0011DE                     __ptext30:
  3864                           	opt stack 0
  3865  0011DE                     _delay:
  3866                           	opt stack 29
  3867                           
  3868                           ;incstack = 0
  3869  0011DE  BE02               	btfsc	delay@x+1,7,c
  3870  0011E0  0012               	return	
  3871  0011E2  5002               	movf	delay@x+1,w,c
  3872  0011E4  E104               	bnz	l1845
  3873  0011E6  0E02               	movlw	2
  3874  0011E8  5C01               	subwf	delay@x,w,c
  3875  0011EA  A0D8               	btfss	status,0,c
  3876  0011EC  0012               	return	
  3877  0011EE                     l1845:
  3878                           
  3879                           ;hmi.c: 223: {
  3880                           ;hmi.c: 224: for (i=0;i<=110;i++);
  3881  0011EE  0E00               	movlw	0
  3882  0011F0  6E04               	movwf	delay@i+1,c
  3883  0011F2  0E00               	movlw	0
  3884  0011F4  6E03               	movwf	delay@i,c
  3885  0011F6                     l1847:
  3886  0011F6  BE04               	btfsc	delay@i+1,7,c
  3887  0011F8  D006               	goto	l131
  3888  0011FA  5004               	movf	delay@i+1,w,c
  3889  0011FC  E107               	bnz	l1855
  3890  0011FE  0E6F               	movlw	111
  3891  001200  5C03               	subwf	delay@i,w,c
  3892  001202  B0D8               	btfsc	status,0,c
  3893  001204  D003               	goto	u1150
  3894  001206                     l131:
  3895  001206  4A03               	infsnz	delay@i,f,c
  3896  001208  2A04               	incf	delay@i+1,f,c
  3897  00120A  D7F5               	goto	l1847
  3898  00120C                     u1150:
  3899  00120C                     l1855:
  3900  00120C  0601               	decf	delay@x,f,c
  3901  00120E  A0D8               	btfss	status,0,c
  3902  001210  0602               	decf	delay@x+1,f,c
  3903  001212  D7E5               	goto	_delay
  3904  001214                     __end_of_delay:
  3905                           	opt stack 0
  3906                           tblptru	equ	0xFF8
  3907                           tblptrh	equ	0xFF7
  3908                           tblptrl	equ	0xFF6
  3909                           tablat	equ	0xFF5
  3910                           prodh	equ	0xFF4
  3911                           prodl	equ	0xFF3
  3912                           postinc2	equ	0xFDE
  3913                           postdec2	equ	0xFDD
  3914                           fsr2h	equ	0xFDA
  3915                           fsr2l	equ	0xFD9
  3916                           status	equ	0xFD8
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           postinc2	equ	0xFDE
  3924                           postdec2	equ	0xFDD
  3925                           fsr2h	equ	0xFDA
  3926                           fsr2l	equ	0xFD9
  3927                           status	equ	0xFD8
  3928                           
  3929                           	psect	rparam
  3930  0000                     tblptru	equ	0xFF8
  3931                           tblptrh	equ	0xFF7
  3932                           tblptrl	equ	0xFF6
  3933                           tablat	equ	0xFF5
  3934                           prodh	equ	0xFF4
  3935                           prodl	equ	0xFF3
  3936                           postinc2	equ	0xFDE
  3937                           postdec2	equ	0xFDD
  3938                           fsr2h	equ	0xFDA
  3939                           fsr2l	equ	0xFD9
  3940                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    27
    Data        4
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     92      94
    BANK0           160      0       6
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    WriteLCD@message	PTR unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _init_adc->_delay
    _hmi_out->_display_temp
    _goto_xy->_WriteCtrl
    _display_temp->_get_temp
    _get_temp->___fttol
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___awdiv
    ___fttol->_log
    _display_speed->_integerToLcd
    _display_mode->_WriteLCD
    _adcToLcd->_integerToLcd
    _integerToLcd->___wmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    _WriteLCD->_WriteData
    _WriteData->_WriteCommon
    _InitLCD->_WriteCtrl
    _clear_lcd->_WriteCtrl
    _WriteCtrl->_WriteCommon
    _WriteCommon->_delay
    _pulse_enable->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  153863
                                             90 COMRAM     2     2      0
                            _InitLCD
                      _SerialReceive
                           _adcToLcd
                              _delay
                            _hmi_out
                           _init_adc
 ---------------------------------------------------------------------------------
 (1) _init_adc                                             0     0      0    2599
                              _delay
 ---------------------------------------------------------------------------------
 (1) _hmi_out                                              0     0      0   95277
                           _WriteLCD
                          _clear_lcd
                              _delay
                       _display_mode
                      _display_speed
                       _display_temp
                            _goto_xy
 ---------------------------------------------------------------------------------
 (2) _goto_xy                                              2     1      1    8159
                                              6 COMRAM     2     1      1
                          _WriteCtrl
 ---------------------------------------------------------------------------------
 (2) _display_temp                                         2     2      0   43778
                                             88 COMRAM     2     2      0
                          _WriteData
                           _get_temp
                       _integerToLcd
 ---------------------------------------------------------------------------------
 (3) _get_temp                                            11     9      2   24814
                                             77 COMRAM    11     9      2
                            ___awdiv
                           ___awtoft
                            ___fttol
                             ___wmul
                           _adc_poll
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   19547
                                             57 COMRAM     5     2      3
                            ___awdiv (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     376
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7    8761
                                             45 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             15     9      6    3461
                                             18 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             12     6      6    3975
                                             33 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    2670
                                             14 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2427
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     328
                                             62 COMRAM    15    11      4
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (2) _display_speed                                        0     0      0   11078
                       _integerToLcd
 ---------------------------------------------------------------------------------
 (2) _display_mode                                         0     0      0   10900
                           _WriteLCD
 ---------------------------------------------------------------------------------
 (1) _adcToLcd                                             2     2      0   32463
                                             26 COMRAM     2     2      0
                           _WriteLCD
                           _adc_poll
                          _clear_lcd
                              _delay
                       _integerToLcd
 ---------------------------------------------------------------------------------
 (3) _integerToLcd                                         6     4      2   11078
                                             20 COMRAM     6     4      2
                          _WriteData
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     919
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1212
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _adc_poll                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _WriteLCD                                             5     3      2   10900
                                              6 COMRAM     5     3      2
                          _WriteData
                              _delay
 ---------------------------------------------------------------------------------
 (4) _WriteData                                            1     1      0    7863
                                              5 COMRAM     1     1      0
                        _WriteCommon
                              _delay
 ---------------------------------------------------------------------------------
 (1) _SerialReceive                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              0     0      0   20924
                          _WriteCtrl
                          _clear_lcd
                              _delay
                       _pulse_enable
 ---------------------------------------------------------------------------------
 (2) _clear_lcd                                            0     0      0    7863
                          _WriteCtrl
 ---------------------------------------------------------------------------------
 (3) _WriteCtrl                                            1     1      0    7863
                                              5 COMRAM     1     1      0
                        _WriteCommon
                              _delay
 ---------------------------------------------------------------------------------
 (4) _WriteCommon                                          1     1      0    5242
                                              4 COMRAM     1     1      0
                              _delay
                       _pulse_enable
 ---------------------------------------------------------------------------------
 (5) _pulse_enable                                         0     0      0    2599
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                4     2      2    2599
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitLCD
     _WriteCtrl
       _WriteCommon
         _delay
         _pulse_enable
           _delay
       _delay
     _clear_lcd
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
     _delay
     _pulse_enable
       _delay
   _SerialReceive
   _adcToLcd
     _WriteLCD
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       _delay
     _adc_poll
     _clear_lcd
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
     _delay
     _integerToLcd
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
   _delay
   _hmi_out
     _WriteLCD
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       _delay
     _clear_lcd
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
     _delay
     _display_mode
       _WriteLCD
         _WriteData
           _WriteCommon
             _delay
             _pulse_enable
               _delay
           _delay
         _delay
     _display_speed
       _integerToLcd
         _WriteData
           _WriteCommon
             _delay
             _pulse_enable
               _delay
           _delay
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
     _display_temp
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       _get_temp
         ___awdiv
           ___awmod (ARG)
         ___awtoft
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___fttol
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           _log (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
             _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
         _adc_poll
         _log
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
           _frexp (ARG)
       _integerToLcd
         _WriteData
           _WriteCommon
             _delay
             _pulse_enable
               _delay
           _delay
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
     _goto_xy
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
   _init_adc
     _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       6       5        3.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5C      5E       1       98.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64      15        0.0%
DATA                 0      0      64       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Oct 22 15:26:45 2017

            _SSPSTATbits 000FC7                       l89 10CC                       l98 10E0  
           ___awdiv@sign 000C      ___wmul@multiplicand 0011             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
   __size_of_WriteCommon 003E             ___ftadd@exp1 002D             ___ftadd@exp2 002C  
           ___ftadd@sign 002B                      l131 1206                      l125 0E08  
                    l136 1252                      l334 101C                      l603 0686  
                    l532 0F72                      l612 0716                      l533 0F7C  
                    l525 0F24                      l541 0FCA                      l534 0F8A  
                    l526 0F34                      l542 0FC2                      l630 078A  
                    l631 07BA                      l607 06B0                      l528 0F52  
                    l529 0F4A                      l545 0FE2                      l553 1182  
                    l617 070C                      l546 0FEC                      l538 0FA8  
                    l626 074A                      l618 0702                      l547 0FFA  
                    l539 0FB4                      l627 0740                      l651 0926  
                    l572 0D66                      l573 0D5C                      l629 076E  
                    l653 094E                      l654 0980                      l575 0D9A  
                    l655 0990                      l743 07FC                      l680 0AB8  
                    l672 0A1E                      l576 0D84                      l681 0AAC  
                    l657 09A8                      l745 081E                      l674 0A94  
                    l578 0DC2                      l658 09B8                      l683 0AD4  
                    l675 0A84                      l579 0DB8                      l948 0BA2  
                    l956 0EA8                      l949 0B26             __CFG_CPB$OFF 000000  
          ?_display_mode 0001             __CFG_CPD$OFF 000000            ?_display_temp 0001  
                    _log 07E0             __CFG_BORV$18 000000             ___awmod@sign 0006  
           _pulse_enable 12CE             __CFG_LVP$OFF 000000                     l2231 1014  
                   l1845 11EE                     l1855 120C                     l1847 11F6  
                   ?_log 003A                     STR_1 0623                     STR_2 0628  
                   STR_3 062D                     STR_4 061C                     u1220 0DCC  
                   u1150 120C                     u1320 06A2                     u1251 0644  
                   u1180 0D4E                     u1420 0752                     u2060 10D6  
                   u1261 0658                     u1350 06E0                     u1290 0678  
                   u1620 0F56                     u1540 0ED0                     u1461 090E  
                   u1390 071E                     u1711 0A02                     u1481 0936  
                   u1730 0A3C                     u1548 0ED2                     u1735 0A34  
                   u1680 0FCE                     u1770 0ABE                     _RCIF 007CF5  
                   _TRMT 007D61                     _TXIF 007CF4           ?_display_speed 0001  
                   _main 10B2             ___ftpack@arg 0001                     _mode 0062  
           ___ftpack@exp 0004                     fsr2h 000FDA                     fsr2l 000FD9  
                   log@x 003A                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 0020             ___param_bank 000000             ___ftmul@sign 0021  
        __end_of_InitLCD 0C8A             ___fttol@exp1 004D             ___fttol@lval 0049  
                  ??_log 003D    __end_of_SerialReceive 1300           ??_display_mode 000C  
                  ?_main 0001           ??_display_temp 0059          __end_of___awdiv 0F94  
        __end_of___ftadd 07E0          __end_of___awmod 1004                    _ANSEL 000F7E  
        __end_of___ftmul 09F2          ___awdiv@divisor 0009          __end_of___fttol 0AE6  
        ___awdiv@counter 000B                    _RCREG 000FAE                    _RCSTA 000FAB  
                  _SPBRG 000FAF                    _PORTD 000F83                    _TRISC 000F94  
                  _TRISD 000F95                    _TXREG 000FAD                    _TXSTA 000FAC  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000            ___awtoft@sign 0012  
        __end_of_hmi_out 0E80                    _delay 11DE                    _frexp 0E80  
                  _errno 0060          __end_of_goto_xy 129E            ___ftpack@sign 0005  
                  _speed 005D                    _state 0064                    tablat 000FF5  
                  status 000FD8           __CFG_HFOFST$ON 000000           __CFG_PBADEN$ON 000000  
        __initialization 106A              log@exponent 003D             __end_of_main 10F2  
        integerToLcd@num 0015                   ??_main 005B            ___fttol@sign1 0048  
          __activetblptr 000001                   ?_delay 0001                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   ?_frexp 0001  
        ??_display_speed 001B                   _ADRESH 000FC4           WriteData@value 0006  
       __end_of_adcToLcd 11DE         ___awdiv@dividend 0007         __end_of___awtoft 11A6  
       __end_of___ftpack 0DEC         __end_of_WriteLCD 106A         __end_of_adc_poll 130E  
         __CFG_WDTEN$OFF 000000                   _SSPADD 000FC8                   _SSPBUF 000FC9  
              ??_InitLCD 0007           __CFG_XINST$OFF 000000         __end_of_get_temp 12F8  
                 ___wmul 1260                ??___awdiv 000B                ??___ftadd 0028  
              ??___awmod 0005                ??___ftmul 0019                ??___fttol 0043  
       __end_of_init_adc 1130                   delay@i 0003                   delay@x 0001  
       ___awdiv@quotient 000D          ___awmod@divisor 0003          ___awmod@counter 0005  
  ___ftmul@f3_as_product 001D            ?_integerToLcd 0015                ??_hmi_out 005B  
           __pdataCOMRAM 005D                ??_goto_xy 0008             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
          main@state_old 005B         __end_oflog@coeff 061C               __accesstop 0060  
__end_of__initialization 10A4           WriteCtrl@value 0006               ___ftadd@f1 0022  
             ___ftadd@f2 0025       __size_of_WriteData 0018       __size_of_WriteCtrl 0018  
   __end_of_display_mode 1260     __end_of_display_temp 123A             eval_poly@res 0037  
          ___rparam_used 000001               ___awtoft@c 000F               ___ftmul@f1 0013  
             ___ftmul@f2 0016               ___fttol@f1 003F           __pcstackCOMRAM 0001  
           __pidataBANK0 1310            __end_of_delay 1214            __end_of_frexp 0F10  
     __size_of_clear_lcd 0008           ??_integerToLcd 0017         integerToLcd@ones 001A  
       integerToLcd@tens 0019                  ??_delay 0003                  ??_frexp 0006  
             __pbssBANK0 0060       __size_of_eval_poly 00D2                  ?___wmul 000F  
          ??_WriteCommon 0005           get_temp@logres 0055           get_temp@result 0057  
              ?_adcToLcd 0001                ?___awtoft 000F                ?___ftpack 0001  
              ?_WriteLCD 0007                ?_adc_poll 0001        __end_of_WriteData 12B6  
      __end_of_WriteCtrl 12CE                ?_get_temp 004E                ?_init_adc 0001  
      __end_of_clear_lcd 1308                  _InitLCD 0BB8                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 0F10                  ___ftadd 0634  
                ___awmod 0F94          __size_of___wmul 0026                  ___ftmul 08FE  
                ___fttol 09F2             __psmallconst 0600          __CFG_STVREN$OFF 000000  
             ??_adcToLcd 001B                  __pcinit 106A               ??___awtoft 0012  
             ??___ftpack 0006                _ANSELbits 000F7E               ??_WriteLCD 0009  
      __end_of_eval_poly 0BB8                  __ramtop 0600                  __ptext0 10B2  
                __ptext1 10F2                  __ptext2 0DEC                  __ptext3 1286  
                __ptext4 1214                  __ptext5 12EE                  __ptext6 07E0  
                __ptext7 0E80                  __ptext8 0AE6                  __ptext9 08FE  
             ??_adc_poll 0001                  _hmi_out 0DEC      __end_of_WriteCommon 116E  
           __size_of_log 011E                  _goto_xy 1286         ___awmod@dividend 0001  
  __size_of_display_mode 0026               ??_get_temp 0050    __size_of_display_temp 0026  
   end_of_initialization 10A4               ??_init_adc 0005     __end_of_integerToLcd 0D3E  
 __size_of_SerialReceive 0008                  postdec2 000FDD                  postinc2 000FDE  
              _PORTCbits 000F82                _PORTEbits 000F84             _display_mode 123A  
           _display_temp 1214                _TRISAbits 000F92                _TRISCbits 000F94  
              _TRISEbits 000F96    __end_of_display_speed 12EE              ___ftmul@exp 001C  
            _WriteCommon 1130           __end_of___wmul 1286              _BAUDCONbits 000FB8  
          __pidataCOMRAM 130E            _SerialReceive 12F8            ?_pulse_enable 0001  
    start_initialization 106A               eval_poly@d 0031               eval_poly@n 0033  
             eval_poly@x 002E              __end_of_log 08FE               frexp@value 0001  
               ??___wmul 0013              __pdataBANK0 0064         __CFG_LPT1OSC$OFF 000000  
         ?_SerialReceive 0001           ??_pulse_enable 0005        __size_of_adcToLcd 0038  
      __size_of___awtoft 0038        __size_of___ftpack 00AE        __size_of_WriteLCD 0066  
      __size_of_adc_poll 0006                _WriteData 129E                _WriteCtrl 12B6  
  __size_of_integerToLcd 00B4        __size_of_get_temp 000A                WriteLCD@i 000B  
               ?_InitLCD 0001        __size_of_init_adc 003E                _clear_lcd 1300  
      __CFG_CCP2MX$PORTC 000000                 ?___awdiv 0007                 ?___ftadd 0022  
               ?___awmod 0001                 ?___ftmul 0013                 ?___fttol 003F  
  integerToLcd@thousands 0017                 ?_hmi_out 0001              __smallconst 0600  
           _integerToLcd 0C8A                 ?_goto_xy 0007                _eval_poly 0AE6  
         adcToLcd@result 001B               ?_WriteData 0001               ?_WriteCtrl 0001  
         __size_of_delay 0036           __size_of_frexp 0090           ___wmul@product 0013  
               _PIR1bits 000F9E               ?_clear_lcd 0001         __CFG_WDTPS$32768 000000  
        ??_SerialReceive 0001               _ADCON0bits 000FC2        ___wmul@multiplier 000F  
             ?_eval_poly 002E                frexp@eptr 0004     __end_of_pulse_enable 12E0  
       __size_of_InitLCD 00D2                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0600       __CFG_BOREN$SBORDIS 000000             ?_WriteCommon 0001  
       __size_of___awdiv 0084         __size_of___ftadd 01AC         __size_of___awmod 0070  
       __size_of___ftmul 00F4         __size_of___fttol 00F4                 _adcToLcd 11A6  
               ___awtoft 116E                 ___ftpack 0D3E                 _WriteLCD 1004  
               _adc_poll 1308     integerToLcd@hundreds 0018         __size_of_hmi_out 0094  
       __size_of_goto_xy 0018              ??_WriteData 0006              ??_WriteCtrl 0006  
               __ptext10 0634                 __ptext11 116E                 __ptext20 0F10  
               __ptext12 0D3E                 __ptext21 1308                 __ptext13 09F2  
               __ptext30 11DE                 __ptext22 1004                 __ptext14 12E0  
               __ptext23 129E                 __ptext15 123A                 __ptext24 12F8  
               __ptext16 11A6                 __ptext25 0BB8                 __ptext17 0C8A  
               __ptext26 1300                 __ptext18 1260                 __ptext27 12B6  
               __ptext19 0F94                 __ptext28 1130                 __ptext29 12CE  
               _get_temp 12EE                 _init_adc 10F2            __size_of_main 0040  
            ??_clear_lcd 0007   __size_of_display_speed 000E                 log@coeff 0601  
            ??_eval_poly 0035         display_temp@temp 0059                 goto_xy@x 0008  
               goto_xy@y 0007            _get_temp$1712 0052               _OSCCONbits 000FD3  
       WriteCommon@value 0005              _SSPCON1bits 000FC6              _SSPCON2bits 000FC5  
  __size_of_pulse_enable 0012            _display_speed 12E0        __CFG_FOSC$INTIO67 000000  
        WriteLCD@message 0007  
