

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Oct 22 16:34:27 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.44
    52                           ; Generated 14/09/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F45K20 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataCOMRAM
    87  0013A2                     __pidataCOMRAM:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _state
    91  0013A2  0001               	dw	1
    92                           
    93                           ;initializer for _speed
    94  0013A4  0001               	dw	1
    95                           
    96                           	psect	smallconst
    97  000600                     __psmallconst:
    98                           	opt stack 0
    99  000600  00                 	db	0
   100  000601                     log@coeff:
   101                           	opt stack 0
   102  000601  00                 	db	0
   103  000602  00                 	db	0
   104  000603  00                 	db	0
   105  000604  00                 	db	0
   106  000605  80                 	db	128
   107  000606  3F                 	db	63
   108  000607  F0                 	db	240
   109  000608  FF                 	db	255
   110  000609  BE                 	db	190
   111  00060A  E2                 	db	226
   112  00060B  A9                 	db	169
   113  00060C  3E                 	db	62
   114  00060D  83                 	db	131
   115  00060E  76                 	db	118
   116  00060F  BE                 	db	190
   117  000610  AE                 	db	174
   118  000611  2B                 	db	43
   119  000612  3E                 	db	62
   120  000613  3C                 	db	60
   121  000614  C3                 	db	195
   122  000615  BD                 	db	189
   123  000616  D2                 	db	210
   124  000617  13                 	db	19
   125  000618  3D                 	db	61
   126  000619  78                 	db	120
   127  00061A  D3                 	db	211
   128  00061B  BB                 	db	187
   129  00061C                     __end_oflog@coeff:
   130                           	opt stack 0
   131  0000                     _PORTD	set	3971
   132  0000                     _ADCON0bits	set	4034
   133  0000                     _ADCON2	set	4032
   134  0000                     _ADCON1	set	4033
   135  0000                     _ANSELbits	set	3966
   136  0000                     _TRISAbits	set	3986
   137  0000                     _SSPCON2bits	set	4037
   138  0000                     _SSPBUF	set	4041
   139  0000                     _PORTEbits	set	3972
   140  0000                     _SSPCON1bits	set	4038
   141  0000                     _SSPSTATbits	set	4039
   142  0000                     _SSPADD	set	4040
   143  0000                     _ADRESH	set	4036
   144  0000                     _ADCON0	set	4034
   145  0000                     _PORTCbits	set	3970
   146  0000                     _TRISEbits	set	3990
   147  0000                     _ANSEL	set	3966
   148  0000                     _TRISD	set	3989
   149  0000                     _TRISC	set	3988
   150  0000                     _PIR1bits	set	3998
   151  0000                     _OSCCONbits	set	4051
   152  0000                     _RCREG	set	4014
   153  0000                     _TXREG	set	4013
   154  0000                     _INTCONbits	set	4082
   155  0000                     _PIE1bits	set	3997
   156  0000                     _SPBRG	set	4015
   157  0000                     _BAUDCONbits	set	4024
   158  0000                     _RCSTA	set	4011
   159  0000                     _TXSTA	set	4012
   160  0000                     _TRISCbits	set	3988
   161  0000                     _RCIF	set	31989
   162  0000                     _TRMT	set	32097
   163  0000                     _TXIF	set	31988
   164  00061C                     STR_4:
   165  00061C  4D                 	db	77	;'M'
   166  00061D  61                 	db	97	;'a'
   167  00061E  6E                 	db	110	;'n'
   168  00061F  75                 	db	117	;'u'
   169  000620  61                 	db	97	;'a'
   170  000621  6C                 	db	108	;'l'
   171  000622  00                 	db	0
   172  000623                     STR_1:
   173  000623  41                 	db	65	;'A'
   174  000624  44                 	db	68	;'D'
   175  000625  43                 	db	67	;'C'
   176  000626  3A                 	db	58	;':'
   177  000627  00                 	db	0
   178  000628                     STR_2:
   179  000628  49                 	db	73	;'I'
   180  000629  64                 	db	100	;'d'
   181  00062A  6C                 	db	108	;'l'
   182  00062B  65                 	db	101	;'e'
   183  00062C  00                 	db	0
   184  00062D                     STR_3:
   185  00062D  41                 	db	65	;'A'
   186  00062E  75                 	db	117	;'u'
   187  00062F  74                 	db	116	;'t'
   188  000630  6F                 	db	111	;'o'
   189  000631  00                 	db	0
   190                           
   191                           ; #config settings
   192  000632  00                 	db	0	; dummy byte at the end
   193  0000                     
   194                           	psect	cinit
   195  00119C                     __pcinit:
   196                           	opt stack 0
   197  00119C                     start_initialization:
   198                           	opt stack 0
   199  00119C                     __initialization:
   200                           	opt stack 0
   201                           
   202                           ; Initialize objects allocated to COMRAM (4 bytes)
   203                           ; load TBLPTR registers with __pidataCOMRAM
   204  00119C  0EA2               	movlw	low __pidataCOMRAM
   205  00119E  6EF6               	movwf	tblptrl,c
   206  0011A0  0E13               	movlw	high __pidataCOMRAM
   207  0011A2  6EF7               	movwf	tblptrh,c
   208  0011A4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   209  0011A6  6EF8               	movwf	tblptru,c
   210  0011A8  EE00  F039         	lfsr	0,__pdataCOMRAM
   211  0011AC  EE10 F004          	lfsr	1,4
   212  0011B0                     copy_data0:
   213  0011B0  0009               	tblrd		*+
   214  0011B2  CFF5 FFEE          	movff	tablat,postinc0
   215  0011B6  50E5               	movf	postdec1,w,c
   216  0011B8  50E1               	movf	fsr1l,w,c
   217  0011BA  E1FA               	bnz	copy_data0
   218                           
   219                           ; Clear objects allocated to BANK0 (2 bytes)
   220  0011BC  0100               	movlb	0
   221  0011BE  6BA5               	clrf	(__pbssBANK0+1)& (0+255),b
   222  0011C0  6BA4               	clrf	__pbssBANK0& (0+255),b
   223                           
   224                           ; Clear objects allocated to COMRAM (2 bytes)
   225  0011C2  6A3E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   226  0011C4  6A3D               	clrf	__pbssCOMRAM& (0+255),c
   227  0011C6                     end_of_initialization:
   228                           	opt stack 0
   229  0011C6                     __end_of__initialization:
   230                           	opt stack 0
   231  0011C6  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   232  0011C8  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   233  0011CA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   234  0011CC  6EF8               	movwf	tblptru,c
   235  0011CE  0100               	movlb	0
   236  0011D0  EF3D  F009         	goto	_main	;jump to C main() function
   237                           tblptru	equ	0xFF8
   238                           tblptrh	equ	0xFF7
   239                           tblptrl	equ	0xFF6
   240                           tablat	equ	0xFF5
   241                           postinc0	equ	0xFEE
   242                           postdec1	equ	0xFE5
   243                           fsr1l	equ	0xFE1
   244                           
   245                           	psect	bssCOMRAM
   246  00003D                     __pbssCOMRAM:
   247                           	opt stack 0
   248  00003D                     _mode:
   249                           	opt stack 0
   250  00003D                     	ds	2
   251                           tblptru	equ	0xFF8
   252                           tblptrh	equ	0xFF7
   253                           tblptrl	equ	0xFF6
   254                           tablat	equ	0xFF5
   255                           postinc0	equ	0xFEE
   256                           postdec1	equ	0xFE5
   257                           fsr1l	equ	0xFE1
   258                           
   259                           	psect	dataCOMRAM
   260  000039                     __pdataCOMRAM:
   261                           	opt stack 0
   262  000039                     _state:
   263                           	opt stack 0
   264  000039                     	ds	2
   265  00003B                     _speed:
   266                           	opt stack 0
   267  00003B                     	ds	2
   268                           tblptru	equ	0xFF8
   269                           tblptrh	equ	0xFF7
   270                           tblptrl	equ	0xFF6
   271                           tablat	equ	0xFF5
   272                           postinc0	equ	0xFEE
   273                           postdec1	equ	0xFE5
   274                           fsr1l	equ	0xFE1
   275                           
   276                           	psect	bssBANK0
   277  0000A4                     __pbssBANK0:
   278                           	opt stack 0
   279  0000A4                     _errno:
   280                           	opt stack 0
   281  0000A4                     	ds	2
   282                           tblptru	equ	0xFF8
   283                           tblptrh	equ	0xFF7
   284                           tblptrl	equ	0xFF6
   285                           tablat	equ	0xFF5
   286                           postinc0	equ	0xFEE
   287                           postdec1	equ	0xFE5
   288                           fsr1l	equ	0xFE1
   289                           
   290                           	psect	cstackBANK0
   291  000060                     __pcstackBANK0:
   292                           	opt stack 0
   293  000060                     ??___ftmul:
   294  000060                     integerToLcd@thousands:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x0
   298  000060                     	ds	1
   299  000061                     integerToLcd@hundreds:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x1
   303  000061                     	ds	1
   304  000062                     integerToLcd@tens:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x2
   308  000062                     	ds	1
   309  000063                     integerToLcd@ones:
   310                           	opt stack 0
   311  000063                     ___ftmul@exp:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x3
   315  000063                     	ds	1
   316  000064                     ___ftmul@f3_as_product:
   317                           	opt stack 0
   318                           
   319                           ; 3 bytes @ 0x4
   320  000064                     	ds	3
   321  000067                     ___ftmul@cntr:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0x7
   325  000067                     	ds	1
   326  000068                     ___ftmul@sign:
   327                           	opt stack 0
   328                           
   329                           ; 1 bytes @ 0x8
   330  000068                     	ds	1
   331  000069                     ?___ftadd:
   332                           	opt stack 0
   333  000069                     ___ftadd@f1:
   334                           	opt stack 0
   335                           
   336                           ; 3 bytes @ 0x9
   337  000069                     	ds	3
   338  00006C                     ___ftadd@f2:
   339                           	opt stack 0
   340                           
   341                           ; 3 bytes @ 0xC
   342  00006C                     	ds	3
   343  00006F                     ??___ftadd:
   344                           
   345                           ; 1 bytes @ 0xF
   346  00006F                     	ds	3
   347  000072                     ___ftadd@sign:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0x12
   351  000072                     	ds	1
   352  000073                     ___ftadd@exp2:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x13
   356  000073                     	ds	1
   357  000074                     ___ftadd@exp1:
   358                           	opt stack 0
   359                           
   360                           ; 1 bytes @ 0x14
   361  000074                     	ds	1
   362  000075                     ?_eval_poly:
   363                           	opt stack 0
   364  000075                     eval_poly@x:
   365                           	opt stack 0
   366                           
   367                           ; 3 bytes @ 0x15
   368  000075                     	ds	3
   369  000078                     eval_poly@d:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x18
   373  000078                     	ds	2
   374  00007A                     eval_poly@n:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x1A
   378  00007A                     	ds	2
   379  00007C                     ??_eval_poly:
   380                           
   381                           ; 1 bytes @ 0x1C
   382  00007C                     	ds	2
   383  00007E                     eval_poly@res:
   384                           	opt stack 0
   385                           
   386                           ; 3 bytes @ 0x1E
   387  00007E                     	ds	3
   388  000081                     ?_log:
   389                           	opt stack 0
   390  000081                     log@x:
   391                           	opt stack 0
   392                           
   393                           ; 3 bytes @ 0x21
   394  000081                     	ds	3
   395  000084                     log@exponent:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x24
   399  000084                     	ds	2
   400  000086                     ?___fttol:
   401                           	opt stack 0
   402  000086                     ___fttol@f1:
   403                           	opt stack 0
   404                           
   405                           ; 3 bytes @ 0x26
   406  000086                     	ds	4
   407  00008A                     ??___fttol:
   408                           
   409                           ; 1 bytes @ 0x2A
   410  00008A                     	ds	5
   411  00008F                     ___fttol@sign1:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x2F
   415  00008F                     	ds	1
   416  000090                     ___fttol@lval:
   417                           	opt stack 0
   418                           
   419                           ; 4 bytes @ 0x30
   420  000090                     	ds	4
   421  000094                     ___fttol@exp1:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x34
   425  000094                     	ds	1
   426  000095                     ?_get_temp:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x35
   430  000095                     	ds	2
   431  000097                     ??_get_temp:
   432                           
   433                           ; 1 bytes @ 0x37
   434  000097                     	ds	2
   435  000099                     _get_temp$1821:
   436                           	opt stack 0
   437                           
   438                           ; 3 bytes @ 0x39
   439  000099                     	ds	3
   440  00009C                     get_temp@logres:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x3C
   444  00009C                     	ds	2
   445  00009E                     get_temp@result:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x3E
   449  00009E                     	ds	2
   450  0000A0                     display_temp@temp:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x40
   454  0000A0                     	ds	2
   455  0000A2                     main@state_old:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x42
   459  0000A2                     	ds	2
   460                           tblptru	equ	0xFF8
   461                           tblptrh	equ	0xFF7
   462                           tblptrl	equ	0xFF6
   463                           tablat	equ	0xFF5
   464                           postinc0	equ	0xFEE
   465                           postdec1	equ	0xFE5
   466                           fsr1l	equ	0xFE1
   467                           
   468                           	psect	cstackCOMRAM
   469  000001                     __pcstackCOMRAM:
   470                           	opt stack 0
   471  000001                     ?_strlen:
   472                           	opt stack 0
   473  000001                     strlen@s:
   474                           	opt stack 0
   475                           
   476                           ; 3 bytes @ 0x0
   477  000001                     	ds	3
   478  000004                     ??_strlen:
   479                           
   480                           ; 1 bytes @ 0x3
   481  000004                     	ds	2
   482  000006                     strlen@cp:
   483                           	opt stack 0
   484                           
   485                           ; 3 bytes @ 0x5
   486  000006                     	ds	3
   487  000009                     SerialTransmit@buffer:
   488                           	opt stack 0
   489                           
   490                           ; 3 bytes @ 0x8
   491  000009                     	ds	3
   492  00000C                     SerialTransmit@size:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0xB
   496  00000C                     	ds	2
   497  00000E                     ??_High_Priority_Interrupt:
   498                           
   499                           ; 1 bytes @ 0xD
   500  00000E                     	ds	18
   501  000020                     High_Priority_Interrupt@tempChar:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x1F
   505  000020                     	ds	1
   506  000021                     ?___awmod:
   507                           	opt stack 0
   508  000021                     ?___ftpack:
   509                           	opt stack 0
   510  000021                     ?_frexp:
   511                           	opt stack 0
   512  000021                     delay@x:
   513                           	opt stack 0
   514  000021                     ___awmod@dividend:
   515                           	opt stack 0
   516  000021                     ___ftpack@arg:
   517                           	opt stack 0
   518  000021                     frexp@value:
   519                           	opt stack 0
   520                           
   521                           ; 3 bytes @ 0x20
   522  000021                     	ds	2
   523  000023                     delay@i:
   524                           	opt stack 0
   525  000023                     ___awmod@divisor:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x22
   529  000023                     	ds	1
   530  000024                     ___ftpack@exp:
   531                           	opt stack 0
   532  000024                     frexp@eptr:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x23
   536  000024                     	ds	1
   537  000025                     WriteCommon@value:
   538                           	opt stack 0
   539  000025                     ___awmod@counter:
   540                           	opt stack 0
   541  000025                     ___ftpack@sign:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x24
   545  000025                     	ds	1
   546  000026                     ??___ftpack:
   547  000026                     ??_frexp:
   548  000026                     WriteCtrl@value:
   549                           	opt stack 0
   550  000026                     WriteData@value:
   551                           	opt stack 0
   552  000026                     ___awmod@sign:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x25
   556  000026                     	ds	1
   557  000027                     ?___awdiv:
   558                           	opt stack 0
   559  000027                     goto_xy@y:
   560                           	opt stack 0
   561  000027                     WriteLCD@message:
   562                           	opt stack 0
   563  000027                     ___awdiv@dividend:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x26
   567  000027                     	ds	1
   568  000028                     goto_xy@x:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x27
   572  000028                     	ds	1
   573  000029                     ??_WriteLCD:
   574  000029                     ___awdiv@divisor:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x28
   578  000029                     	ds	2
   579  00002B                     WriteLCD@i:
   580                           	opt stack 0
   581  00002B                     ___awdiv@counter:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x2A
   585  00002B                     	ds	1
   586  00002C                     ___awdiv@sign:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x2B
   590  00002C                     	ds	1
   591  00002D                     ___awdiv@quotient:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x2C
   595  00002D                     	ds	2
   596  00002F                     ?___wmul:
   597                           	opt stack 0
   598  00002F                     ?___awtoft:
   599                           	opt stack 0
   600  00002F                     ___wmul@multiplier:
   601                           	opt stack 0
   602  00002F                     ___awtoft@c:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x2E
   606  00002F                     	ds	2
   607  000031                     ___wmul@multiplicand:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x30
   611  000031                     	ds	1
   612  000032                     ___awtoft@sign:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x31
   616  000032                     	ds	1
   617  000033                     ?___ftmul:
   618                           	opt stack 0
   619  000033                     ___wmul@product:
   620                           	opt stack 0
   621  000033                     ___ftmul@f1:
   622                           	opt stack 0
   623                           
   624                           ; 3 bytes @ 0x32
   625  000033                     	ds	2
   626  000035                     integerToLcd@num:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x34
   630  000035                     	ds	1
   631  000036                     ___ftmul@f2:
   632                           	opt stack 0
   633                           
   634                           ; 3 bytes @ 0x35
   635  000036                     	ds	1
   636  000037                     adcToLcd@result:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x36
   640  000037                     	ds	2
   641  000039                     tblptru	equ	0xFF8
   642                           tblptrh	equ	0xFF7
   643                           tblptrl	equ	0xFF6
   644                           tablat	equ	0xFF5
   645                           postinc0	equ	0xFEE
   646                           postdec1	equ	0xFE5
   647                           fsr1l	equ	0xFE1
   648                           
   649                           ; 1 bytes @ 0x38
   650 ;;
   651 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   652 ;;
   653 ;; *************** function _main *****************
   654 ;; Defined at:
   655 ;;		line 91 in file "hmi.c"
   656 ;; Parameters:    Size  Location     Type
   657 ;;		None
   658 ;; Auto vars:     Size  Location     Type
   659 ;;  state_old       2   66[BANK0 ] int 
   660 ;; Return value:  Size  Location     Type
   661 ;;                  2  111[None  ] int 
   662 ;; Registers used:
   663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   669 ;;      Params:         0       0       0       0       0       0       0
   670 ;;      Locals:         0       2       0       0       0       0       0
   671 ;;      Temps:          0       0       0       0       0       0       0
   672 ;;      Totals:         0       2       0       0       0       0       0
   673 ;;Total ram usage:        2 bytes
   674 ;; Hardware stack levels required when called:   10
   675 ;; This function calls:
   676 ;;		_InitLCD
   677 ;;		_SerialReceive
   678 ;;		_adcToLcd
   679 ;;		_delay
   680 ;;		_hmi_out
   681 ;;		_init_adc
   682 ;; This function is called by:
   683 ;;		Startup code after reset
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           	psect	text0
   688  00127A                     __ptext0:
   689                           	opt stack 0
   690  00127A                     _main:
   691                           	opt stack 21
   692                           
   693                           ;hmi.c: 95: OSCCONbits.IRCF0 = 0;
   694                           
   695                           ;incstack = 0
   696  00127A  98D3               	bcf	4051,4,c	;volatile
   697                           
   698                           ;hmi.c: 96: OSCCONbits.IRCF1 = 1;
   699  00127C  8AD3               	bsf	4051,5,c	;volatile
   700                           
   701                           ;hmi.c: 97: OSCCONbits.IRCF2 = 1;
   702  00127E  8CD3               	bsf	4051,6,c	;volatile
   703                           
   704                           ;hmi.c: 98: OSCCONbits.SCS1 =1;
   705  001280  82D3               	bsf	4051,1,c	;volatile
   706  001282                     
   707                           ;hmi.c: 102: {
   708                           ;hmi.c: 104: while(SerialReceive() != 'u');
   709  001282  ECC6  F009         	call	_SerialReceive	;wreg free
   710  001286  0A75               	xorlw	117
   711  001288  A4D8               	btfss	status,2,c
   712  00128A  D7FB               	goto	l112
   713  00128C                     u2620:
   714                           
   715                           ;hmi.c: 105: while(!PIR1bits.TXIF);
   716  00128C  A89E               	btfss	3998,4,c	;volatile
   717  00128E  D7FE               	goto	u2620
   718                           
   719                           ;hmi.c: 106: TXREG = 'p';
   720  001290  0E70               	movlw	112
   721  001292  6EAD               	movwf	4013,c	;volatile
   722  001294  D7F6               	goto	l112
   723  001296                     
   724                           ;hmi.c: 137: {
   725                           ;hmi.c: 138: adcToLcd();
   726  001296  EC06  F009         	call	_adcToLcd	;wreg free
   727                           
   728                           ;hmi.c: 139: delay(100);
   729  00129A  0E00               	movlw	0
   730  00129C  6E22               	movwf	delay@x+1,c
   731  00129E  0E64               	movlw	100
   732  0012A0  6E21               	movwf	delay@x,c
   733  0012A2  EC22  F009         	call	_delay	;wreg free
   734  0012A6  D7F7               	goto	l121
   735  0012A8                     __end_of_main:
   736                           	opt stack 0
   737                           tblptru	equ	0xFF8
   738                           tblptrh	equ	0xFF7
   739                           tblptrl	equ	0xFF6
   740                           tablat	equ	0xFF5
   741                           postinc0	equ	0xFEE
   742                           postdec1	equ	0xFE5
   743                           fsr1l	equ	0xFE1
   744                           status	equ	0xFD8
   745                           
   746 ;; *************** function _init_adc *****************
   747 ;; Defined at:
   748 ;;		line 9 in file "sensors.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;		None
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, status,2, status,0, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   762 ;;      Params:         0       0       0       0       0       0       0
   763 ;;      Locals:         0       0       0       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0       0       0
   765 ;;      Totals:         0       0       0       0       0       0       0
   766 ;;Total ram usage:        0 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    4
   769 ;; This function calls:
   770 ;;		_delay
   771 ;; This function is called by:
   772 ;;		_main
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           	psect	text1
   777  001120                     __ptext1:
   778                           	opt stack 0
   779  001120                     _init_adc:
   780                           	opt stack 26
   781                           
   782                           ;sensors.c: 11: TRISAbits.RA0 = 1;
   783                           
   784                           ;incstack = 0
   785  001120  8092               	bsf	3986,0,c	;volatile
   786                           
   787                           ;sensors.c: 12: TRISAbits.RA1 = 1;
   788  001122  8292               	bsf	3986,1,c	;volatile
   789                           
   790                           ;sensors.c: 13: TRISAbits.RA2 = 1;
   791  001124  8492               	bsf	3986,2,c	;volatile
   792                           
   793                           ;sensors.c: 14: TRISAbits.RA3 = 1;
   794  001126  8692               	bsf	3986,3,c	;volatile
   795                           
   796                           ;sensors.c: 15: ANSELbits.ANS0 = 1;
   797  001128  807E               	bsf	3966,0,c	;volatile
   798                           
   799                           ;sensors.c: 16: ANSELbits.ANS1 = 1;
   800  00112A  827E               	bsf	3966,1,c	;volatile
   801                           
   802                           ;sensors.c: 17: ANSELbits.ANS2 = 1;
   803  00112C  847E               	bsf	3966,2,c	;volatile
   804                           
   805                           ;sensors.c: 18: ANSELbits.ANS3 = 1;
   806  00112E  867E               	bsf	3966,3,c	;volatile
   807                           
   808                           ;sensors.c: 19: delay(2);
   809  001130  0E00               	movlw	0
   810  001132  6E22               	movwf	delay@x+1,c
   811  001134  0E02               	movlw	2
   812  001136  6E21               	movwf	delay@x,c
   813  001138  EC22  F009         	call	_delay	;wreg free
   814                           
   815                           ;sensors.c: 20: ADCON1 = 0;
   816  00113C  0E00               	movlw	0
   817  00113E  6EC1               	movwf	4033,c	;volatile
   818                           
   819                           ;sensors.c: 21: delay(2);
   820  001140  0E00               	movlw	0
   821  001142  6E22               	movwf	delay@x+1,c
   822  001144  0E02               	movlw	2
   823  001146  6E21               	movwf	delay@x,c
   824  001148  EC22  F009         	call	_delay	;wreg free
   825                           
   826                           ;sensors.c: 22: ADCON2 = 0b00101011;
   827  00114C  0E2B               	movlw	43
   828  00114E  6EC0               	movwf	4032,c	;volatile
   829                           
   830                           ;sensors.c: 23: delay(2);
   831  001150  0E00               	movlw	0
   832  001152  6E22               	movwf	delay@x+1,c
   833  001154  0E02               	movlw	2
   834  001156  6E21               	movwf	delay@x,c
   835  001158  EC22  F009         	call	_delay	;wreg free
   836  00115C  0012               	return		;funcret
   837  00115E                     __end_of_init_adc:
   838                           	opt stack 0
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           postdec1	equ	0xFE5
   845                           fsr1l	equ	0xFE1
   846                           status	equ	0xFD8
   847                           
   848 ;; *************** function _hmi_out *****************
   849 ;; Defined at:
   850 ;;		line 166 in file "hmi.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;		None
   853 ;; Auto vars:     Size  Location     Type
   854 ;;		None
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   864 ;;      Params:         0       0       0       0       0       0       0
   865 ;;      Locals:         0       0       0       0       0       0       0
   866 ;;      Temps:          0       0       0       0       0       0       0
   867 ;;      Totals:         0       0       0       0       0       0       0
   868 ;;Total ram usage:        0 bytes
   869 ;; Hardware stack levels used:    1
   870 ;; Hardware stack levels required when called:    9
   871 ;; This function calls:
   872 ;;		_WriteLCD
   873 ;;		_clear_lcd
   874 ;;		_delay
   875 ;;		_display_mode
   876 ;;		_display_speed
   877 ;;		_display_temp
   878 ;;		_goto_xy
   879 ;; This function is called by:
   880 ;;		_main
   881 ;;		_get_input
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text2
   886  000E06                     __ptext2:
   887                           	opt stack 0
   888  000E06                     _hmi_out:
   889                           	opt stack 21
   890                           
   891                           ;hmi.c: 168: if(!state)
   892                           
   893                           ;incstack = 0
   894  000E06  5039               	movf	_state,w,c
   895  000E08  103A               	iorwf	_state+1,w,c
   896  000E0A  A4D8               	btfss	status,2,c
   897  000E0C  D009               	goto	l130
   898                           
   899                           ;hmi.c: 169: {
   900                           ;hmi.c: 170: clear_lcd();
   901  000E0E  ECCA  F009         	call	_clear_lcd	;wreg free
   902                           
   903                           ;hmi.c: 171: WriteLCD("Idle");
   904  000E12  0E28               	movlw	low STR_2
   905  000E14  6E27               	movwf	WriteLCD@message,c
   906  000E16  0E06               	movlw	high STR_2
   907  000E18  6E28               	movwf	WriteLCD@message+1,c
   908  000E1A  EC0E  F008         	call	_WriteLCD	;wreg free
   909                           
   910                           ;hmi.c: 172: return;
   911  000E1E  0012               	return	
   912  000E20                     l130:
   913                           
   914                           ;hmi.c: 173: }
   915                           ;hmi.c: 174: clear_lcd();
   916  000E20  ECCA  F009         	call	_clear_lcd	;wreg free
   917                           
   918                           ;hmi.c: 175: delay(1);
   919  000E24  0E00               	movlw	0
   920  000E26  6E22               	movwf	delay@x+1,c
   921  000E28  0E01               	movlw	1
   922  000E2A  6E21               	movwf	delay@x,c
   923  000E2C  EC22  F009         	call	_delay	;wreg free
   924                           
   925                           ;hmi.c: 176: goto_xy(1,15);
   926  000E30  0E0F               	movlw	15
   927  000E32  6E27               	movwf	goto_xy@y,c
   928  000E34  0E01               	movlw	1
   929  000E36  EC8C  F009         	call	_goto_xy
   930                           
   931                           ;hmi.c: 177: delay(1);
   932  000E3A  0E00               	movlw	0
   933  000E3C  6E22               	movwf	delay@x+1,c
   934  000E3E  0E01               	movlw	1
   935  000E40  6E21               	movwf	delay@x,c
   936  000E42  EC22  F009         	call	_delay	;wreg free
   937                           
   938                           ;hmi.c: 178: display_speed();
   939  000E46  ECB9  F009         	call	_display_speed	;wreg free
   940                           
   941                           ;hmi.c: 183: delay(1);
   942  000E4A  0E00               	movlw	0
   943  000E4C  6E22               	movwf	delay@x+1,c
   944  000E4E  0E01               	movlw	1
   945  000E50  6E21               	movwf	delay@x,c
   946  000E52  EC22  F009         	call	_delay	;wreg free
   947                           
   948                           ;hmi.c: 184: goto_xy(0,0);
   949  000E56  0E00               	movlw	0
   950  000E58  6E27               	movwf	goto_xy@y,c
   951  000E5A  0E00               	movlw	0
   952  000E5C  EC8C  F009         	call	_goto_xy
   953                           
   954                           ;hmi.c: 185: delay(1);
   955  000E60  0E00               	movlw	0
   956  000E62  6E22               	movwf	delay@x+1,c
   957  000E64  0E01               	movlw	1
   958  000E66  6E21               	movwf	delay@x,c
   959  000E68  EC22  F009         	call	_delay	;wreg free
   960                           
   961                           ;hmi.c: 186: display_temp();
   962  000E6C  EC54  F009         	call	_display_temp	;wreg free
   963                           
   964                           ;hmi.c: 187: delay(1);
   965  000E70  0E00               	movlw	0
   966  000E72  6E22               	movwf	delay@x+1,c
   967  000E74  0E01               	movlw	1
   968  000E76  6E21               	movwf	delay@x,c
   969  000E78  EC22  F009         	call	_delay	;wreg free
   970                           
   971                           ;hmi.c: 188: goto_xy(9,0);
   972  000E7C  0E00               	movlw	0
   973  000E7E  6E27               	movwf	goto_xy@y,c
   974  000E80  0E09               	movlw	9
   975  000E82  EC8C  F009         	call	_goto_xy
   976                           
   977                           ;hmi.c: 189: delay(1);
   978  000E86  0E00               	movlw	0
   979  000E88  6E22               	movwf	delay@x+1,c
   980  000E8A  0E01               	movlw	1
   981  000E8C  6E21               	movwf	delay@x,c
   982  000E8E  EC22  F009         	call	_delay	;wreg free
   983                           
   984                           ;hmi.c: 190: display_mode();
   985  000E92  EC7A  F009         	call	_display_mode	;wreg free
   986  000E96  0012               	return		;funcret
   987  000E98                     __end_of_hmi_out:
   988                           	opt stack 0
   989                           tblptru	equ	0xFF8
   990                           tblptrh	equ	0xFF7
   991                           tblptrl	equ	0xFF6
   992                           tablat	equ	0xFF5
   993                           postinc0	equ	0xFEE
   994                           postdec1	equ	0xFE5
   995                           fsr1l	equ	0xFE1
   996                           status	equ	0xFD8
   997                           
   998 ;; *************** function _goto_xy *****************
   999 ;; Defined at:
  1000 ;;		line 136 in file "lcd.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;  x               1    wreg     unsigned char 
  1003 ;;  y               1   38[COMRAM] unsigned char 
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  x               1   39[COMRAM] unsigned char 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, status,2, status,0, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1015 ;;      Params:         1       0       0       0       0       0       0
  1016 ;;      Locals:         1       0       0       0       0       0       0
  1017 ;;      Temps:          0       0       0       0       0       0       0
  1018 ;;      Totals:         2       0       0       0       0       0       0
  1019 ;;Total ram usage:        2 bytes
  1020 ;; Hardware stack levels used:    1
  1021 ;; Hardware stack levels required when called:    7
  1022 ;; This function calls:
  1023 ;;		_WriteCtrl
  1024 ;; This function is called by:
  1025 ;;		_hmi_out
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           	psect	text3
  1030  001318                     __ptext3:
  1031                           	opt stack 0
  1032  001318                     _goto_xy:
  1033                           	opt stack 22
  1034                           
  1035                           ;incstack = 0
  1036                           ;goto_xy@x stored from wreg
  1037  001318  6E28               	movwf	goto_xy@x,c
  1038                           
  1039                           ;lcd.c: 138: if(x<40)
  1040  00131A  0E28               	movlw	40
  1041  00131C  6028               	cpfslt	goto_xy@x,c
  1042  00131E  0012               	return	
  1043                           
  1044                           ;lcd.c: 139: {
  1045                           ;lcd.c: 140: if(y) x|=0b01000000;
  1046  001320  5027               	movf	goto_xy@y,w,c
  1047  001322  A4D8               	btfss	status,2,c
  1048  001324  8C28               	bsf	goto_xy@x,6,c
  1049                           
  1050                           ;lcd.c: 141: x|=0b10000000;
  1051  001326  8E28               	bsf	goto_xy@x,7,c
  1052                           
  1053                           ;lcd.c: 142: WriteCtrl(x);
  1054  001328  5028               	movf	goto_xy@x,w,c
  1055  00132A  ECA4  F009         	call	_WriteCtrl
  1056  00132E  0012               	return	
  1057  001330                     __end_of_goto_xy:
  1058                           	opt stack 0
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           postinc0	equ	0xFEE
  1064                           postdec1	equ	0xFE5
  1065                           fsr1l	equ	0xFE1
  1066                           status	equ	0xFD8
  1067                           
  1068 ;; *************** function _display_temp *****************
  1069 ;; Defined at:
  1070 ;;		line 212 in file "hmi.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;		None
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;  temp            2   64[BANK0 ] int 
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  1    wreg      void 
  1077 ;; Registers used:
  1078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1084 ;;      Params:         0       0       0       0       0       0       0
  1085 ;;      Locals:         0       2       0       0       0       0       0
  1086 ;;      Temps:          0       0       0       0       0       0       0
  1087 ;;      Totals:         0       2       0       0       0       0       0
  1088 ;;Total ram usage:        2 bytes
  1089 ;; Hardware stack levels used:    1
  1090 ;; Hardware stack levels required when called:    8
  1091 ;; This function calls:
  1092 ;;		_WriteData
  1093 ;;		_get_temp
  1094 ;;		_integerToLcd
  1095 ;; This function is called by:
  1096 ;;		_hmi_out
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text4
  1101  0012A8                     __ptext4:
  1102                           	opt stack 0
  1103  0012A8                     _display_temp:
  1104                           	opt stack 21
  1105                           
  1106                           ;hmi.c: 214: int temp = get_temp();
  1107                           
  1108                           ;incstack = 0
  1109  0012A8  ECC0  F009         	call	_get_temp	;wreg free
  1110  0012AC  C095  F0A0         	movff	?_get_temp,display_temp@temp
  1111  0012B0  C096  F0A1         	movff	?_get_temp+1,display_temp@temp+1
  1112                           
  1113                           ;hmi.c: 215: integerToLcd(temp);
  1114  0012B4  C0A0  F035         	movff	display_temp@temp,integerToLcd@num
  1115  0012B8  C0A1  F036         	movff	display_temp@temp+1,integerToLcd@num+1
  1116  0012BC  EC4E  F006         	call	_integerToLcd	;wreg free
  1117                           
  1118                           ;hmi.c: 216: WriteData(0b11011111);
  1119  0012C0  0EDF               	movlw	223
  1120  0012C2  EC98  F009         	call	_WriteData
  1121                           
  1122                           ;hmi.c: 217: WriteData('C');
  1123  0012C6  0E43               	movlw	67
  1124  0012C8  EC98  F009         	call	_WriteData
  1125  0012CC  0012               	return		;funcret
  1126  0012CE                     __end_of_display_temp:
  1127                           	opt stack 0
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           postinc0	equ	0xFEE
  1133                           postdec1	equ	0xFE5
  1134                           fsr1l	equ	0xFE1
  1135                           status	equ	0xFD8
  1136                           
  1137 ;; *************** function _get_temp *****************
  1138 ;; Defined at:
  1139 ;;		line 31 in file "sensors.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;		None
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  result          2   62[BANK0 ] int 
  1144 ;;  logres          2   60[BANK0 ] int 
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  2   53[BANK0 ] int 
  1147 ;; Registers used:
  1148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1154 ;;      Params:         0       2       0       0       0       0       0
  1155 ;;      Locals:         0       7       0       0       0       0       0
  1156 ;;      Temps:          0       2       0       0       0       0       0
  1157 ;;      Totals:         0      11       0       0       0       0       0
  1158 ;;Total ram usage:       11 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    7
  1161 ;; This function calls:
  1162 ;;		___awdiv
  1163 ;;		___awtoft
  1164 ;;		___fttol
  1165 ;;		___wmul
  1166 ;;		_adc_poll
  1167 ;;		_log
  1168 ;; This function is called by:
  1169 ;;		_display_temp
  1170 ;;		_display_light
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text5
  1175  001380                     __ptext5:
  1176                           	opt stack 0
  1177  001380                     _get_temp:
  1178                           	opt stack 21
  1179                           
  1180                           ;sensors.c: 33: return 27;
  1181                           
  1182                           ;incstack = 0
  1183  001380  0E00               	movlw	0
  1184  001382  0100               	movlb	0	; () banked
  1185  001384  6F96               	movwf	(?_get_temp+1)& (0+255),b
  1186  001386  0E1B               	movlw	27
  1187  001388  6F95               	movwf	?_get_temp& (0+255),b
  1188                           
  1189                           ; BSR set to: 0
  1190  00138A  0012               	return	
  1191  00138C                     __end_of_get_temp:
  1192                           	opt stack 0
  1193                           tblptru	equ	0xFF8
  1194                           tblptrh	equ	0xFF7
  1195                           tblptrl	equ	0xFF6
  1196                           tablat	equ	0xFF5
  1197                           postinc0	equ	0xFEE
  1198                           postdec1	equ	0xFE5
  1199                           fsr1l	equ	0xFE1
  1200                           status	equ	0xFD8
  1201                           
  1202 ;; *************** function _log *****************
  1203 ;; Defined at:
  1204 ;;		line 5 in file "/opt/microchip/xc8/v1.44/sources/common/log.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;  x               3   33[BANK0 ] int 
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;  exponent        2   36[BANK0 ] int 
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  3   33[BANK0 ] int 
  1211 ;; Registers used:
  1212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1218 ;;      Params:         0       3       0       0       0       0       0
  1219 ;;      Locals:         0       2       0       0       0       0       0
  1220 ;;      Temps:          0       0       0       0       0       0       0
  1221 ;;      Totals:         0       5       0       0       0       0       0
  1222 ;;Total ram usage:        5 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; Hardware stack levels required when called:    6
  1225 ;; This function calls:
  1226 ;;		___awtoft
  1227 ;;		___ftadd
  1228 ;;		___ftmul
  1229 ;;		_eval_poly
  1230 ;;		_frexp
  1231 ;; This function is called by:
  1232 ;;		_get_temp
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           	psect	text6
  1237  0007E2                     __ptext6:
  1238                           	opt stack 0
  1239  0007E2                     _log:
  1240                           	opt stack 21
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;incstack = 0
  1244  0007E2  0100               	movlb	0	; () banked
  1245  0007E4  AF83               	btfss	(log@x+2)& (0+255),7,b
  1246  0007E6  D00B               	goto	l757
  1247                           
  1248                           ; BSR set to: 0
  1249  0007E8  0E00               	movlw	0
  1250  0007EA  6FA5               	movwf	(_errno+1)& (0+255),b
  1251  0007EC  0E21               	movlw	33
  1252  0007EE  6FA4               	movwf	_errno& (0+255),b
  1253  0007F0  0E00               	movlw	0
  1254  0007F2  6F81               	movwf	?_log& (0+255),b
  1255  0007F4  0E00               	movlw	0
  1256  0007F6  6F82               	movwf	(?_log+1)& (0+255),b
  1257  0007F8  0E00               	movlw	0
  1258  0007FA  6F83               	movwf	(?_log+2)& (0+255),b
  1259                           
  1260                           ; BSR set to: 0
  1261  0007FC  0012               	return	
  1262  0007FE                     l757:
  1263                           
  1264                           ; BSR set to: 0
  1265                           
  1266                           ; BSR set to: 0
  1267  0007FE  5181               	movf	log@x& (0+255),w,b
  1268  000800  1182               	iorwf	(log@x+1)& (0+255),w,b
  1269  000802  1183               	iorwf	(log@x+2)& (0+255),w,b
  1270  000804  A4D8               	btfss	status,2,c
  1271  000806  D00B               	goto	l759
  1272                           
  1273                           ; BSR set to: 0
  1274  000808  0E00               	movlw	0
  1275  00080A  6FA5               	movwf	(_errno+1)& (0+255),b
  1276  00080C  0E22               	movlw	34
  1277  00080E  6FA4               	movwf	_errno& (0+255),b
  1278  000810  0E00               	movlw	0
  1279  000812  6F81               	movwf	?_log& (0+255),b
  1280  000814  0E00               	movlw	0
  1281  000816  6F82               	movwf	(?_log+1)& (0+255),b
  1282  000818  0E00               	movlw	0
  1283  00081A  6F83               	movwf	(?_log+2)& (0+255),b
  1284                           
  1285                           ; BSR set to: 0
  1286  00081C  0012               	return	
  1287  00081E                     l759:
  1288                           
  1289                           ; BSR set to: 0
  1290                           
  1291                           ; BSR set to: 0
  1292  00081E  0E00               	movlw	0
  1293  000820  6E36               	movwf	___ftmul@f2,c
  1294  000822  0E00               	movlw	0
  1295  000824  6E37               	movwf	___ftmul@f2+1,c
  1296  000826  0E40               	movlw	64
  1297  000828  6E38               	movwf	___ftmul@f2+2,c
  1298  00082A  0E84               	movlw	low log@exponent
  1299  00082C  6E24               	movwf	frexp@eptr,c
  1300  00082E  0E00               	movlw	high log@exponent
  1301  000830  6E25               	movwf	frexp@eptr+1,c
  1302  000832  C081  F021         	movff	log@x,frexp@value
  1303  000836  C082  F022         	movff	log@x+1,frexp@value+1
  1304  00083A  C083  F023         	movff	log@x+2,frexp@value+2
  1305  00083E  EC4C  F007         	call	_frexp	;wreg free
  1306  000842  C021  F033         	movff	?_frexp,___ftmul@f1
  1307  000846  C022  F034         	movff	?_frexp+1,___ftmul@f1+1
  1308  00084A  C023  F035         	movff	?_frexp+2,___ftmul@f1+2
  1309  00084E  ECFD  F004         	call	___ftmul	;wreg free
  1310  000852  C033  F069         	movff	?___ftmul,___ftadd@f1
  1311  000856  C034  F06A         	movff	?___ftmul+1,___ftadd@f1+1
  1312  00085A  C035  F06B         	movff	?___ftmul+2,___ftadd@f1+2
  1313  00085E  0E00               	movlw	0
  1314  000860  0100               	movlb	0	; () banked
  1315  000862  6F6C               	movwf	___ftadd@f2& (0+255),b
  1316  000864  0E80               	movlw	128
  1317  000866  6F6D               	movwf	(___ftadd@f2+1)& (0+255),b
  1318  000868  0EBF               	movlw	191
  1319  00086A  6F6E               	movwf	(___ftadd@f2+2)& (0+255),b
  1320  00086C  EC1A  F003         	call	___ftadd	;wreg free
  1321  000870  C069  F081         	movff	?___ftadd,log@x
  1322  000874  C06A  F082         	movff	?___ftadd+1,log@x+1
  1323  000878  C06B  F083         	movff	?___ftadd+2,log@x+2
  1324  00087C  0100               	movlb	0	; () banked
  1325  00087E  0784               	decf	log@exponent& (0+255),f,b
  1326  000880  A0D8               	btfss	status,0,c
  1327  000882  0785               	decf	(log@exponent+1)& (0+255),f,b
  1328                           
  1329                           ; BSR set to: 0
  1330  000884  C081  F075         	movff	log@x,eval_poly@x
  1331  000888  C082  F076         	movff	log@x+1,eval_poly@x+1
  1332  00088C  C083  F077         	movff	log@x+2,eval_poly@x+2
  1333  000890  0E01               	movlw	low log@coeff
  1334  000892  6F78               	movwf	eval_poly@d& (0+255),b
  1335  000894  0E06               	movlw	high log@coeff
  1336  000896  6F79               	movwf	(eval_poly@d+1)& (0+255),b
  1337  000898  0E00               	movlw	0
  1338  00089A  6F7B               	movwf	(eval_poly@n+1)& (0+255),b
  1339  00089C  0E08               	movlw	8
  1340  00089E  6F7A               	movwf	eval_poly@n& (0+255),b
  1341  0008A0  EC78  F005         	call	_eval_poly	;wreg free
  1342  0008A4  C075  F081         	movff	?_eval_poly,log@x
  1343  0008A8  C076  F082         	movff	?_eval_poly+1,log@x+1
  1344  0008AC  C077  F083         	movff	?_eval_poly+2,log@x+2
  1345  0008B0  0E72               	movlw	114
  1346  0008B2  6E36               	movwf	___ftmul@f2,c
  1347  0008B4  0E31               	movlw	49
  1348  0008B6  6E37               	movwf	___ftmul@f2+1,c
  1349  0008B8  0E3F               	movlw	63
  1350  0008BA  6E38               	movwf	___ftmul@f2+2,c
  1351  0008BC  C084  F02F         	movff	log@exponent,___awtoft@c
  1352  0008C0  C085  F030         	movff	log@exponent+1,___awtoft@c+1
  1353  0008C4  ECEA  F008         	call	___awtoft	;wreg free
  1354  0008C8  C02F  F033         	movff	?___awtoft,___ftmul@f1
  1355  0008CC  C030  F034         	movff	?___awtoft+1,___ftmul@f1+1
  1356  0008D0  C031  F035         	movff	?___awtoft+2,___ftmul@f1+2
  1357  0008D4  ECFD  F004         	call	___ftmul	;wreg free
  1358  0008D8  C033  F069         	movff	?___ftmul,___ftadd@f1
  1359  0008DC  C034  F06A         	movff	?___ftmul+1,___ftadd@f1+1
  1360  0008E0  C035  F06B         	movff	?___ftmul+2,___ftadd@f1+2
  1361  0008E4  C081  F06C         	movff	log@x,___ftadd@f2
  1362  0008E8  C082  F06D         	movff	log@x+1,___ftadd@f2+1
  1363  0008EC  C083  F06E         	movff	log@x+2,___ftadd@f2+2
  1364  0008F0  EC1A  F003         	call	___ftadd	;wreg free
  1365  0008F4  C069  F081         	movff	?___ftadd,?_log
  1366  0008F8  C06A  F082         	movff	?___ftadd+1,?_log+1
  1367  0008FC  C06B  F083         	movff	?___ftadd+2,?_log+2
  1368  000900  0012               	return	
  1369  000902                     __end_of_log:
  1370                           	opt stack 0
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           postinc0	equ	0xFEE
  1376                           postdec1	equ	0xFE5
  1377                           fsr1l	equ	0xFE1
  1378                           status	equ	0xFD8
  1379                           
  1380 ;; *************** function _frexp *****************
  1381 ;; Defined at:
  1382 ;;		line 254 in file "/opt/microchip/xc8/v1.44/sources/common/frexp.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;  value           3   32[COMRAM] int 
  1385 ;;  eptr            2   35[COMRAM] PTR int 
  1386 ;;		 -> log@exponent(2), 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;		None
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  3   32[COMRAM] PTR int 
  1391 ;; Registers used:
  1392 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1398 ;;      Params:         5       0       0       0       0       0       0
  1399 ;;      Locals:         0       0       0       0       0       0       0
  1400 ;;      Temps:          2       0       0       0       0       0       0
  1401 ;;      Totals:         7       0       0       0       0       0       0
  1402 ;;Total ram usage:        7 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    3
  1405 ;; This function calls:
  1406 ;;		Nothing
  1407 ;; This function is called by:
  1408 ;;		_log
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           	psect	text7
  1413  000E98                     __ptext7:
  1414                           	opt stack 0
  1415  000E98                     _frexp:
  1416                           	opt stack 23
  1417                           
  1418                           ;incstack = 0
  1419  000E98  5021               	movf	frexp@value,w,c
  1420  000E9A  1022               	iorwf	frexp@value+1,w,c
  1421  000E9C  1023               	iorwf	frexp@value+2,w,c
  1422  000E9E  A4D8               	btfss	status,2,c
  1423  000EA0  D00F               	goto	l970
  1424  000EA2  C024  FFD9         	movff	frexp@eptr,fsr2l
  1425  000EA6  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  1426  000EAA  0E00               	movlw	0
  1427  000EAC  6EDE               	movwf	postinc2,c
  1428  000EAE  0E00               	movlw	0
  1429  000EB0  6EDD               	movwf	postdec2,c
  1430  000EB2  0E00               	movlw	0
  1431  000EB4  6E21               	movwf	?_frexp,c
  1432  000EB6  0E00               	movlw	0
  1433  000EB8  6E22               	movwf	?_frexp+1,c
  1434  000EBA  0E00               	movlw	0
  1435  000EBC  6E23               	movwf	?_frexp+2,c
  1436  000EBE  0012               	return	
  1437  000EC0                     l970:
  1438  000EC0  5023               	movf	frexp@value+2,w,c
  1439  000EC2  0B7F               	andlw	127
  1440  000EC4  6E26               	movwf	??_frexp& (0+255),c
  1441  000EC6  6A27               	clrf	(??_frexp+1)& (0+255),c
  1442  000EC8  90D8               	bcf	status,0,c
  1443  000ECA  3626               	rlcf	??_frexp,f,c
  1444  000ECC  3627               	rlcf	??_frexp+1,f,c
  1445  000ECE  C024  FFD9         	movff	frexp@eptr,fsr2l
  1446  000ED2  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  1447  000ED6  C026  FFDE         	movff	??_frexp,postinc2
  1448  000EDA  C027  FFDD         	movff	??_frexp+1,postdec2
  1449  000EDE  AE22               	btfss	frexp@value+1,7,c
  1450  000EE0  D003               	goto	u1560
  1451  000EE2  6A26               	clrf	??_frexp& (0+255),c
  1452  000EE4  2A26               	incf	??_frexp& (0+255),f,c
  1453  000EE6  D001               	goto	u1568
  1454  000EE8                     u1560:
  1455  000EE8  6A26               	clrf	??_frexp& (0+255),c
  1456  000EEA                     u1568:
  1457  000EEA  5026               	movf	??_frexp,w,c
  1458  000EEC  C024  FFD9         	movff	frexp@eptr,fsr2l
  1459  000EF0  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  1460  000EF4  12DE               	iorwf	postinc2,f,c
  1461  000EF6  0E00               	movlw	0
  1462  000EF8  12DD               	iorwf	postdec2,f,c
  1463  000EFA  C024  FFD9         	movff	frexp@eptr,fsr2l
  1464  000EFE  C025  FFDA         	movff	frexp@eptr+1,fsr2h
  1465  000F02  0E82               	movlw	130
  1466  000F04  26DE               	addwf	postinc2,f,c
  1467  000F06  0EFF               	movlw	255
  1468  000F08  22DD               	addwfc	postdec2,f,c
  1469  000F0A  8023               	bsf	frexp@value+2,0,c
  1470  000F0C  8223               	bsf	frexp@value+2,1,c
  1471  000F0E  8423               	bsf	frexp@value+2,2,c
  1472  000F10  8623               	bsf	frexp@value+2,3,c
  1473  000F12  8823               	bsf	frexp@value+2,4,c
  1474  000F14  8A23               	bsf	frexp@value+2,5,c
  1475  000F16  9C23               	bcf	frexp@value+2,6,c
  1476  000F18  9E22               	bcf	frexp@value+1,7,c
  1477  000F1A  C021  F021         	movff	frexp@value,?_frexp
  1478  000F1E  C022  F022         	movff	frexp@value+1,?_frexp+1
  1479  000F22  C023  F023         	movff	frexp@value+2,?_frexp+2
  1480  000F26  0012               	return	
  1481  000F28                     __end_of_frexp:
  1482                           	opt stack 0
  1483                           tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           postinc0	equ	0xFEE
  1488                           postdec1	equ	0xFE5
  1489                           fsr1l	equ	0xFE1
  1490                           postinc2	equ	0xFDE
  1491                           postdec2	equ	0xFDD
  1492                           fsr2h	equ	0xFDA
  1493                           fsr2l	equ	0xFD9
  1494                           status	equ	0xFD8
  1495                           
  1496 ;; *************** function _eval_poly *****************
  1497 ;; Defined at:
  1498 ;;		line 4 in file "/opt/microchip/xc8/v1.44/sources/common/evalpoly.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;  x               3   21[BANK0 ] PTR int 
  1501 ;;  d               2   24[BANK0 ] PTR const 
  1502 ;;		 -> log@coeff(27), 
  1503 ;;  n               2   26[BANK0 ] int 
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;  res             3   30[BANK0 ] int 
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  3   21[BANK0 ] int 
  1508 ;; Registers used:
  1509 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1510 ;; Tracked objects:
  1511 ;;		On entry : 0/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1515 ;;      Params:         0       7       0       0       0       0       0
  1516 ;;      Locals:         0       3       0       0       0       0       0
  1517 ;;      Temps:          0       2       0       0       0       0       0
  1518 ;;      Totals:         0      12       0       0       0       0       0
  1519 ;;Total ram usage:       12 bytes
  1520 ;; Hardware stack levels used:    1
  1521 ;; Hardware stack levels required when called:    5
  1522 ;; This function calls:
  1523 ;;		___ftadd
  1524 ;;		___ftmul
  1525 ;;		___wmul
  1526 ;; This function is called by:
  1527 ;;		_log
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           	psect	text8
  1532  000AF0                     __ptext8:
  1533                           	opt stack 0
  1534  000AF0                     _eval_poly:
  1535                           	opt stack 21
  1536                           
  1537                           ;incstack = 0
  1538  000AF0  C07A  F02F         	movff	eval_poly@n,___wmul@multiplier
  1539  000AF4  C07B  F030         	movff	eval_poly@n+1,___wmul@multiplier+1
  1540  000AF8  0E00               	movlw	0
  1541  000AFA  6E32               	movwf	___wmul@multiplicand+1,c
  1542  000AFC  0E03               	movlw	3
  1543  000AFE  6E31               	movwf	___wmul@multiplicand,c
  1544  000B00  EC67  F009         	call	___wmul	;wreg free
  1545  000B04  C078  F07C         	movff	eval_poly@d,??_eval_poly
  1546  000B08  C079  F07D         	movff	eval_poly@d+1,??_eval_poly+1
  1547  000B0C  502F               	movf	?___wmul,w,c
  1548  000B0E  0100               	movlb	0	; () banked
  1549  000B10  277C               	addwf	??_eval_poly& (0+255),f,b
  1550  000B12  5030               	movf	?___wmul+1,w,c
  1551  000B14  237D               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1552  000B16  C07C  FFF6         	movff	??_eval_poly,tblptrl
  1553  000B1A  C07D  FFF7         	movff	??_eval_poly+1,tblptrh
  1554  000B1E                     	if	0	;tblptru may be non-zero
  1555  000B1E                     	endif
  1556  000B1E                     	if	0	;tblptru may be non-zero
  1557  000B1E                     	endif
  1558  000B1E  0009               	tblrd		*+
  1559  000B20  CFF5 F07E          	movff	tablat,eval_poly@res
  1560  000B24  0009               	tblrd		*+
  1561  000B26  CFF5 F07F          	movff	tablat,eval_poly@res+1
  1562  000B2A  000A               	tblrd		*-
  1563  000B2C  CFF5 F080          	movff	tablat,eval_poly@res+2
  1564  000B30  D040               	goto	l962
  1565  000B32                     
  1566                           ; BSR set to: 0
  1567                           
  1568                           ; BSR set to: 0
  1569  000B32  C07E  F036         	movff	eval_poly@res,___ftmul@f2
  1570  000B36  C07F  F037         	movff	eval_poly@res+1,___ftmul@f2+1
  1571  000B3A  C080  F038         	movff	eval_poly@res+2,___ftmul@f2+2
  1572  000B3E  C075  F033         	movff	eval_poly@x,___ftmul@f1
  1573  000B42  C076  F034         	movff	eval_poly@x+1,___ftmul@f1+1
  1574  000B46  C077  F035         	movff	eval_poly@x+2,___ftmul@f1+2
  1575  000B4A  ECFD  F004         	call	___ftmul	;wreg free
  1576  000B4E  C033  F069         	movff	?___ftmul,___ftadd@f1
  1577  000B52  C034  F06A         	movff	?___ftmul+1,___ftadd@f1+1
  1578  000B56  C035  F06B         	movff	?___ftmul+2,___ftadd@f1+2
  1579  000B5A  0E00               	movlw	0
  1580  000B5C  6E32               	movwf	___wmul@multiplicand+1,c
  1581  000B5E  0E03               	movlw	3
  1582  000B60  6E31               	movwf	___wmul@multiplicand,c
  1583  000B62  0100               	movlb	0	; () banked
  1584  000B64  077A               	decf	eval_poly@n& (0+255),f,b
  1585  000B66  A0D8               	btfss	status,0,c
  1586  000B68  077B               	decf	(eval_poly@n+1)& (0+255),f,b
  1587  000B6A  C07A  F02F         	movff	eval_poly@n,___wmul@multiplier
  1588  000B6E  C07B  F030         	movff	eval_poly@n+1,___wmul@multiplier+1
  1589  000B72  EC67  F009         	call	___wmul	;wreg free
  1590  000B76  C078  F07C         	movff	eval_poly@d,??_eval_poly
  1591  000B7A  C079  F07D         	movff	eval_poly@d+1,??_eval_poly+1
  1592  000B7E  502F               	movf	?___wmul,w,c
  1593  000B80  0100               	movlb	0	; () banked
  1594  000B82  277C               	addwf	??_eval_poly& (0+255),f,b
  1595  000B84  5030               	movf	?___wmul+1,w,c
  1596  000B86  237D               	addwfc	(??_eval_poly+1)& (0+255),f,b
  1597  000B88  C07C  FFF6         	movff	??_eval_poly,tblptrl
  1598  000B8C  C07D  FFF7         	movff	??_eval_poly+1,tblptrh
  1599  000B90                     	if	0	;tblptru may be non-zero
  1600  000B90                     	endif
  1601  000B90                     	if	0	;tblptru may be non-zero
  1602  000B90                     	endif
  1603  000B90  0009               	tblrd		*+
  1604  000B92  CFF5 F06C          	movff	tablat,___ftadd@f2
  1605  000B96  0009               	tblrd		*+
  1606  000B98  CFF5 F06D          	movff	tablat,___ftadd@f2+1
  1607  000B9C  000A               	tblrd		*-
  1608  000B9E  CFF5 F06E          	movff	tablat,___ftadd@f2+2
  1609  000BA2  EC1A  F003         	call	___ftadd	;wreg free
  1610  000BA6  C069  F07E         	movff	?___ftadd,eval_poly@res
  1611  000BAA  C06A  F07F         	movff	?___ftadd+1,eval_poly@res+1
  1612  000BAE  C06B  F080         	movff	?___ftadd+2,eval_poly@res+2
  1613  000BB2                     l962:
  1614  000BB2  0100               	movlb	0	; () banked
  1615  000BB4  517A               	movf	eval_poly@n& (0+255),w,b
  1616  000BB6  117B               	iorwf	(eval_poly@n+1)& (0+255),w,b
  1617  000BB8  A4D8               	btfss	status,2,c
  1618  000BBA  D7BB               	goto	l963
  1619                           
  1620                           ; BSR set to: 0
  1621  000BBC  C07E  F075         	movff	eval_poly@res,?_eval_poly
  1622  000BC0  C07F  F076         	movff	eval_poly@res+1,?_eval_poly+1
  1623  000BC4  C080  F077         	movff	eval_poly@res+2,?_eval_poly+2
  1624                           
  1625                           ; BSR set to: 0
  1626  000BC8  0012               	return		;funcret
  1627  000BCA                     __end_of_eval_poly:
  1628                           	opt stack 0
  1629                           tblptru	equ	0xFF8
  1630                           tblptrh	equ	0xFF7
  1631                           tblptrl	equ	0xFF6
  1632                           tablat	equ	0xFF5
  1633                           postinc0	equ	0xFEE
  1634                           postdec1	equ	0xFE5
  1635                           fsr1l	equ	0xFE1
  1636                           postinc2	equ	0xFDE
  1637                           postdec2	equ	0xFDD
  1638                           fsr2h	equ	0xFDA
  1639                           fsr2l	equ	0xFD9
  1640                           status	equ	0xFD8
  1641                           
  1642 ;; *************** function ___ftmul *****************
  1643 ;; Defined at:
  1644 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/ftmul.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;  f1              3   50[COMRAM] float 
  1647 ;;  f2              3   53[COMRAM] float 
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  1650 ;;  sign            1    8[BANK0 ] unsigned char 
  1651 ;;  cntr            1    7[BANK0 ] unsigned char 
  1652 ;;  exp             1    3[BANK0 ] unsigned char 
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  3   50[COMRAM] float 
  1655 ;; Registers used:
  1656 ;;		wreg, status,2, status,0, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1662 ;;      Params:         6       0       0       0       0       0       0
  1663 ;;      Locals:         0       6       0       0       0       0       0
  1664 ;;      Temps:          0       3       0       0       0       0       0
  1665 ;;      Totals:         6       9       0       0       0       0       0
  1666 ;;Total ram usage:       15 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    4
  1669 ;; This function calls:
  1670 ;;		___ftpack
  1671 ;; This function is called by:
  1672 ;;		_log
  1673 ;;		_eval_poly
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text9
  1678  0009FA                     __ptext9:
  1679                           	opt stack 0
  1680  0009FA                     ___ftmul:
  1681                           	opt stack 21
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;incstack = 0
  1685  0009FA  C035  F060         	movff	___ftmul@f1+2,??___ftmul
  1686  0009FE  0100               	movlb	0	; () banked
  1687  000A00  6B61               	clrf	(??___ftmul+1)& (0+255),b
  1688  000A02  6B62               	clrf	(??___ftmul+2)& (0+255),b
  1689  000A04  3434               	rlcf	___ftmul@f1+1,w,c
  1690  000A06  3760               	rlcf	??___ftmul& (0+255),f,b
  1691  000A08  E301               	bnc	u2341
  1692  000A0A  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  1693  000A0C                     u2341:
  1694  000A0C  5160               	movf	??___ftmul& (0+255),w,b
  1695  000A0E  6F63               	movwf	___ftmul@exp& (0+255),b
  1696  000A10  5163               	movf	___ftmul@exp& (0+255),w,b
  1697  000A12  A4D8               	btfss	status,2,c
  1698  000A14  D007               	goto	l665
  1699                           
  1700                           ; BSR set to: 0
  1701  000A16  0E00               	movlw	0
  1702  000A18  6E33               	movwf	?___ftmul,c
  1703  000A1A  0E00               	movlw	0
  1704  000A1C  6E34               	movwf	?___ftmul+1,c
  1705  000A1E  0E00               	movlw	0
  1706  000A20  6E35               	movwf	?___ftmul+2,c
  1707                           
  1708                           ; BSR set to: 0
  1709  000A22  0012               	return	
  1710  000A24                     l665:
  1711                           
  1712                           ; BSR set to: 0
  1713                           
  1714                           ; BSR set to: 0
  1715  000A24  C038  F060         	movff	___ftmul@f2+2,??___ftmul
  1716  000A28  6B61               	clrf	(??___ftmul+1)& (0+255),b
  1717  000A2A  6B62               	clrf	(??___ftmul+2)& (0+255),b
  1718  000A2C  3437               	rlcf	___ftmul@f2+1,w,c
  1719  000A2E  3760               	rlcf	??___ftmul& (0+255),f,b
  1720  000A30  E301               	bnc	u2361
  1721  000A32  8161               	bsf	(??___ftmul+1)& (0+255),0,b
  1722  000A34                     u2361:
  1723  000A34  5160               	movf	??___ftmul& (0+255),w,b
  1724  000A36  6F68               	movwf	___ftmul@sign& (0+255),b
  1725  000A38  5168               	movf	___ftmul@sign& (0+255),w,b
  1726  000A3A  A4D8               	btfss	status,2,c
  1727  000A3C  D007               	goto	l667
  1728                           
  1729                           ; BSR set to: 0
  1730  000A3E  0E00               	movlw	0
  1731  000A40  6E33               	movwf	?___ftmul,c
  1732  000A42  0E00               	movlw	0
  1733  000A44  6E34               	movwf	?___ftmul+1,c
  1734  000A46  0E00               	movlw	0
  1735  000A48  6E35               	movwf	?___ftmul+2,c
  1736                           
  1737                           ; BSR set to: 0
  1738  000A4A  0012               	return	
  1739  000A4C                     l667:
  1740                           
  1741                           ; BSR set to: 0
  1742                           
  1743                           ; BSR set to: 0
  1744  000A4C  5168               	movf	___ftmul@sign& (0+255),w,b
  1745  000A4E  0F7B               	addlw	123
  1746  000A50  2763               	addwf	___ftmul@exp& (0+255),f,b
  1747                           
  1748                           ; BSR set to: 0
  1749  000A52  C035  F068         	movff	___ftmul@f1+2,___ftmul@sign
  1750  000A56  5038               	movf	___ftmul@f2+2,w,c
  1751  000A58  1B68               	xorwf	___ftmul@sign& (0+255),f,b
  1752  000A5A  0E80               	movlw	128
  1753  000A5C  1768               	andwf	___ftmul@sign& (0+255),f,b
  1754                           
  1755                           ; BSR set to: 0
  1756  000A5E  8E34               	bsf	___ftmul@f1+1,7,c
  1757                           
  1758                           ; BSR set to: 0
  1759  000A60  8E37               	bsf	___ftmul@f2+1,7,c
  1760                           
  1761                           ; BSR set to: 0
  1762  000A62  0EFF               	movlw	255
  1763  000A64  1636               	andwf	___ftmul@f2,f,c
  1764  000A66  0EFF               	movlw	255
  1765  000A68  1637               	andwf	___ftmul@f2+1,f,c
  1766  000A6A  0E00               	movlw	0
  1767  000A6C  1638               	andwf	___ftmul@f2+2,f,c
  1768                           
  1769                           ; BSR set to: 0
  1770  000A6E  0E00               	movlw	0
  1771  000A70  6F64               	movwf	___ftmul@f3_as_product& (0+255),b
  1772  000A72  0E00               	movlw	0
  1773  000A74  6F65               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  1774  000A76  0E00               	movlw	0
  1775  000A78  6F66               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  1776                           
  1777                           ; BSR set to: 0
  1778  000A7A  0E07               	movlw	7
  1779  000A7C  6F67               	movwf	___ftmul@cntr& (0+255),b
  1780  000A7E                     
  1781                           ; BSR set to: 0
  1782                           
  1783                           ; BSR set to: 0
  1784  000A7E  A033               	btfss	___ftmul@f1,0,c
  1785  000A80  D006               	goto	l669
  1786                           
  1787                           ; BSR set to: 0
  1788  000A82  5036               	movf	___ftmul@f2,w,c
  1789  000A84  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  1790  000A86  5037               	movf	___ftmul@f2+1,w,c
  1791  000A88  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  1792  000A8A  5038               	movf	___ftmul@f2+2,w,c
  1793  000A8C  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  1794  000A8E                     l669:
  1795                           
  1796                           ; BSR set to: 0
  1797                           
  1798                           ; BSR set to: 0
  1799  000A8E  90D8               	bcf	status,0,c
  1800  000A90  3235               	rrcf	___ftmul@f1+2,f,c
  1801  000A92  3234               	rrcf	___ftmul@f1+1,f,c
  1802  000A94  3233               	rrcf	___ftmul@f1,f,c
  1803  000A96  90D8               	bcf	status,0,c
  1804  000A98  3636               	rlcf	___ftmul@f2,f,c
  1805  000A9A  3637               	rlcf	___ftmul@f2+1,f,c
  1806  000A9C  3638               	rlcf	___ftmul@f2+2,f,c
  1807                           
  1808                           ; BSR set to: 0
  1809  000A9E  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  1810  000AA0  D7EE               	goto	l668
  1811                           
  1812                           ; BSR set to: 0
  1813                           
  1814                           ; BSR set to: 0
  1815  000AA2  0E09               	movlw	9
  1816  000AA4  6F67               	movwf	___ftmul@cntr& (0+255),b
  1817  000AA6                     
  1818                           ; BSR set to: 0
  1819                           
  1820                           ; BSR set to: 0
  1821  000AA6  A033               	btfss	___ftmul@f1,0,c
  1822  000AA8  D006               	goto	l672
  1823                           
  1824                           ; BSR set to: 0
  1825  000AAA  5036               	movf	___ftmul@f2,w,c
  1826  000AAC  2764               	addwf	___ftmul@f3_as_product& (0+255),f,b
  1827  000AAE  5037               	movf	___ftmul@f2+1,w,c
  1828  000AB0  2365               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  1829  000AB2  5038               	movf	___ftmul@f2+2,w,c
  1830  000AB4  2366               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  1831  000AB6                     l672:
  1832                           
  1833                           ; BSR set to: 0
  1834                           
  1835                           ; BSR set to: 0
  1836  000AB6  90D8               	bcf	status,0,c
  1837  000AB8  3235               	rrcf	___ftmul@f1+2,f,c
  1838  000ABA  3234               	rrcf	___ftmul@f1+1,f,c
  1839  000ABC  3233               	rrcf	___ftmul@f1,f,c
  1840  000ABE  90D8               	bcf	status,0,c
  1841  000AC0  3366               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  1842  000AC2  3365               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  1843  000AC4  3364               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  1844                           
  1845                           ; BSR set to: 0
  1846  000AC6  2F67               	decfsz	___ftmul@cntr& (0+255),f,b
  1847  000AC8  D7EE               	goto	l671
  1848                           
  1849                           ; BSR set to: 0
  1850                           
  1851                           ; BSR set to: 0
  1852  000ACA  C064  F021         	movff	___ftmul@f3_as_product,___ftpack@arg
  1853  000ACE  C065  F022         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  1854  000AD2  C066  F023         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  1855  000AD6  C063  F024         	movff	___ftmul@exp,___ftpack@exp
  1856  000ADA  C068  F025         	movff	___ftmul@sign,___ftpack@sign
  1857  000ADE  ECAC  F006         	call	___ftpack	;wreg free
  1858  000AE2  C021  F033         	movff	?___ftpack,?___ftmul
  1859  000AE6  C022  F034         	movff	?___ftpack+1,?___ftmul+1
  1860  000AEA  C023  F035         	movff	?___ftpack+2,?___ftmul+2
  1861  000AEE  0012               	return	
  1862  000AF0                     __end_of___ftmul:
  1863                           	opt stack 0
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           postinc0	equ	0xFEE
  1869                           postdec1	equ	0xFE5
  1870                           fsr1l	equ	0xFE1
  1871                           postinc2	equ	0xFDE
  1872                           postdec2	equ	0xFDD
  1873                           fsr2h	equ	0xFDA
  1874                           fsr2l	equ	0xFD9
  1875                           status	equ	0xFD8
  1876                           
  1877 ;; *************** function ___ftadd *****************
  1878 ;; Defined at:
  1879 ;;		line 86 in file "/opt/microchip/xc8/v1.44/sources/common/ftadd.c"
  1880 ;; Parameters:    Size  Location     Type
  1881 ;;  f1              3    9[BANK0 ] float 
  1882 ;;  f2              3   12[BANK0 ] float 
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;  exp1            1   20[BANK0 ] unsigned char 
  1885 ;;  exp2            1   19[BANK0 ] unsigned char 
  1886 ;;  sign            1   18[BANK0 ] unsigned char 
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  3    9[BANK0 ] float 
  1889 ;; Registers used:
  1890 ;;		wreg, status,2, status,0, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1896 ;;      Params:         0       6       0       0       0       0       0
  1897 ;;      Locals:         0       3       0       0       0       0       0
  1898 ;;      Temps:          0       3       0       0       0       0       0
  1899 ;;      Totals:         0      12       0       0       0       0       0
  1900 ;;Total ram usage:       12 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; Hardware stack levels required when called:    4
  1903 ;; This function calls:
  1904 ;;		___ftpack
  1905 ;; This function is called by:
  1906 ;;		_log
  1907 ;;		_eval_poly
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text10
  1912  000634                     __ptext10:
  1913                           	opt stack 0
  1914  000634                     ___ftadd:
  1915                           	opt stack 21
  1916                           
  1917                           ;incstack = 0
  1918  000634  C06B  F06F         	movff	___ftadd@f1+2,??___ftadd
  1919  000638  0100               	movlb	0	; () banked
  1920  00063A  6B70               	clrf	(??___ftadd+1)& (0+255),b
  1921  00063C  6B71               	clrf	(??___ftadd+2)& (0+255),b
  1922  00063E  356A               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  1923  000640  376F               	rlcf	??___ftadd& (0+255),f,b
  1924  000642  E301               	bnc	u2131
  1925  000644  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  1926  000646                     u2131:
  1927  000646  516F               	movf	??___ftadd& (0+255),w,b
  1928  000648  6F74               	movwf	___ftadd@exp1& (0+255),b
  1929  00064A  C06E  F06F         	movff	___ftadd@f2+2,??___ftadd
  1930  00064E  6B70               	clrf	(??___ftadd+1)& (0+255),b
  1931  000650  6B71               	clrf	(??___ftadd+2)& (0+255),b
  1932  000652  356D               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  1933  000654  376F               	rlcf	??___ftadd& (0+255),f,b
  1934  000656  E301               	bnc	u2141
  1935  000658  8170               	bsf	(??___ftadd+1)& (0+255),0,b
  1936  00065A                     u2141:
  1937  00065A  516F               	movf	??___ftadd& (0+255),w,b
  1938  00065C  6F73               	movwf	___ftadd@exp2& (0+255),b
  1939                           
  1940                           ; BSR set to: 0
  1941  00065E  5174               	movf	___ftadd@exp1& (0+255),w,b
  1942  000660  B4D8               	btfsc	status,2,c
  1943  000662  D00B               	goto	u2170
  1944                           
  1945                           ; BSR set to: 0
  1946  000664  5173               	movf	___ftadd@exp2& (0+255),w,b
  1947  000666  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  1948  000668  B0D8               	btfsc	status,0,c
  1949  00066A  D00E               	goto	l617
  1950                           
  1951                           ; BSR set to: 0
  1952  00066C  5174               	movf	___ftadd@exp1& (0+255),w,b
  1953  00066E  0800               	sublw	0
  1954  000670  2573               	addwf	___ftadd@exp2& (0+255),w,b
  1955  000672  6F6F               	movwf	??___ftadd& (0+255),b
  1956  000674  0E18               	movlw	24
  1957  000676  656F               	cpfsgt	??___ftadd& (0+255),b
  1958  000678  D007               	goto	l617
  1959  00067A                     u2170:
  1960                           
  1961                           ; BSR set to: 0
  1962  00067A  C06C  F069         	movff	___ftadd@f2,?___ftadd
  1963  00067E  C06D  F06A         	movff	___ftadd@f2+1,?___ftadd+1
  1964  000682  C06E  F06B         	movff	___ftadd@f2+2,?___ftadd+2
  1965  000686  0012               	return	
  1966  000688                     l617:
  1967                           
  1968                           ; BSR set to: 0
  1969                           
  1970                           ; BSR set to: 0
  1971  000688  5173               	movf	___ftadd@exp2& (0+255),w,b
  1972  00068A  B4D8               	btfsc	status,2,c
  1973  00068C  D00B               	goto	u2200
  1974                           
  1975                           ; BSR set to: 0
  1976  00068E  5174               	movf	___ftadd@exp1& (0+255),w,b
  1977  000690  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  1978  000692  B0D8               	btfsc	status,0,c
  1979  000694  D00E               	goto	l621
  1980                           
  1981                           ; BSR set to: 0
  1982  000696  5173               	movf	___ftadd@exp2& (0+255),w,b
  1983  000698  0800               	sublw	0
  1984  00069A  2574               	addwf	___ftadd@exp1& (0+255),w,b
  1985  00069C  6F6F               	movwf	??___ftadd& (0+255),b
  1986  00069E  0E18               	movlw	24
  1987  0006A0  656F               	cpfsgt	??___ftadd& (0+255),b
  1988  0006A2  D007               	goto	l621
  1989  0006A4                     u2200:
  1990                           
  1991                           ; BSR set to: 0
  1992  0006A4  C069  F069         	movff	___ftadd@f1,?___ftadd
  1993  0006A8  C06A  F06A         	movff	___ftadd@f1+1,?___ftadd+1
  1994  0006AC  C06B  F06B         	movff	___ftadd@f1+2,?___ftadd+2
  1995  0006B0  0012               	return	
  1996  0006B2                     l621:
  1997                           
  1998                           ; BSR set to: 0
  1999                           
  2000                           ; BSR set to: 0
  2001  0006B2  0E06               	movlw	6
  2002  0006B4  6F72               	movwf	___ftadd@sign& (0+255),b
  2003                           
  2004                           ; BSR set to: 0
  2005  0006B6  BF6B               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  2006                           
  2007                           ; BSR set to: 0
  2008  0006B8  8F72               	bsf	___ftadd@sign& (0+255),7,b
  2009                           
  2010                           ; BSR set to: 0
  2011                           
  2012                           ; BSR set to: 0
  2013  0006BA  BF6E               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  2014                           
  2015                           ; BSR set to: 0
  2016  0006BC  8D72               	bsf	___ftadd@sign& (0+255),6,b
  2017                           
  2018                           ; BSR set to: 0
  2019  0006BE  8F6A               	bsf	(___ftadd@f1+1)& (0+255),7,b
  2020                           
  2021                           ; BSR set to: 0
  2022  0006C0  0EFF               	movlw	255
  2023  0006C2  1769               	andwf	___ftadd@f1& (0+255),f,b
  2024  0006C4  0EFF               	movlw	255
  2025  0006C6  176A               	andwf	(___ftadd@f1+1)& (0+255),f,b
  2026  0006C8  0E00               	movlw	0
  2027  0006CA  176B               	andwf	(___ftadd@f1+2)& (0+255),f,b
  2028  0006CC  8F6D               	bsf	(___ftadd@f2+1)& (0+255),7,b
  2029                           
  2030                           ; BSR set to: 0
  2031  0006CE  0EFF               	movlw	255
  2032  0006D0  176C               	andwf	___ftadd@f2& (0+255),f,b
  2033  0006D2  0EFF               	movlw	255
  2034  0006D4  176D               	andwf	(___ftadd@f2+1)& (0+255),f,b
  2035  0006D6  0E00               	movlw	0
  2036  0006D8  176E               	andwf	(___ftadd@f2+2)& (0+255),f,b
  2037                           
  2038                           ; BSR set to: 0
  2039  0006DA  5173               	movf	___ftadd@exp2& (0+255),w,b
  2040  0006DC  5D74               	subwf	___ftadd@exp1& (0+255),w,b
  2041  0006DE  B0D8               	btfsc	status,0,c
  2042  0006E0  D01B               	goto	l626
  2043  0006E2                     u2230:
  2044                           
  2045                           ; BSR set to: 0
  2046                           
  2047                           ; BSR set to: 0
  2048  0006E2  90D8               	bcf	status,0,c
  2049  0006E4  376C               	rlcf	___ftadd@f2& (0+255),f,b
  2050  0006E6  376D               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  2051  0006E8  376E               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  2052  0006EA  0773               	decf	___ftadd@exp2& (0+255),f,b
  2053                           
  2054                           ; BSR set to: 0
  2055  0006EC  5174               	movf	___ftadd@exp1& (0+255),w,b
  2056  0006EE  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  2057  0006F0  B4D8               	btfsc	status,2,c
  2058  0006F2  D00D               	goto	l631
  2059                           
  2060                           ; BSR set to: 0
  2061  0006F4  0772               	decf	___ftadd@sign& (0+255),f,b
  2062  0006F6  C072  F06F         	movff	___ftadd@sign,??___ftadd
  2063  0006FA  0E07               	movlw	7
  2064  0006FC  176F               	andwf	??___ftadd& (0+255),f,b
  2065  0006FE  B4D8               	btfsc	status,2,c
  2066  000700  D006               	goto	l631
  2067  000702  D7EF               	goto	u2230
  2068  000704                     
  2069                           ; BSR set to: 0
  2070                           
  2071                           ; BSR set to: 0
  2072  000704  90D8               	bcf	status,0,c
  2073  000706  336B               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  2074  000708  336A               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  2075  00070A  3369               	rrcf	___ftadd@f1& (0+255),f,b
  2076  00070C  2B74               	incf	___ftadd@exp1& (0+255),f,b
  2077  00070E                     l631:
  2078                           
  2079                           ; BSR set to: 0
  2080                           
  2081                           ; BSR set to: 0
  2082  00070E  5173               	movf	___ftadd@exp2& (0+255),w,b
  2083  000710  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  2084  000712  B4D8               	btfsc	status,2,c
  2085  000714  D01F               	goto	u2300
  2086  000716  D7F6               	goto	l632
  2087  000718                     l626:
  2088                           
  2089                           ; BSR set to: 0
  2090                           
  2091                           ; BSR set to: 0
  2092  000718  5174               	movf	___ftadd@exp1& (0+255),w,b
  2093  00071A  5D73               	subwf	___ftadd@exp2& (0+255),w,b
  2094  00071C  B0D8               	btfsc	status,0,c
  2095  00071E  D01A               	goto	u2300
  2096  000720                     u2270:
  2097                           
  2098                           ; BSR set to: 0
  2099                           
  2100                           ; BSR set to: 0
  2101  000720  90D8               	bcf	status,0,c
  2102  000722  3769               	rlcf	___ftadd@f1& (0+255),f,b
  2103  000724  376A               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  2104  000726  376B               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  2105  000728  0774               	decf	___ftadd@exp1& (0+255),f,b
  2106                           
  2107                           ; BSR set to: 0
  2108  00072A  5174               	movf	___ftadd@exp1& (0+255),w,b
  2109  00072C  1973               	xorwf	___ftadd@exp2& (0+255),w,b
  2110  00072E  B4D8               	btfsc	status,2,c
  2111  000730  D00D               	goto	l640
  2112                           
  2113                           ; BSR set to: 0
  2114  000732  0772               	decf	___ftadd@sign& (0+255),f,b
  2115  000734  C072  F06F         	movff	___ftadd@sign,??___ftadd
  2116  000738  0E07               	movlw	7
  2117  00073A  176F               	andwf	??___ftadd& (0+255),f,b
  2118  00073C  B4D8               	btfsc	status,2,c
  2119  00073E  D006               	goto	l640
  2120  000740  D7EF               	goto	u2270
  2121  000742                     
  2122                           ; BSR set to: 0
  2123                           
  2124                           ; BSR set to: 0
  2125  000742  90D8               	bcf	status,0,c
  2126  000744  336E               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  2127  000746  336D               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  2128  000748  336C               	rrcf	___ftadd@f2& (0+255),f,b
  2129  00074A  2B73               	incf	___ftadd@exp2& (0+255),f,b
  2130  00074C                     l640:
  2131                           
  2132                           ; BSR set to: 0
  2133                           
  2134                           ; BSR set to: 0
  2135  00074C  5173               	movf	___ftadd@exp2& (0+255),w,b
  2136  00074E  1974               	xorwf	___ftadd@exp1& (0+255),w,b
  2137  000750  A4D8               	btfss	status,2,c
  2138  000752  D7F7               	goto	l641
  2139  000754                     u2300:
  2140                           
  2141                           ; BSR set to: 0
  2142                           
  2143                           ; BSR set to: 0
  2144                           
  2145                           ; BSR set to: 0
  2146  000754  AF72               	btfss	___ftadd@sign& (0+255),7,b
  2147  000756  D00C               	goto	l643
  2148                           
  2149                           ; BSR set to: 0
  2150  000758  0EFF               	movlw	255
  2151  00075A  1B69               	xorwf	___ftadd@f1& (0+255),f,b
  2152  00075C  0EFF               	movlw	255
  2153  00075E  1B6A               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  2154  000760  0EFF               	movlw	255
  2155  000762  1B6B               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  2156  000764  0E01               	movlw	1
  2157  000766  2769               	addwf	___ftadd@f1& (0+255),f,b
  2158  000768  0E00               	movlw	0
  2159  00076A  236A               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  2160  00076C  0E00               	movlw	0
  2161  00076E  236B               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  2162  000770                     l643:
  2163                           
  2164                           ; BSR set to: 0
  2165  000770  AD72               	btfss	___ftadd@sign& (0+255),6,b
  2166  000772  D00C               	goto	l644
  2167                           
  2168                           ; BSR set to: 0
  2169  000774  0EFF               	movlw	255
  2170  000776  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  2171  000778  0EFF               	movlw	255
  2172  00077A  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2173  00077C  0EFF               	movlw	255
  2174  00077E  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2175  000780  0E01               	movlw	1
  2176  000782  276C               	addwf	___ftadd@f2& (0+255),f,b
  2177  000784  0E00               	movlw	0
  2178  000786  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2179  000788  0E00               	movlw	0
  2180  00078A  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2181  00078C                     l644:
  2182                           
  2183                           ; BSR set to: 0
  2184                           
  2185                           ; BSR set to: 0
  2186  00078C  0E00               	movlw	0
  2187  00078E  6F72               	movwf	___ftadd@sign& (0+255),b
  2188                           
  2189                           ; BSR set to: 0
  2190  000790  5169               	movf	___ftadd@f1& (0+255),w,b
  2191  000792  276C               	addwf	___ftadd@f2& (0+255),f,b
  2192  000794  516A               	movf	(___ftadd@f1+1)& (0+255),w,b
  2193  000796  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2194  000798  516B               	movf	(___ftadd@f1+2)& (0+255),w,b
  2195  00079A  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2196                           
  2197                           ; BSR set to: 0
  2198  00079C  AF6E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2199  00079E  D00E               	goto	l645
  2200                           
  2201                           ; BSR set to: 0
  2202  0007A0  0EFF               	movlw	255
  2203  0007A2  1B6C               	xorwf	___ftadd@f2& (0+255),f,b
  2204  0007A4  0EFF               	movlw	255
  2205  0007A6  1B6D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2206  0007A8  0EFF               	movlw	255
  2207  0007AA  1B6E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2208  0007AC  0E01               	movlw	1
  2209  0007AE  276C               	addwf	___ftadd@f2& (0+255),f,b
  2210  0007B0  0E00               	movlw	0
  2211  0007B2  236D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2212  0007B4  0E00               	movlw	0
  2213  0007B6  236E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2214                           
  2215                           ; BSR set to: 0
  2216  0007B8  0E01               	movlw	1
  2217  0007BA  6F72               	movwf	___ftadd@sign& (0+255),b
  2218  0007BC                     l645:
  2219                           
  2220                           ; BSR set to: 0
  2221                           
  2222                           ; BSR set to: 0
  2223  0007BC  C06C  F021         	movff	___ftadd@f2,___ftpack@arg
  2224  0007C0  C06D  F022         	movff	___ftadd@f2+1,___ftpack@arg+1
  2225  0007C4  C06E  F023         	movff	___ftadd@f2+2,___ftpack@arg+2
  2226  0007C8  C074  F024         	movff	___ftadd@exp1,___ftpack@exp
  2227  0007CC  C072  F025         	movff	___ftadd@sign,___ftpack@sign
  2228  0007D0  ECAC  F006         	call	___ftpack	;wreg free
  2229  0007D4  C021  F069         	movff	?___ftpack,?___ftadd
  2230  0007D8  C022  F06A         	movff	?___ftpack+1,?___ftadd+1
  2231  0007DC  C023  F06B         	movff	?___ftpack+2,?___ftadd+2
  2232  0007E0  0012               	return	
  2233  0007E2                     __end_of___ftadd:
  2234                           	opt stack 0
  2235                           tblptru	equ	0xFF8
  2236                           tblptrh	equ	0xFF7
  2237                           tblptrl	equ	0xFF6
  2238                           tablat	equ	0xFF5
  2239                           postinc0	equ	0xFEE
  2240                           postdec1	equ	0xFE5
  2241                           fsr1l	equ	0xFE1
  2242                           postinc2	equ	0xFDE
  2243                           postdec2	equ	0xFDD
  2244                           fsr2h	equ	0xFDA
  2245                           fsr2l	equ	0xFD9
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function ___awtoft *****************
  2249 ;; Defined at:
  2250 ;;		line 32 in file "/opt/microchip/xc8/v1.44/sources/common/awtoft.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;  c               2   46[COMRAM] int 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  sign            1   49[COMRAM] unsigned char 
  2255 ;; Return value:  Size  Location     Type
  2256 ;;                  3   46[COMRAM] float 
  2257 ;; Registers used:
  2258 ;;		wreg, status,2, status,0, cstack
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2264 ;;      Params:         3       0       0       0       0       0       0
  2265 ;;      Locals:         1       0       0       0       0       0       0
  2266 ;;      Temps:          0       0       0       0       0       0       0
  2267 ;;      Totals:         4       0       0       0       0       0       0
  2268 ;;Total ram usage:        4 bytes
  2269 ;; Hardware stack levels used:    1
  2270 ;; Hardware stack levels required when called:    4
  2271 ;; This function calls:
  2272 ;;		___ftpack
  2273 ;; This function is called by:
  2274 ;;		_get_temp
  2275 ;;		_log
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           	psect	text11
  2280  0011D4                     __ptext11:
  2281                           	opt stack 0
  2282  0011D4                     ___awtoft:
  2283                           	opt stack 22
  2284                           
  2285                           ;incstack = 0
  2286  0011D4  0E00               	movlw	0
  2287  0011D6  6E32               	movwf	___awtoft@sign,c
  2288  0011D8  AE30               	btfss	___awtoft@c+1,7,c
  2289  0011DA  D006               	goto	l567
  2290  0011DC  6C2F               	negf	___awtoft@c,c
  2291  0011DE  1E30               	comf	___awtoft@c+1,f,c
  2292  0011E0  B0D8               	btfsc	status,0,c
  2293  0011E2  2A30               	incf	___awtoft@c+1,f,c
  2294  0011E4  0E01               	movlw	1
  2295  0011E6  6E32               	movwf	___awtoft@sign,c
  2296  0011E8                     l567:
  2297  0011E8  C02F  F021         	movff	___awtoft@c,___ftpack@arg
  2298  0011EC  C030  F022         	movff	___awtoft@c+1,___ftpack@arg+1
  2299  0011F0  6A23               	clrf	___ftpack@arg+2,c
  2300  0011F2  0E8E               	movlw	142
  2301  0011F4  6E24               	movwf	___ftpack@exp,c
  2302  0011F6  C032  F025         	movff	___awtoft@sign,___ftpack@sign
  2303  0011FA  ECAC  F006         	call	___ftpack	;wreg free
  2304  0011FE  C021  F02F         	movff	?___ftpack,?___awtoft
  2305  001202  C022  F030         	movff	?___ftpack+1,?___awtoft+1
  2306  001206  C023  F031         	movff	?___ftpack+2,?___awtoft+2
  2307  00120A  0012               	return	
  2308  00120C                     __end_of___awtoft:
  2309                           	opt stack 0
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           postinc0	equ	0xFEE
  2315                           postdec1	equ	0xFE5
  2316                           fsr1l	equ	0xFE1
  2317                           postinc2	equ	0xFDE
  2318                           postdec2	equ	0xFDD
  2319                           fsr2h	equ	0xFDA
  2320                           fsr2l	equ	0xFD9
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function ___ftpack *****************
  2324 ;; Defined at:
  2325 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/float.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  arg             3   32[COMRAM] unsigned um
  2328 ;;  exp             1   35[COMRAM] unsigned char 
  2329 ;;  sign            1   36[COMRAM] unsigned char 
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;		None
  2332 ;; Return value:  Size  Location     Type
  2333 ;;                  3   32[COMRAM] float 
  2334 ;; Registers used:
  2335 ;;		wreg, status,2, status,0
  2336 ;; Tracked objects:
  2337 ;;		On entry : 0/0
  2338 ;;		On exit  : 0/0
  2339 ;;		Unchanged: 0/0
  2340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2341 ;;      Params:         5       0       0       0       0       0       0
  2342 ;;      Locals:         0       0       0       0       0       0       0
  2343 ;;      Temps:          3       0       0       0       0       0       0
  2344 ;;      Totals:         8       0       0       0       0       0       0
  2345 ;;Total ram usage:        8 bytes
  2346 ;; Hardware stack levels used:    1
  2347 ;; Hardware stack levels required when called:    3
  2348 ;; This function calls:
  2349 ;;		Nothing
  2350 ;; This function is called by:
  2351 ;;		___awtoft
  2352 ;;		___ftadd
  2353 ;;		___ftmul
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text12
  2358  000D58                     __ptext12:
  2359                           	opt stack 0
  2360  000D58                     ___ftpack:
  2361                           	opt stack 21
  2362                           
  2363                           ;incstack = 0
  2364  000D58  5024               	movf	___ftpack@exp,w,c
  2365  000D5A  B4D8               	btfsc	status,2,c
  2366  000D5C  D005               	goto	u1200
  2367  000D5E  5021               	movf	___ftpack@arg,w,c
  2368  000D60  1022               	iorwf	___ftpack@arg+1,w,c
  2369  000D62  1023               	iorwf	___ftpack@arg+2,w,c
  2370  000D64  A4D8               	btfss	status,2,c
  2371  000D66  D00C               	goto	l586
  2372  000D68                     u1200:
  2373  000D68  0E00               	movlw	0
  2374  000D6A  6E21               	movwf	?___ftpack,c
  2375  000D6C  0E00               	movlw	0
  2376  000D6E  6E22               	movwf	?___ftpack+1,c
  2377  000D70  0E00               	movlw	0
  2378  000D72  6E23               	movwf	?___ftpack+2,c
  2379  000D74  0012               	return	
  2380  000D76  2A24               	incf	___ftpack@exp,f,c
  2381  000D78  90D8               	bcf	status,0,c
  2382  000D7A  3223               	rrcf	___ftpack@arg+2,f,c
  2383  000D7C  3222               	rrcf	___ftpack@arg+1,f,c
  2384  000D7E  3221               	rrcf	___ftpack@arg,f,c
  2385  000D80                     l586:
  2386  000D80  0E00               	movlw	0
  2387  000D82  1421               	andwf	___ftpack@arg,w,c
  2388  000D84  6E26               	movwf	??___ftpack& (0+255),c
  2389  000D86  0E00               	movlw	0
  2390  000D88  1422               	andwf	___ftpack@arg+1,w,c
  2391  000D8A  6E27               	movwf	(??___ftpack+1)& (0+255),c
  2392  000D8C  0EFE               	movlw	254
  2393  000D8E  1423               	andwf	___ftpack@arg+2,w,c
  2394  000D90  6E28               	movwf	(??___ftpack+2)& (0+255),c
  2395  000D92  5026               	movf	??___ftpack,w,c
  2396  000D94  1027               	iorwf	??___ftpack+1,w,c
  2397  000D96  1028               	iorwf	??___ftpack+2,w,c
  2398  000D98  B4D8               	btfsc	status,2,c
  2399  000D9A  D00C               	goto	l589
  2400  000D9C  D7EC               	goto	l587
  2401  000D9E  2A24               	incf	___ftpack@exp,f,c
  2402  000DA0  0E01               	movlw	1
  2403  000DA2  2621               	addwf	___ftpack@arg,f,c
  2404  000DA4  0E00               	movlw	0
  2405  000DA6  2222               	addwfc	___ftpack@arg+1,f,c
  2406  000DA8  0E00               	movlw	0
  2407  000DAA  2223               	addwfc	___ftpack@arg+2,f,c
  2408  000DAC  90D8               	bcf	status,0,c
  2409  000DAE  3223               	rrcf	___ftpack@arg+2,f,c
  2410  000DB0  3222               	rrcf	___ftpack@arg+1,f,c
  2411  000DB2  3221               	rrcf	___ftpack@arg,f,c
  2412  000DB4                     l589:
  2413  000DB4  0E00               	movlw	0
  2414  000DB6  1421               	andwf	___ftpack@arg,w,c
  2415  000DB8  6E26               	movwf	??___ftpack& (0+255),c
  2416  000DBA  0E00               	movlw	0
  2417  000DBC  1422               	andwf	___ftpack@arg+1,w,c
  2418  000DBE  6E27               	movwf	(??___ftpack+1)& (0+255),c
  2419  000DC0  0EFF               	movlw	255
  2420  000DC2  1423               	andwf	___ftpack@arg+2,w,c
  2421  000DC4  6E28               	movwf	(??___ftpack+2)& (0+255),c
  2422  000DC6  5026               	movf	??___ftpack,w,c
  2423  000DC8  1027               	iorwf	??___ftpack+1,w,c
  2424  000DCA  1028               	iorwf	??___ftpack+2,w,c
  2425  000DCC  B4D8               	btfsc	status,2,c
  2426  000DCE  D006               	goto	l592
  2427  000DD0  D7E6               	goto	l590
  2428  000DD2  0624               	decf	___ftpack@exp,f,c
  2429  000DD4  90D8               	bcf	status,0,c
  2430  000DD6  3621               	rlcf	___ftpack@arg,f,c
  2431  000DD8  3622               	rlcf	___ftpack@arg+1,f,c
  2432  000DDA  3623               	rlcf	___ftpack@arg+2,f,c
  2433  000DDC                     l592:
  2434  000DDC  BE22               	btfsc	___ftpack@arg+1,7,c
  2435  000DDE  D003               	goto	u1240
  2436  000DE0  0E02               	movlw	2
  2437  000DE2  6024               	cpfslt	___ftpack@exp,c
  2438  000DE4  D7F6               	goto	l593
  2439  000DE6                     u1240:
  2440  000DE6  A024               	btfss	___ftpack@exp,0,c
  2441  000DE8  9E22               	bcf	___ftpack@arg+1,7,c
  2442  000DEA  90D8               	bcf	status,0,c
  2443  000DEC  3224               	rrcf	___ftpack@exp,f,c
  2444  000DEE  5024               	movf	___ftpack@exp,w,c
  2445  000DF0  1223               	iorwf	___ftpack@arg+2,f,c
  2446  000DF2  5025               	movf	___ftpack@sign,w,c
  2447  000DF4  A4D8               	btfss	status,2,c
  2448  000DF6  8E23               	bsf	___ftpack@arg+2,7,c
  2449  000DF8  C021  F021         	movff	___ftpack@arg,?___ftpack
  2450  000DFC  C022  F022         	movff	___ftpack@arg+1,?___ftpack+1
  2451  000E00  C023  F023         	movff	___ftpack@arg+2,?___ftpack+2
  2452  000E04  0012               	return	
  2453  000E06                     __end_of___ftpack:
  2454                           	opt stack 0
  2455                           tblptru	equ	0xFF8
  2456                           tblptrh	equ	0xFF7
  2457                           tblptrl	equ	0xFF6
  2458                           tablat	equ	0xFF5
  2459                           postinc0	equ	0xFEE
  2460                           postdec1	equ	0xFE5
  2461                           fsr1l	equ	0xFE1
  2462                           postinc2	equ	0xFDE
  2463                           postdec2	equ	0xFDD
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function ___fttol *****************
  2469 ;; Defined at:
  2470 ;;		line 44 in file "/opt/microchip/xc8/v1.44/sources/common/fttol.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  f1              3   38[BANK0 ] float 
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;  lval            4   48[BANK0 ] unsigned long 
  2475 ;;  exp1            1   52[BANK0 ] unsigned char 
  2476 ;;  sign1           1   47[BANK0 ] unsigned char 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  4   38[BANK0 ] long 
  2479 ;; Registers used:
  2480 ;;		wreg, status,2, status,0
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2486 ;;      Params:         0       4       0       0       0       0       0
  2487 ;;      Locals:         0       6       0       0       0       0       0
  2488 ;;      Temps:          0       5       0       0       0       0       0
  2489 ;;      Totals:         0      15       0       0       0       0       0
  2490 ;;Total ram usage:       15 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    3
  2493 ;; This function calls:
  2494 ;;		Nothing
  2495 ;; This function is called by:
  2496 ;;		_get_temp
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text13
  2501  000902                     __ptext13:
  2502                           	opt stack 0
  2503  000902                     ___fttol:
  2504                           	opt stack 24
  2505                           
  2506                           ;incstack = 0
  2507  000902  C088  F08A         	movff	___fttol@f1+2,??___fttol
  2508  000906  0100               	movlb	0	; () banked
  2509  000908  6B8B               	clrf	(??___fttol+1)& (0+255),b
  2510  00090A  6B8C               	clrf	(??___fttol+2)& (0+255),b
  2511  00090C  3587               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2512  00090E  378A               	rlcf	??___fttol& (0+255),f,b
  2513  000910  E301               	bnc	u1731
  2514  000912  818B               	bsf	(??___fttol+1)& (0+255),0,b
  2515  000914                     u1731:
  2516  000914  518A               	movf	??___fttol& (0+255),w,b
  2517  000916  6F94               	movwf	___fttol@exp1& (0+255),b
  2518  000918  5194               	movf	___fttol@exp1& (0+255),w,b
  2519  00091A  A4D8               	btfss	status,2,c
  2520  00091C  D009               	goto	l686
  2521                           
  2522                           ; BSR set to: 0
  2523  00091E  0E00               	movlw	0
  2524  000920  6F86               	movwf	?___fttol& (0+255),b
  2525  000922  0E00               	movlw	0
  2526  000924  6F87               	movwf	(?___fttol+1)& (0+255),b
  2527  000926  0E00               	movlw	0
  2528  000928  6F88               	movwf	(?___fttol+2)& (0+255),b
  2529  00092A  0E00               	movlw	0
  2530  00092C  6F89               	movwf	(?___fttol+3)& (0+255),b
  2531                           
  2532                           ; BSR set to: 0
  2533  00092E  0012               	return	
  2534  000930                     l686:
  2535                           
  2536                           ; BSR set to: 0
  2537                           
  2538                           ; BSR set to: 0
  2539  000930  0E17               	movlw	23
  2540  000932  6F8A               	movwf	??___fttol& (0+255),b
  2541  000934  C086  F08B         	movff	___fttol@f1,??___fttol+1
  2542  000938  C087  F08C         	movff	___fttol@f1+1,??___fttol+2
  2543  00093C  C088  F08D         	movff	___fttol@f1+2,??___fttol+3
  2544  000940  298A               	incf	??___fttol& (0+255),w,b
  2545  000942  6F8E               	movwf	(??___fttol+4)& (0+255),b
  2546  000944  D004               	goto	u1750
  2547  000946                     u1755:
  2548  000946  90D8               	bcf	status,0,c
  2549  000948  338D               	rrcf	(??___fttol+3)& (0+255),f,b
  2550  00094A  338C               	rrcf	(??___fttol+2)& (0+255),f,b
  2551  00094C  338B               	rrcf	(??___fttol+1)& (0+255),f,b
  2552  00094E                     u1750:
  2553  00094E  2F8E               	decfsz	(??___fttol+4)& (0+255),f,b
  2554  000950  D7FA               	goto	u1755
  2555  000952  0100               	movlb	0	; () banked
  2556  000954  518B               	movf	(??___fttol+1)& (0+255),w,b
  2557  000956  6F8F               	movwf	___fttol@sign1& (0+255),b
  2558                           
  2559                           ; BSR set to: 0
  2560  000958  8F87               	bsf	(___fttol@f1+1)& (0+255),7,b
  2561                           
  2562                           ; BSR set to: 0
  2563  00095A  0EFF               	movlw	255
  2564  00095C  1786               	andwf	___fttol@f1& (0+255),f,b
  2565  00095E  0EFF               	movlw	255
  2566  000960  1787               	andwf	(___fttol@f1+1)& (0+255),f,b
  2567  000962  0E00               	movlw	0
  2568  000964  1788               	andwf	(___fttol@f1+2)& (0+255),f,b
  2569                           
  2570                           ; BSR set to: 0
  2571  000966  5186               	movf	___fttol@f1& (0+255),w,b
  2572  000968  6F90               	movwf	___fttol@lval& (0+255),b
  2573  00096A  5187               	movf	(___fttol@f1+1)& (0+255),w,b
  2574  00096C  6F91               	movwf	(___fttol@lval+1)& (0+255),b
  2575  00096E  5188               	movf	(___fttol@f1+2)& (0+255),w,b
  2576  000970  6F92               	movwf	(___fttol@lval+2)& (0+255),b
  2577  000972  6B93               	clrf	(___fttol@lval+3)& (0+255),b
  2578                           
  2579                           ; BSR set to: 0
  2580  000974  0E8E               	movlw	142
  2581  000976  5F94               	subwf	___fttol@exp1& (0+255),f,b
  2582                           
  2583                           ; BSR set to: 0
  2584  000978  AF94               	btfss	___fttol@exp1& (0+255),7,b
  2585  00097A  D016               	goto	l688
  2586                           
  2587                           ; BSR set to: 0
  2588  00097C  5194               	movf	___fttol@exp1& (0+255),w,b
  2589  00097E  0A80               	xorlw	128
  2590  000980  0F8F               	addlw	143
  2591  000982  B0D8               	btfsc	status,0,c
  2592  000984  D009               	goto	l689
  2593                           
  2594                           ; BSR set to: 0
  2595  000986  0E00               	movlw	0
  2596  000988  6F86               	movwf	?___fttol& (0+255),b
  2597  00098A  0E00               	movlw	0
  2598  00098C  6F87               	movwf	(?___fttol+1)& (0+255),b
  2599  00098E  0E00               	movlw	0
  2600  000990  6F88               	movwf	(?___fttol+2)& (0+255),b
  2601  000992  0E00               	movlw	0
  2602  000994  6F89               	movwf	(?___fttol+3)& (0+255),b
  2603                           
  2604                           ; BSR set to: 0
  2605  000996  0012               	return	
  2606  000998                     l689:
  2607                           
  2608                           ; BSR set to: 0
  2609                           
  2610                           ; BSR set to: 0
  2611                           
  2612                           ; BSR set to: 0
  2613  000998  90D8               	bcf	status,0,c
  2614  00099A  3393               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2615  00099C  3392               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2616  00099E  3391               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2617  0009A0  3390               	rrcf	___fttol@lval& (0+255),f,b
  2618                           
  2619                           ; BSR set to: 0
  2620  0009A2  3F94               	incfsz	___fttol@exp1& (0+255),f,b
  2621  0009A4  D7F9               	goto	l689
  2622                           
  2623                           ; BSR set to: 0
  2624  0009A6  D015               	goto	u1790
  2625  0009A8                     l688:
  2626                           
  2627                           ; BSR set to: 0
  2628                           
  2629                           ; BSR set to: 0
  2630  0009A8  0E17               	movlw	23
  2631  0009AA  6594               	cpfsgt	___fttol@exp1& (0+255),b
  2632  0009AC  D00F               	goto	l694
  2633                           
  2634                           ; BSR set to: 0
  2635  0009AE  0E00               	movlw	0
  2636  0009B0  6F86               	movwf	?___fttol& (0+255),b
  2637  0009B2  0E00               	movlw	0
  2638  0009B4  6F87               	movwf	(?___fttol+1)& (0+255),b
  2639  0009B6  0E00               	movlw	0
  2640  0009B8  6F88               	movwf	(?___fttol+2)& (0+255),b
  2641  0009BA  0E00               	movlw	0
  2642  0009BC  6F89               	movwf	(?___fttol+3)& (0+255),b
  2643                           
  2644                           ; BSR set to: 0
  2645  0009BE  0012               	return	
  2646  0009C0                     
  2647                           ; BSR set to: 0
  2648                           
  2649                           ; BSR set to: 0
  2650  0009C0  90D8               	bcf	status,0,c
  2651  0009C2  3790               	rlcf	___fttol@lval& (0+255),f,b
  2652  0009C4  3791               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2653  0009C6  3792               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2654  0009C8  3793               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2655  0009CA  0794               	decf	___fttol@exp1& (0+255),f,b
  2656  0009CC                     l694:
  2657                           
  2658                           ; BSR set to: 0
  2659                           
  2660                           ; BSR set to: 0
  2661  0009CC  5194               	movf	___fttol@exp1& (0+255),w,b
  2662  0009CE  A4D8               	btfss	status,2,c
  2663  0009D0  D7F7               	goto	l695
  2664  0009D2                     u1790:
  2665                           
  2666                           ; BSR set to: 0
  2667                           
  2668                           ; BSR set to: 0
  2669                           
  2670                           ; BSR set to: 0
  2671  0009D2  518F               	movf	___fttol@sign1& (0+255),w,b
  2672  0009D4  B4D8               	btfsc	status,2,c
  2673  0009D6  D008               	goto	l697
  2674                           
  2675                           ; BSR set to: 0
  2676  0009D8  1F93               	comf	(___fttol@lval+3)& (0+255),f,b
  2677  0009DA  1F92               	comf	(___fttol@lval+2)& (0+255),f,b
  2678  0009DC  1F91               	comf	(___fttol@lval+1)& (0+255),f,b
  2679  0009DE  6D90               	negf	___fttol@lval& (0+255),b
  2680  0009E0  0E00               	movlw	0
  2681  0009E2  2391               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2682  0009E4  2392               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2683  0009E6  2393               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2684  0009E8                     l697:
  2685                           
  2686                           ; BSR set to: 0
  2687                           
  2688                           ; BSR set to: 0
  2689  0009E8  C090  F086         	movff	___fttol@lval,?___fttol
  2690  0009EC  C091  F087         	movff	___fttol@lval+1,?___fttol+1
  2691  0009F0  C092  F088         	movff	___fttol@lval+2,?___fttol+2
  2692  0009F4  C093  F089         	movff	___fttol@lval+3,?___fttol+3
  2693  0009F8  0012               	return	
  2694  0009FA                     __end_of___fttol:
  2695                           	opt stack 0
  2696                           tblptru	equ	0xFF8
  2697                           tblptrh	equ	0xFF7
  2698                           tblptrl	equ	0xFF6
  2699                           tablat	equ	0xFF5
  2700                           postinc0	equ	0xFEE
  2701                           postdec1	equ	0xFE5
  2702                           fsr1l	equ	0xFE1
  2703                           postinc2	equ	0xFDE
  2704                           postdec2	equ	0xFDD
  2705                           fsr2h	equ	0xFDA
  2706                           fsr2l	equ	0xFD9
  2707                           status	equ	0xFD8
  2708                           
  2709 ;; *************** function _display_speed *****************
  2710 ;; Defined at:
  2711 ;;		line 225 in file "hmi.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;		None
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;		None
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      void 
  2718 ;; Registers used:
  2719 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2725 ;;      Params:         0       0       0       0       0       0       0
  2726 ;;      Locals:         0       0       0       0       0       0       0
  2727 ;;      Temps:          0       0       0       0       0       0       0
  2728 ;;      Totals:         0       0       0       0       0       0       0
  2729 ;;Total ram usage:        0 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    8
  2732 ;; This function calls:
  2733 ;;		_integerToLcd
  2734 ;; This function is called by:
  2735 ;;		_hmi_out
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text14
  2740  001372                     __ptext14:
  2741                           	opt stack 0
  2742  001372                     _display_speed:
  2743                           	opt stack 21
  2744                           
  2745                           ;hmi.c: 227: integerToLcd(speed);
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;incstack = 0
  2749  001372  C03B  F035         	movff	_speed,integerToLcd@num
  2750  001376  C03C  F036         	movff	_speed+1,integerToLcd@num+1
  2751  00137A  EC4E  F006         	call	_integerToLcd	;wreg free
  2752  00137E  0012               	return		;funcret
  2753  001380                     __end_of_display_speed:
  2754                           	opt stack 0
  2755                           tblptru	equ	0xFF8
  2756                           tblptrh	equ	0xFF7
  2757                           tblptrl	equ	0xFF6
  2758                           tablat	equ	0xFF5
  2759                           postinc0	equ	0xFEE
  2760                           postdec1	equ	0xFE5
  2761                           fsr1l	equ	0xFE1
  2762                           postinc2	equ	0xFDE
  2763                           postdec2	equ	0xFDD
  2764                           fsr2h	equ	0xFDA
  2765                           fsr2l	equ	0xFD9
  2766                           status	equ	0xFD8
  2767                           
  2768 ;; *************** function _display_mode *****************
  2769 ;; Defined at:
  2770 ;;		line 204 in file "hmi.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;		None
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;		None
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  1    wreg      void 
  2777 ;; Registers used:
  2778 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2784 ;;      Params:         0       0       0       0       0       0       0
  2785 ;;      Locals:         0       0       0       0       0       0       0
  2786 ;;      Temps:          0       0       0       0       0       0       0
  2787 ;;      Totals:         0       0       0       0       0       0       0
  2788 ;;Total ram usage:        0 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    8
  2791 ;; This function calls:
  2792 ;;		_WriteLCD
  2793 ;; This function is called by:
  2794 ;;		_hmi_out
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text15
  2799  0012F4                     __ptext15:
  2800                           	opt stack 0
  2801  0012F4                     _display_mode:
  2802                           	opt stack 21
  2803                           
  2804                           ;hmi.c: 206: if(mode == 0)
  2805                           
  2806                           ;incstack = 0
  2807  0012F4  503D               	movf	_mode,w,c
  2808  0012F6  103E               	iorwf	_mode+1,w,c
  2809  0012F8  A4D8               	btfss	status,2,c
  2810  0012FA  D007               	goto	l141
  2811                           
  2812                           ;hmi.c: 207: WriteLCD("Auto");
  2813  0012FC  0E2D               	movlw	low STR_3
  2814  0012FE  6E27               	movwf	WriteLCD@message,c
  2815  001300  0E06               	movlw	high STR_3
  2816  001302  6E28               	movwf	WriteLCD@message+1,c
  2817  001304  EC0E  F008         	call	_WriteLCD	;wreg free
  2818  001308  0012               	return	
  2819  00130A                     l141:
  2820                           
  2821                           ;hmi.c: 208: else
  2822                           ;hmi.c: 209: WriteLCD("Manual");
  2823  00130A  0E1C               	movlw	low STR_4
  2824  00130C  6E27               	movwf	WriteLCD@message,c
  2825  00130E  0E06               	movlw	high STR_4
  2826  001310  6E28               	movwf	WriteLCD@message+1,c
  2827  001312  EC0E  F008         	call	_WriteLCD	;wreg free
  2828  001316  0012               	return	
  2829  001318                     __end_of_display_mode:
  2830                           	opt stack 0
  2831                           tblptru	equ	0xFF8
  2832                           tblptrh	equ	0xFF7
  2833                           tblptrl	equ	0xFF6
  2834                           tablat	equ	0xFF5
  2835                           postinc0	equ	0xFEE
  2836                           postdec1	equ	0xFE5
  2837                           fsr1l	equ	0xFE1
  2838                           postinc2	equ	0xFDE
  2839                           postdec2	equ	0xFDD
  2840                           fsr2h	equ	0xFDA
  2841                           fsr2l	equ	0xFD9
  2842                           status	equ	0xFD8
  2843                           
  2844 ;; *************** function _adcToLcd *****************
  2845 ;; Defined at:
  2846 ;;		line 155 in file "hmi.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;		None
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  result          2   54[COMRAM] int 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2860 ;;      Params:         0       0       0       0       0       0       0
  2861 ;;      Locals:         2       0       0       0       0       0       0
  2862 ;;      Temps:          0       0       0       0       0       0       0
  2863 ;;      Totals:         2       0       0       0       0       0       0
  2864 ;;Total ram usage:        2 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    8
  2867 ;; This function calls:
  2868 ;;		_WriteLCD
  2869 ;;		_adc_poll
  2870 ;;		_clear_lcd
  2871 ;;		_delay
  2872 ;;		_integerToLcd
  2873 ;; This function is called by:
  2874 ;;		_main
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text16
  2879  00120C                     __ptext16:
  2880                           	opt stack 0
  2881  00120C                     _adcToLcd:
  2882                           	opt stack 22
  2883                           
  2884                           ;hmi.c: 157: clear_lcd();
  2885                           
  2886                           ;incstack = 0
  2887  00120C  ECCA  F009         	call	_clear_lcd	;wreg free
  2888                           
  2889                           ;hmi.c: 158: delay(5);
  2890  001210  0E00               	movlw	0
  2891  001212  6E22               	movwf	delay@x+1,c
  2892  001214  0E05               	movlw	5
  2893  001216  6E21               	movwf	delay@x,c
  2894  001218  EC22  F009         	call	_delay	;wreg free
  2895                           
  2896                           ;hmi.c: 159: ADCON0 = 0b00001011;
  2897  00121C  0E0B               	movlw	11
  2898  00121E  6EC2               	movwf	4034,c	;volatile
  2899                           
  2900                           ;hmi.c: 160: adc_poll();
  2901  001220  ECCE  F009         	call	_adc_poll	;wreg free
  2902                           
  2903                           ;hmi.c: 161: int result = ADRESH;
  2904  001224  CFC4 F037          	movff	4036,adcToLcd@result	;volatile
  2905  001228  6A38               	clrf	adcToLcd@result+1,c
  2906                           
  2907                           ;hmi.c: 162: WriteLCD("ADC:");
  2908  00122A  0E23               	movlw	low STR_1
  2909  00122C  6E27               	movwf	WriteLCD@message,c
  2910  00122E  0E06               	movlw	high STR_1
  2911  001230  6E28               	movwf	WriteLCD@message+1,c
  2912  001232  EC0E  F008         	call	_WriteLCD	;wreg free
  2913                           
  2914                           ;hmi.c: 163: integerToLcd(result);
  2915  001236  C037  F035         	movff	adcToLcd@result,integerToLcd@num
  2916  00123A  C038  F036         	movff	adcToLcd@result+1,integerToLcd@num+1
  2917  00123E  EC4E  F006         	call	_integerToLcd	;wreg free
  2918  001242  0012               	return		;funcret
  2919  001244                     __end_of_adcToLcd:
  2920                           	opt stack 0
  2921                           tblptru	equ	0xFF8
  2922                           tblptrh	equ	0xFF7
  2923                           tblptrl	equ	0xFF6
  2924                           tablat	equ	0xFF5
  2925                           postinc0	equ	0xFEE
  2926                           postdec1	equ	0xFE5
  2927                           fsr1l	equ	0xFE1
  2928                           postinc2	equ	0xFDE
  2929                           postdec2	equ	0xFDD
  2930                           fsr2h	equ	0xFDA
  2931                           fsr2l	equ	0xFD9
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function _integerToLcd *****************
  2935 ;; Defined at:
  2936 ;;		line 146 in file "lcd.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;  num             2   52[COMRAM] int 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  ones            1    3[BANK0 ] unsigned char 
  2941 ;;  tens            1    2[BANK0 ] unsigned char 
  2942 ;;  hundreds        1    1[BANK0 ] unsigned char 
  2943 ;;  thousands       1    0[BANK0 ] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      void 
  2946 ;; Registers used:
  2947 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2953 ;;      Params:         2       0       0       0       0       0       0
  2954 ;;      Locals:         0       4       0       0       0       0       0
  2955 ;;      Temps:          0       0       0       0       0       0       0
  2956 ;;      Totals:         2       4       0       0       0       0       0
  2957 ;;Total ram usage:        6 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; Hardware stack levels required when called:    7
  2960 ;; This function calls:
  2961 ;;		_WriteData
  2962 ;;		___awdiv
  2963 ;;		___awmod
  2964 ;;		___wmul
  2965 ;; This function is called by:
  2966 ;;		_adcToLcd
  2967 ;;		_display_temp
  2968 ;;		_display_speed
  2969 ;;		_display_light
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text17
  2974  000C9C                     __ptext17:
  2975                           	opt stack 0
  2976  000C9C                     _integerToLcd:
  2977                           	opt stack 21
  2978                           
  2979                           ;lcd.c: 150: unsigned char thousands ,hundreds,tens,ones;
  2980                           ;lcd.c: 151: thousands = num / 1000;
  2981                           
  2982                           ;incstack = 0
  2983  000C9C  C035  F027         	movff	integerToLcd@num,___awdiv@dividend
  2984  000CA0  C036  F028         	movff	integerToLcd@num+1,___awdiv@dividend+1
  2985  000CA4  0E03               	movlw	3
  2986  000CA6  6E2A               	movwf	___awdiv@divisor+1,c
  2987  000CA8  0EE8               	movlw	232
  2988  000CAA  6E29               	movwf	___awdiv@divisor,c
  2989  000CAC  EC94  F007         	call	___awdiv	;wreg free
  2990  000CB0  5027               	movf	?___awdiv,w,c
  2991  000CB2  0100               	movlb	0	; () banked
  2992  000CB4  6F60               	movwf	integerToLcd@thousands& (0+255),b
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;lcd.c: 153: hundreds = ((num - thousands*1000)-1) / 100;
  2996  000CB6  C060  F02F         	movff	integerToLcd@thousands,___wmul@multiplier
  2997  000CBA  6A30               	clrf	___wmul@multiplier+1,c
  2998  000CBC  0E03               	movlw	3
  2999  000CBE  6E32               	movwf	___wmul@multiplicand+1,c
  3000  000CC0  0EE8               	movlw	232
  3001  000CC2  6E31               	movwf	___wmul@multiplicand,c
  3002  000CC4  EC67  F009         	call	___wmul	;wreg free
  3003  000CC8  0E01               	movlw	1
  3004  000CCA  262F               	addwf	?___wmul,f,c
  3005  000CCC  0E00               	movlw	0
  3006  000CCE  2230               	addwfc	?___wmul+1,f,c
  3007  000CD0  1E2F               	comf	?___wmul,f,c
  3008  000CD2  1E30               	comf	?___wmul+1,f,c
  3009  000CD4  4A2F               	infsnz	?___wmul,f,c
  3010  000CD6  2A30               	incf	?___wmul+1,f,c
  3011  000CD8  5035               	movf	integerToLcd@num,w,c
  3012  000CDA  242F               	addwf	?___wmul,w,c
  3013  000CDC  6E27               	movwf	___awdiv@dividend,c
  3014  000CDE  5036               	movf	integerToLcd@num+1,w,c
  3015  000CE0  2030               	addwfc	?___wmul+1,w,c
  3016  000CE2  6E28               	movwf	___awdiv@dividend+1,c
  3017  000CE4  0E00               	movlw	0
  3018  000CE6  6E2A               	movwf	___awdiv@divisor+1,c
  3019  000CE8  0E64               	movlw	100
  3020  000CEA  6E29               	movwf	___awdiv@divisor,c
  3021  000CEC  EC94  F007         	call	___awdiv	;wreg free
  3022  000CF0  5027               	movf	?___awdiv,w,c
  3023  000CF2  0100               	movlb	0	; () banked
  3024  000CF4  6F61               	movwf	integerToLcd@hundreds& (0+255),b
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;lcd.c: 155: WriteData( hundreds + 0x30);
  3028  000CF6  5161               	movf	integerToLcd@hundreds& (0+255),w,b
  3029  000CF8  0F30               	addlw	48
  3030  000CFA  EC98  F009         	call	_WriteData
  3031                           
  3032                           ;lcd.c: 156: tens = (num%100)/10;
  3033  000CFE  0E00               	movlw	0
  3034  000D00  6E24               	movwf	___awmod@divisor+1,c
  3035  000D02  0E64               	movlw	100
  3036  000D04  6E23               	movwf	___awmod@divisor,c
  3037  000D06  C035  F021         	movff	integerToLcd@num,___awmod@dividend
  3038  000D0A  C036  F022         	movff	integerToLcd@num+1,___awmod@dividend+1
  3039  000D0E  ECD6  F007         	call	___awmod	;wreg free
  3040  000D12  C021  F027         	movff	?___awmod,___awdiv@dividend
  3041  000D16  C022  F028         	movff	?___awmod+1,___awdiv@dividend+1
  3042  000D1A  0E00               	movlw	0
  3043  000D1C  6E2A               	movwf	___awdiv@divisor+1,c
  3044  000D1E  0E0A               	movlw	10
  3045  000D20  6E29               	movwf	___awdiv@divisor,c
  3046  000D22  EC94  F007         	call	___awdiv	;wreg free
  3047  000D26  5027               	movf	?___awdiv,w,c
  3048  000D28  0100               	movlb	0	; () banked
  3049  000D2A  6F62               	movwf	integerToLcd@tens& (0+255),b
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;lcd.c: 158: WriteData( tens + 0x30);
  3053  000D2C  5162               	movf	integerToLcd@tens& (0+255),w,b
  3054  000D2E  0F30               	addlw	48
  3055  000D30  EC98  F009         	call	_WriteData
  3056                           
  3057                           ;lcd.c: 159: ones = num%10;
  3058  000D34  C035  F021         	movff	integerToLcd@num,___awmod@dividend
  3059  000D38  C036  F022         	movff	integerToLcd@num+1,___awmod@dividend+1
  3060  000D3C  0E00               	movlw	0
  3061  000D3E  6E24               	movwf	___awmod@divisor+1,c
  3062  000D40  0E0A               	movlw	10
  3063  000D42  6E23               	movwf	___awmod@divisor,c
  3064  000D44  ECD6  F007         	call	___awmod	;wreg free
  3065  000D48  5021               	movf	?___awmod,w,c
  3066  000D4A  0100               	movlb	0	; () banked
  3067  000D4C  6F63               	movwf	integerToLcd@ones& (0+255),b
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;lcd.c: 161: WriteData( ones + 0x30);
  3071  000D4E  5163               	movf	integerToLcd@ones& (0+255),w,b
  3072  000D50  0F30               	addlw	48
  3073  000D52  EC98  F009         	call	_WriteData
  3074  000D56  0012               	return		;funcret
  3075  000D58                     __end_of_integerToLcd:
  3076                           	opt stack 0
  3077                           tblptru	equ	0xFF8
  3078                           tblptrh	equ	0xFF7
  3079                           tblptrl	equ	0xFF6
  3080                           tablat	equ	0xFF5
  3081                           postinc0	equ	0xFEE
  3082                           postdec1	equ	0xFE5
  3083                           fsr1l	equ	0xFE1
  3084                           postinc2	equ	0xFDE
  3085                           postdec2	equ	0xFDD
  3086                           fsr2h	equ	0xFDA
  3087                           fsr2l	equ	0xFD9
  3088                           status	equ	0xFD8
  3089                           
  3090 ;; *************** function ___wmul *****************
  3091 ;; Defined at:
  3092 ;;		line 15 in file "/opt/microchip/xc8/v1.44/sources/common/Umul16.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;  multiplier      2   46[COMRAM] unsigned int 
  3095 ;;  multiplicand    2   48[COMRAM] unsigned int 
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;  product         2   50[COMRAM] unsigned int 
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  2   46[COMRAM] unsigned int 
  3100 ;; Registers used:
  3101 ;;		wreg, status,2, status,0, prodl, prodh
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3107 ;;      Params:         4       0       0       0       0       0       0
  3108 ;;      Locals:         2       0       0       0       0       0       0
  3109 ;;      Temps:          0       0       0       0       0       0       0
  3110 ;;      Totals:         6       0       0       0       0       0       0
  3111 ;;Total ram usage:        6 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; Hardware stack levels required when called:    3
  3114 ;; This function calls:
  3115 ;;		Nothing
  3116 ;; This function is called by:
  3117 ;;		_get_temp
  3118 ;;		_integerToLcd
  3119 ;;		_eval_poly
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text18
  3124  0012CE                     __ptext18:
  3125                           	opt stack 0
  3126  0012CE                     ___wmul:
  3127                           	opt stack 24
  3128                           
  3129                           ;incstack = 0
  3130  0012CE  502F               	movf	___wmul@multiplier,w,c
  3131  0012D0  0231               	mulwf	___wmul@multiplicand,c
  3132  0012D2  CFF3 F033          	movff	prodl,___wmul@product
  3133  0012D6  CFF4 F034          	movff	prodh,___wmul@product+1
  3134  0012DA  502F               	movf	___wmul@multiplier,w,c
  3135  0012DC  0232               	mulwf	___wmul@multiplicand+1,c
  3136  0012DE  50F3               	movf	prodl,w,c
  3137  0012E0  2634               	addwf	___wmul@product+1,f,c
  3138  0012E2  5030               	movf	___wmul@multiplier+1,w,c
  3139  0012E4  0231               	mulwf	___wmul@multiplicand,c
  3140  0012E6  50F3               	movf	prodl,w,c
  3141  0012E8  2634               	addwf	___wmul@product+1,f,c
  3142  0012EA  C033  F02F         	movff	___wmul@product,?___wmul
  3143  0012EE  C034  F030         	movff	___wmul@product+1,?___wmul+1
  3144  0012F2  0012               	return	
  3145  0012F4                     __end_of___wmul:
  3146                           	opt stack 0
  3147                           tblptru	equ	0xFF8
  3148                           tblptrh	equ	0xFF7
  3149                           tblptrl	equ	0xFF6
  3150                           tablat	equ	0xFF5
  3151                           prodh	equ	0xFF4
  3152                           prodl	equ	0xFF3
  3153                           postinc0	equ	0xFEE
  3154                           postdec1	equ	0xFE5
  3155                           fsr1l	equ	0xFE1
  3156                           postinc2	equ	0xFDE
  3157                           postdec2	equ	0xFDD
  3158                           fsr2h	equ	0xFDA
  3159                           fsr2l	equ	0xFD9
  3160                           status	equ	0xFD8
  3161                           
  3162 ;; *************** function ___awmod *****************
  3163 ;; Defined at:
  3164 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awmod.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  dividend        2   32[COMRAM] int 
  3167 ;;  divisor         2   34[COMRAM] int 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  sign            1   37[COMRAM] unsigned char 
  3170 ;;  counter         1   36[COMRAM] unsigned char 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  2   32[COMRAM] int 
  3173 ;; Registers used:
  3174 ;;		wreg, status,2, status,0
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3180 ;;      Params:         4       0       0       0       0       0       0
  3181 ;;      Locals:         2       0       0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0       0       0
  3183 ;;      Totals:         6       0       0       0       0       0       0
  3184 ;;Total ram usage:        6 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    3
  3187 ;; This function calls:
  3188 ;;		Nothing
  3189 ;; This function is called by:
  3190 ;;		_integerToLcd
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text19
  3195  000FAC                     __ptext19:
  3196                           	opt stack 0
  3197  000FAC                     ___awmod:
  3198                           	opt stack 24
  3199                           
  3200                           ;incstack = 0
  3201  000FAC  0E00               	movlw	0
  3202  000FAE  6E26               	movwf	___awmod@sign,c
  3203  000FB0  AE22               	btfss	___awmod@dividend+1,7,c
  3204  000FB2  D006               	goto	l552
  3205  000FB4  6C21               	negf	___awmod@dividend,c
  3206  000FB6  1E22               	comf	___awmod@dividend+1,f,c
  3207  000FB8  B0D8               	btfsc	status,0,c
  3208  000FBA  2A22               	incf	___awmod@dividend+1,f,c
  3209  000FBC  0E01               	movlw	1
  3210  000FBE  6E26               	movwf	___awmod@sign,c
  3211  000FC0                     l552:
  3212  000FC0  AE24               	btfss	___awmod@divisor+1,7,c
  3213  000FC2  D004               	goto	l553
  3214  000FC4  6C23               	negf	___awmod@divisor,c
  3215  000FC6  1E24               	comf	___awmod@divisor+1,f,c
  3216  000FC8  B0D8               	btfsc	status,0,c
  3217  000FCA  2A24               	incf	___awmod@divisor+1,f,c
  3218  000FCC                     l553:
  3219  000FCC  5023               	movf	___awmod@divisor,w,c
  3220  000FCE  1024               	iorwf	___awmod@divisor+1,w,c
  3221  000FD0  B4D8               	btfsc	status,2,c
  3222  000FD2  D018               	goto	l560
  3223  000FD4  0E01               	movlw	1
  3224  000FD6  6E25               	movwf	___awmod@counter,c
  3225  000FD8  D004               	goto	l555
  3226  000FDA  90D8               	bcf	status,0,c
  3227  000FDC  3623               	rlcf	___awmod@divisor,f,c
  3228  000FDE  3624               	rlcf	___awmod@divisor+1,f,c
  3229  000FE0  2A25               	incf	___awmod@counter,f,c
  3230  000FE2                     l555:
  3231  000FE2  AE24               	btfss	___awmod@divisor+1,7,c
  3232  000FE4  D7FA               	goto	l556
  3233  000FE6                     u2520:
  3234  000FE6  5023               	movf	___awmod@divisor,w,c
  3235  000FE8  5C21               	subwf	___awmod@dividend,w,c
  3236  000FEA  5024               	movf	___awmod@divisor+1,w,c
  3237  000FEC  5822               	subwfb	___awmod@dividend+1,w,c
  3238  000FEE  A0D8               	btfss	status,0,c
  3239  000FF0  D004               	goto	l559
  3240  000FF2  5023               	movf	___awmod@divisor,w,c
  3241  000FF4  5E21               	subwf	___awmod@dividend,f,c
  3242  000FF6  5024               	movf	___awmod@divisor+1,w,c
  3243  000FF8  5A22               	subwfb	___awmod@dividend+1,f,c
  3244  000FFA                     l559:
  3245  000FFA  90D8               	bcf	status,0,c
  3246  000FFC  3224               	rrcf	___awmod@divisor+1,f,c
  3247  000FFE  3223               	rrcf	___awmod@divisor,f,c
  3248  001000  2E25               	decfsz	___awmod@counter,f,c
  3249  001002  D7F1               	goto	u2520
  3250  001004                     l560:
  3251  001004  5026               	movf	___awmod@sign,w,c
  3252  001006  B4D8               	btfsc	status,2,c
  3253  001008  D004               	goto	l561
  3254  00100A  6C21               	negf	___awmod@dividend,c
  3255  00100C  1E22               	comf	___awmod@dividend+1,f,c
  3256  00100E  B0D8               	btfsc	status,0,c
  3257  001010  2A22               	incf	___awmod@dividend+1,f,c
  3258  001012                     l561:
  3259  001012  C021  F021         	movff	___awmod@dividend,?___awmod
  3260  001016  C022  F022         	movff	___awmod@dividend+1,?___awmod+1
  3261  00101A  0012               	return	
  3262  00101C                     __end_of___awmod:
  3263                           	opt stack 0
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           prodh	equ	0xFF4
  3269                           prodl	equ	0xFF3
  3270                           postinc0	equ	0xFEE
  3271                           postdec1	equ	0xFE5
  3272                           fsr1l	equ	0xFE1
  3273                           postinc2	equ	0xFDE
  3274                           postdec2	equ	0xFDD
  3275                           fsr2h	equ	0xFDA
  3276                           fsr2l	equ	0xFD9
  3277                           status	equ	0xFD8
  3278                           
  3279 ;; *************** function ___awdiv *****************
  3280 ;; Defined at:
  3281 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awdiv.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;  dividend        2   38[COMRAM] int 
  3284 ;;  divisor         2   40[COMRAM] int 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  quotient        2   44[COMRAM] int 
  3287 ;;  sign            1   43[COMRAM] unsigned char 
  3288 ;;  counter         1   42[COMRAM] unsigned char 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  2   38[COMRAM] int 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, status,0
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3298 ;;      Params:         4       0       0       0       0       0       0
  3299 ;;      Locals:         4       0       0       0       0       0       0
  3300 ;;      Temps:          0       0       0       0       0       0       0
  3301 ;;      Totals:         8       0       0       0       0       0       0
  3302 ;;Total ram usage:        8 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    3
  3305 ;; This function calls:
  3306 ;;		Nothing
  3307 ;; This function is called by:
  3308 ;;		_get_temp
  3309 ;;		_integerToLcd
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text20
  3314  000F28                     __ptext20:
  3315                           	opt stack 0
  3316  000F28                     ___awdiv:
  3317                           	opt stack 24
  3318                           
  3319                           ;incstack = 0
  3320  000F28  0E00               	movlw	0
  3321  000F2A  6E2C               	movwf	___awdiv@sign,c
  3322  000F2C  AE2A               	btfss	___awdiv@divisor+1,7,c
  3323  000F2E  D006               	goto	l539
  3324  000F30  6C29               	negf	___awdiv@divisor,c
  3325  000F32  1E2A               	comf	___awdiv@divisor+1,f,c
  3326  000F34  B0D8               	btfsc	status,0,c
  3327  000F36  2A2A               	incf	___awdiv@divisor+1,f,c
  3328  000F38  0E01               	movlw	1
  3329  000F3A  6E2C               	movwf	___awdiv@sign,c
  3330  000F3C                     l539:
  3331  000F3C  AE28               	btfss	___awdiv@dividend+1,7,c
  3332  000F3E  D006               	goto	l540
  3333  000F40  6C27               	negf	___awdiv@dividend,c
  3334  000F42  1E28               	comf	___awdiv@dividend+1,f,c
  3335  000F44  B0D8               	btfsc	status,0,c
  3336  000F46  2A28               	incf	___awdiv@dividend+1,f,c
  3337  000F48  0E01               	movlw	1
  3338  000F4A  1A2C               	xorwf	___awdiv@sign,f,c
  3339  000F4C                     l540:
  3340  000F4C  0E00               	movlw	0
  3341  000F4E  6E2E               	movwf	___awdiv@quotient+1,c
  3342  000F50  0E00               	movlw	0
  3343  000F52  6E2D               	movwf	___awdiv@quotient,c
  3344  000F54  5029               	movf	___awdiv@divisor,w,c
  3345  000F56  102A               	iorwf	___awdiv@divisor+1,w,c
  3346  000F58  B4D8               	btfsc	status,2,c
  3347  000F5A  D01C               	goto	l547
  3348  000F5C  0E01               	movlw	1
  3349  000F5E  6E2B               	movwf	___awdiv@counter,c
  3350  000F60  D004               	goto	l542
  3351  000F62  90D8               	bcf	status,0,c
  3352  000F64  3629               	rlcf	___awdiv@divisor,f,c
  3353  000F66  362A               	rlcf	___awdiv@divisor+1,f,c
  3354  000F68  2A2B               	incf	___awdiv@counter,f,c
  3355  000F6A                     l542:
  3356  000F6A  AE2A               	btfss	___awdiv@divisor+1,7,c
  3357  000F6C  D7FA               	goto	l543
  3358  000F6E                     u2460:
  3359  000F6E  90D8               	bcf	status,0,c
  3360  000F70  362D               	rlcf	___awdiv@quotient,f,c
  3361  000F72  362E               	rlcf	___awdiv@quotient+1,f,c
  3362  000F74  5029               	movf	___awdiv@divisor,w,c
  3363  000F76  5C27               	subwf	___awdiv@dividend,w,c
  3364  000F78  502A               	movf	___awdiv@divisor+1,w,c
  3365  000F7A  5828               	subwfb	___awdiv@dividend+1,w,c
  3366  000F7C  A0D8               	btfss	status,0,c
  3367  000F7E  D005               	goto	l546
  3368  000F80  5029               	movf	___awdiv@divisor,w,c
  3369  000F82  5E27               	subwf	___awdiv@dividend,f,c
  3370  000F84  502A               	movf	___awdiv@divisor+1,w,c
  3371  000F86  5A28               	subwfb	___awdiv@dividend+1,f,c
  3372  000F88  802D               	bsf	___awdiv@quotient,0,c
  3373  000F8A                     l546:
  3374  000F8A  90D8               	bcf	status,0,c
  3375  000F8C  322A               	rrcf	___awdiv@divisor+1,f,c
  3376  000F8E  3229               	rrcf	___awdiv@divisor,f,c
  3377  000F90  2E2B               	decfsz	___awdiv@counter,f,c
  3378  000F92  D7ED               	goto	u2460
  3379  000F94                     l547:
  3380  000F94  502C               	movf	___awdiv@sign,w,c
  3381  000F96  B4D8               	btfsc	status,2,c
  3382  000F98  D004               	goto	l548
  3383  000F9A  6C2D               	negf	___awdiv@quotient,c
  3384  000F9C  1E2E               	comf	___awdiv@quotient+1,f,c
  3385  000F9E  B0D8               	btfsc	status,0,c
  3386  000FA0  2A2E               	incf	___awdiv@quotient+1,f,c
  3387  000FA2                     l548:
  3388  000FA2  C02D  F027         	movff	___awdiv@quotient,?___awdiv
  3389  000FA6  C02E  F028         	movff	___awdiv@quotient+1,?___awdiv+1
  3390  000FAA  0012               	return	
  3391  000FAC                     __end_of___awdiv:
  3392                           	opt stack 0
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           prodh	equ	0xFF4
  3398                           prodl	equ	0xFF3
  3399                           postinc0	equ	0xFEE
  3400                           postdec1	equ	0xFE5
  3401                           fsr1l	equ	0xFE1
  3402                           postinc2	equ	0xFDE
  3403                           postdec2	equ	0xFDD
  3404                           fsr2h	equ	0xFDA
  3405                           fsr2l	equ	0xFD9
  3406                           status	equ	0xFD8
  3407                           
  3408 ;; *************** function _adc_poll *****************
  3409 ;; Defined at:
  3410 ;;		line 26 in file "sensors.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;		None
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      void 
  3417 ;; Registers used:
  3418 ;;		None
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3424 ;;      Params:         0       0       0       0       0       0       0
  3425 ;;      Locals:         0       0       0       0       0       0       0
  3426 ;;      Temps:          0       0       0       0       0       0       0
  3427 ;;      Totals:         0       0       0       0       0       0       0
  3428 ;;Total ram usage:        0 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    3
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_adcToLcd
  3435 ;;		_get_temp
  3436 ;;		_get_light
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text21
  3441  00139C                     __ptext21:
  3442                           	opt stack 0
  3443  00139C                     _adc_poll:
  3444                           	opt stack 24
  3445                           
  3446                           ;sensors.c: 28: while(ADCON0bits.GO);
  3447                           
  3448                           ;incstack = 0
  3449  00139C  A2C2               	btfss	4034,1,c	;volatile
  3450  00139E  0012               	return	
  3451  0013A0  D7FD               	goto	_adc_poll
  3452  0013A2                     __end_of_adc_poll:
  3453                           	opt stack 0
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           prodh	equ	0xFF4
  3459                           prodl	equ	0xFF3
  3460                           postinc0	equ	0xFEE
  3461                           postdec1	equ	0xFE5
  3462                           fsr1l	equ	0xFE1
  3463                           postinc2	equ	0xFDE
  3464                           postdec2	equ	0xFDD
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function _WriteLCD *****************
  3470 ;; Defined at:
  3471 ;;		line 87 in file "lcd.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;  message         2   38[COMRAM] PTR unsigned char 
  3474 ;;		 -> STR_4(7), STR_3(5), STR_2(5), STR_1(5), 
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;  i               1   42[COMRAM] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      void 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3486 ;;      Params:         2       0       0       0       0       0       0
  3487 ;;      Locals:         1       0       0       0       0       0       0
  3488 ;;      Temps:          2       0       0       0       0       0       0
  3489 ;;      Totals:         5       0       0       0       0       0       0
  3490 ;;Total ram usage:        5 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    7
  3493 ;; This function calls:
  3494 ;;		_WriteData
  3495 ;;		_delay
  3496 ;; This function is called by:
  3497 ;;		_adcToLcd
  3498 ;;		_hmi_out
  3499 ;;		_display_mode
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text22
  3504  00101C                     __ptext22:
  3505                           	opt stack 0
  3506  00101C                     _WriteLCD:
  3507                           	opt stack 21
  3508                           
  3509                           ;lcd.c: 89: delay(1);
  3510                           
  3511                           ;incstack = 0
  3512  00101C  0E00               	movlw	0
  3513  00101E  6E22               	movwf	delay@x+1,c
  3514  001020  0E01               	movlw	1
  3515  001022  6E21               	movwf	delay@x,c
  3516  001024  EC22  F009         	call	_delay	;wreg free
  3517                           
  3518                           ;lcd.c: 90: unsigned char i;
  3519                           ;lcd.c: 91: for(i=0; i<20; i++)
  3520  001028  0E00               	movlw	0
  3521  00102A  6E2B               	movwf	WriteLCD@i,c
  3522  00102C                     l2843:
  3523  00102C  0E13               	movlw	19
  3524  00102E  642B               	cpfsgt	WriteLCD@i,c
  3525  001030  D001               	goto	l348
  3526  001032  0012               	return	
  3527  001034                     l348:
  3528                           
  3529                           ;lcd.c: 92: {
  3530                           ;lcd.c: 93: if( !message[i] )
  3531  001034  502B               	movf	WriteLCD@i,w,c
  3532  001036  0D01               	mullw	1
  3533  001038  C027  F029         	movff	WriteLCD@message,??_WriteLCD
  3534  00103C  C028  F02A         	movff	WriteLCD@message+1,??_WriteLCD+1
  3535  001040  50F3               	movf	prodl,w,c
  3536  001042  2629               	addwf	??_WriteLCD,f,c
  3537  001044  50F4               	movf	prodh,w,c
  3538  001046  222A               	addwfc	??_WriteLCD+1,f,c
  3539  001048  C029  FFF6         	movff	??_WriteLCD,tblptrl
  3540  00104C  C02A  FFF7         	movff	??_WriteLCD+1,tblptrh
  3541  001050                     	if	0	;tblptru may be non-zero
  3542  001050                     	endif
  3543  001050                     	if	0	;tblptru may be non-zero
  3544  001050                     	endif
  3545  001050  0008               	tblrd		*
  3546  001052  50F5               	movf	tablat,w,c
  3547  001054  0900               	iorlw	0
  3548  001056  B4D8               	btfsc	status,2,c
  3549  001058  0012               	return	
  3550                           
  3551                           ;lcd.c: 95: WriteData(message[i]);
  3552                           
  3553                           ;lcd.c: 94: break;
  3554  00105A  502B               	movf	WriteLCD@i,w,c
  3555  00105C  0D01               	mullw	1
  3556  00105E  C027  F029         	movff	WriteLCD@message,??_WriteLCD
  3557  001062  C028  F02A         	movff	WriteLCD@message+1,??_WriteLCD+1
  3558  001066  50F3               	movf	prodl,w,c
  3559  001068  2629               	addwf	??_WriteLCD,f,c
  3560  00106A  50F4               	movf	prodh,w,c
  3561  00106C  222A               	addwfc	??_WriteLCD+1,f,c
  3562  00106E  C029  FFF6         	movff	??_WriteLCD,tblptrl
  3563  001072  C02A  FFF7         	movff	??_WriteLCD+1,tblptrh
  3564  001076                     	if	0	;tblptru may be non-zero
  3565  001076                     	endif
  3566  001076                     	if	0	;tblptru may be non-zero
  3567  001076                     	endif
  3568  001076  0008               	tblrd		*
  3569  001078  50F5               	movf	tablat,w,c
  3570  00107A  EC98  F009         	call	_WriteData
  3571  00107E  2A2B               	incf	WriteLCD@i,f,c
  3572  001080  D7D5               	goto	l2843
  3573  001082                     __end_of_WriteLCD:
  3574                           	opt stack 0
  3575                           tblptru	equ	0xFF8
  3576                           tblptrh	equ	0xFF7
  3577                           tblptrl	equ	0xFF6
  3578                           tablat	equ	0xFF5
  3579                           prodh	equ	0xFF4
  3580                           prodl	equ	0xFF3
  3581                           postinc0	equ	0xFEE
  3582                           postdec1	equ	0xFE5
  3583                           fsr1l	equ	0xFE1
  3584                           postinc2	equ	0xFDE
  3585                           postdec2	equ	0xFDD
  3586                           fsr2h	equ	0xFDA
  3587                           fsr2l	equ	0xFD9
  3588                           status	equ	0xFD8
  3589                           
  3590 ;; *************** function _WriteData *****************
  3591 ;; Defined at:
  3592 ;;		line 106 in file "lcd.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;  value           1    wreg     unsigned char 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  value           1   37[COMRAM] unsigned char 
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  1    wreg      void 
  3599 ;; Registers used:
  3600 ;;		wreg, status,2, status,0, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3606 ;;      Params:         0       0       0       0       0       0       0
  3607 ;;      Locals:         1       0       0       0       0       0       0
  3608 ;;      Temps:          0       0       0       0       0       0       0
  3609 ;;      Totals:         1       0       0       0       0       0       0
  3610 ;;Total ram usage:        1 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    6
  3613 ;; This function calls:
  3614 ;;		_WriteCommon
  3615 ;;		_delay
  3616 ;; This function is called by:
  3617 ;;		_display_temp
  3618 ;;		_WriteLCD
  3619 ;;		_integerToLcd
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           	psect	text23
  3624  001330                     __ptext23:
  3625                           	opt stack 0
  3626  001330                     _WriteData:
  3627                           	opt stack 21
  3628                           
  3629                           ;incstack = 0
  3630                           ;WriteData@value stored from wreg
  3631  001330  6E26               	movwf	WriteData@value,c
  3632                           
  3633                           ;lcd.c: 108: PORTCbits.RC0 = 1;
  3634  001332  8082               	bsf	3970,0,c	;volatile
  3635                           
  3636                           ;lcd.c: 109: delay(1);
  3637  001334  0E00               	movlw	0
  3638  001336  6E22               	movwf	delay@x+1,c
  3639  001338  0E01               	movlw	1
  3640  00133A  6E21               	movwf	delay@x,c
  3641  00133C  EC22  F009         	call	_delay	;wreg free
  3642                           
  3643                           ;lcd.c: 110: WriteCommon( value );
  3644  001340  5026               	movf	WriteData@value,w,c
  3645  001342  ECAF  F008         	call	_WriteCommon
  3646  001346  0012               	return		;funcret
  3647  001348                     __end_of_WriteData:
  3648                           	opt stack 0
  3649                           tblptru	equ	0xFF8
  3650                           tblptrh	equ	0xFF7
  3651                           tblptrl	equ	0xFF6
  3652                           tablat	equ	0xFF5
  3653                           prodh	equ	0xFF4
  3654                           prodl	equ	0xFF3
  3655                           postinc0	equ	0xFEE
  3656                           postdec1	equ	0xFE5
  3657                           fsr1l	equ	0xFE1
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           fsr2h	equ	0xFDA
  3661                           fsr2l	equ	0xFD9
  3662                           status	equ	0xFD8
  3663                           
  3664 ;; *************** function _SerialReceive *****************
  3665 ;; Defined at:
  3666 ;;		line 70 in file "serial.h"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;		None
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;		None
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  1    wreg      unsigned char 
  3673 ;; Registers used:
  3674 ;;		wreg, status,2
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3680 ;;      Params:         0       0       0       0       0       0       0
  3681 ;;      Locals:         0       0       0       0       0       0       0
  3682 ;;      Temps:          0       0       0       0       0       0       0
  3683 ;;      Totals:         0       0       0       0       0       0       0
  3684 ;;Total ram usage:        0 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    3
  3687 ;; This function calls:
  3688 ;;		Nothing
  3689 ;; This function is called by:
  3690 ;;		_main
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text24
  3695  00138C                     __ptext24:
  3696                           	opt stack 0
  3697  00138C                     _SerialReceive:
  3698                           	opt stack 27
  3699                           
  3700                           ;serial.h: 72: while(!RCIF);
  3701                           
  3702                           ;incstack = 0
  3703  00138C  AA9E               	btfss	3998,5,c	;volatile
  3704  00138E  D7FE               	goto	_SerialReceive
  3705                           
  3706                           ;serial.h: 73: return RCREG;
  3707  001390  50AE               	movf	4014,w,c	;volatile
  3708  001392  0012               	return	
  3709  001394                     __end_of_SerialReceive:
  3710                           	opt stack 0
  3711                           tblptru	equ	0xFF8
  3712                           tblptrh	equ	0xFF7
  3713                           tblptrl	equ	0xFF6
  3714                           tablat	equ	0xFF5
  3715                           prodh	equ	0xFF4
  3716                           prodl	equ	0xFF3
  3717                           postinc0	equ	0xFEE
  3718                           postdec1	equ	0xFE5
  3719                           fsr1l	equ	0xFE1
  3720                           postinc2	equ	0xFDE
  3721                           postdec2	equ	0xFDD
  3722                           fsr2h	equ	0xFDA
  3723                           fsr2l	equ	0xFD9
  3724                           status	equ	0xFD8
  3725                           
  3726 ;; *************** function _InitLCD *****************
  3727 ;; Defined at:
  3728 ;;		line 10 in file "lcd.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      void 
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3742 ;;      Params:         0       0       0       0       0       0       0
  3743 ;;      Locals:         0       0       0       0       0       0       0
  3744 ;;      Temps:          0       0       0       0       0       0       0
  3745 ;;      Totals:         0       0       0       0       0       0       0
  3746 ;;Total ram usage:        0 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    8
  3749 ;; This function calls:
  3750 ;;		_WriteCtrl
  3751 ;;		_clear_lcd
  3752 ;;		_delay
  3753 ;;		_pulse_enable
  3754 ;; This function is called by:
  3755 ;;		_main
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           	psect	text25
  3760  000BCA                     __ptext25:
  3761                           	opt stack 0
  3762  000BCA                     _InitLCD:
  3763                           	opt stack 22
  3764                           
  3765                           ;lcd.c: 55: delay(200);
  3766                           
  3767                           ;incstack = 0
  3768  000BCA  0E00               	movlw	0
  3769  000BCC  6E22               	movwf	delay@x+1,c
  3770  000BCE  0EC8               	movlw	200
  3771  000BD0  6E21               	movwf	delay@x,c
  3772  000BD2  EC22  F009         	call	_delay	;wreg free
  3773                           
  3774                           ;lcd.c: 57: PORTD = 3;
  3775  000BD6  0E03               	movlw	3
  3776  000BD8  6E83               	movwf	3971,c	;volatile
  3777                           
  3778                           ;lcd.c: 58: delay(2);
  3779  000BDA  0E00               	movlw	0
  3780  000BDC  6E22               	movwf	delay@x+1,c
  3781  000BDE  0E02               	movlw	2
  3782  000BE0  6E21               	movwf	delay@x,c
  3783  000BE2  EC22  F009         	call	_delay	;wreg free
  3784                           
  3785                           ;lcd.c: 59: pulse_enable();
  3786  000BE6  ECB0  F009         	call	_pulse_enable	;wreg free
  3787                           
  3788                           ;lcd.c: 60: delay(25);
  3789  000BEA  0E00               	movlw	0
  3790  000BEC  6E22               	movwf	delay@x+1,c
  3791  000BEE  0E19               	movlw	25
  3792  000BF0  6E21               	movwf	delay@x,c
  3793  000BF2  EC22  F009         	call	_delay	;wreg free
  3794                           
  3795                           ;lcd.c: 61: pulse_enable();
  3796  000BF6  ECB0  F009         	call	_pulse_enable	;wreg free
  3797                           
  3798                           ;lcd.c: 62: delay(25);
  3799  000BFA  0E00               	movlw	0
  3800  000BFC  6E22               	movwf	delay@x+1,c
  3801  000BFE  0E19               	movlw	25
  3802  000C00  6E21               	movwf	delay@x,c
  3803  000C02  EC22  F009         	call	_delay	;wreg free
  3804                           
  3805                           ;lcd.c: 63: pulse_enable();
  3806  000C06  ECB0  F009         	call	_pulse_enable	;wreg free
  3807                           
  3808                           ;lcd.c: 64: PORTD = 2;
  3809  000C0A  0E02               	movlw	2
  3810  000C0C  6E83               	movwf	3971,c	;volatile
  3811                           
  3812                           ;lcd.c: 65: delay(2);
  3813  000C0E  0E00               	movlw	0
  3814  000C10  6E22               	movwf	delay@x+1,c
  3815  000C12  0E02               	movlw	2
  3816  000C14  6E21               	movwf	delay@x,c
  3817  000C16  EC22  F009         	call	_delay	;wreg free
  3818                           
  3819                           ;lcd.c: 66: pulse_enable();
  3820  000C1A  ECB0  F009         	call	_pulse_enable	;wreg free
  3821                           
  3822                           ;lcd.c: 67: delay(25);
  3823  000C1E  0E00               	movlw	0
  3824  000C20  6E22               	movwf	delay@x+1,c
  3825  000C22  0E19               	movlw	25
  3826  000C24  6E21               	movwf	delay@x,c
  3827  000C26  EC22  F009         	call	_delay	;wreg free
  3828                           
  3829                           ;lcd.c: 68: WriteCtrl(0x08);
  3830  000C2A  0E08               	movlw	8
  3831  000C2C  ECA4  F009         	call	_WriteCtrl
  3832                           
  3833                           ;lcd.c: 69: delay(250);
  3834  000C30  0E00               	movlw	0
  3835  000C32  6E22               	movwf	delay@x+1,c
  3836  000C34  0EFA               	movlw	250
  3837  000C36  6E21               	movwf	delay@x,c
  3838  000C38  EC22  F009         	call	_delay	;wreg free
  3839                           
  3840                           ;lcd.c: 70: WriteCtrl(0x28);
  3841  000C3C  0E28               	movlw	40
  3842  000C3E  ECA4  F009         	call	_WriteCtrl
  3843                           
  3844                           ;lcd.c: 71: delay(250);
  3845  000C42  0E00               	movlw	0
  3846  000C44  6E22               	movwf	delay@x+1,c
  3847  000C46  0EFA               	movlw	250
  3848  000C48  6E21               	movwf	delay@x,c
  3849  000C4A  EC22  F009         	call	_delay	;wreg free
  3850                           
  3851                           ;lcd.c: 73: WriteCtrl(0x14);
  3852  000C4E  0E14               	movlw	20
  3853  000C50  ECA4  F009         	call	_WriteCtrl
  3854                           
  3855                           ;lcd.c: 74: delay(250);
  3856  000C54  0E00               	movlw	0
  3857  000C56  6E22               	movwf	delay@x+1,c
  3858  000C58  0EFA               	movlw	250
  3859  000C5A  6E21               	movwf	delay@x,c
  3860  000C5C  EC22  F009         	call	_delay	;wreg free
  3861                           
  3862                           ;lcd.c: 77: WriteCtrl(0x06);
  3863  000C60  0E06               	movlw	6
  3864  000C62  ECA4  F009         	call	_WriteCtrl
  3865                           
  3866                           ;lcd.c: 78: delay(250);
  3867  000C66  0E00               	movlw	0
  3868  000C68  6E22               	movwf	delay@x+1,c
  3869  000C6A  0EFA               	movlw	250
  3870  000C6C  6E21               	movwf	delay@x,c
  3871  000C6E  EC22  F009         	call	_delay	;wreg free
  3872                           
  3873                           ;lcd.c: 79: WriteCtrl(0x80);
  3874  000C72  0E80               	movlw	128
  3875  000C74  ECA4  F009         	call	_WriteCtrl
  3876                           
  3877                           ;lcd.c: 80: delay(250);
  3878  000C78  0E00               	movlw	0
  3879  000C7A  6E22               	movwf	delay@x+1,c
  3880  000C7C  0EFA               	movlw	250
  3881  000C7E  6E21               	movwf	delay@x,c
  3882  000C80  EC22  F009         	call	_delay	;wreg free
  3883                           
  3884                           ;lcd.c: 81: clear_lcd();
  3885  000C84  ECCA  F009         	call	_clear_lcd	;wreg free
  3886                           
  3887                           ;lcd.c: 82: WriteCtrl(0x0C);
  3888  000C88  0E0C               	movlw	12
  3889  000C8A  ECA4  F009         	call	_WriteCtrl
  3890                           
  3891                           ;lcd.c: 83: delay(250);
  3892  000C8E  0E00               	movlw	0
  3893  000C90  6E22               	movwf	delay@x+1,c
  3894  000C92  0EFA               	movlw	250
  3895  000C94  6E21               	movwf	delay@x,c
  3896  000C96  EC22  F009         	call	_delay	;wreg free
  3897  000C9A  0012               	return		;funcret
  3898  000C9C                     __end_of_InitLCD:
  3899                           	opt stack 0
  3900                           tblptru	equ	0xFF8
  3901                           tblptrh	equ	0xFF7
  3902                           tblptrl	equ	0xFF6
  3903                           tablat	equ	0xFF5
  3904                           prodh	equ	0xFF4
  3905                           prodl	equ	0xFF3
  3906                           postinc0	equ	0xFEE
  3907                           postdec1	equ	0xFE5
  3908                           fsr1l	equ	0xFE1
  3909                           postinc2	equ	0xFDE
  3910                           postdec2	equ	0xFDD
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function _clear_lcd *****************
  3916 ;; Defined at:
  3917 ;;		line 5 in file "lcd.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;		None
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;		None
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      void 
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3931 ;;      Params:         0       0       0       0       0       0       0
  3932 ;;      Locals:         0       0       0       0       0       0       0
  3933 ;;      Temps:          0       0       0       0       0       0       0
  3934 ;;      Totals:         0       0       0       0       0       0       0
  3935 ;;Total ram usage:        0 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    7
  3938 ;; This function calls:
  3939 ;;		_WriteCtrl
  3940 ;; This function is called by:
  3941 ;;		_adcToLcd
  3942 ;;		_hmi_out
  3943 ;;		_InitLCD
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text26
  3948  001394                     __ptext26:
  3949                           	opt stack 0
  3950  001394                     _clear_lcd:
  3951                           	opt stack 22
  3952                           
  3953                           ;lcd.c: 7: WriteCtrl(0x01);
  3954                           
  3955                           ;incstack = 0
  3956  001394  0E01               	movlw	1
  3957  001396  ECA4  F009         	call	_WriteCtrl
  3958  00139A  0012               	return		;funcret
  3959  00139C                     __end_of_clear_lcd:
  3960                           	opt stack 0
  3961                           tblptru	equ	0xFF8
  3962                           tblptrh	equ	0xFF7
  3963                           tblptrl	equ	0xFF6
  3964                           tablat	equ	0xFF5
  3965                           prodh	equ	0xFF4
  3966                           prodl	equ	0xFF3
  3967                           postinc0	equ	0xFEE
  3968                           postdec1	equ	0xFE5
  3969                           fsr1l	equ	0xFE1
  3970                           postinc2	equ	0xFDE
  3971                           postdec2	equ	0xFDD
  3972                           fsr2h	equ	0xFDA
  3973                           fsr2l	equ	0xFD9
  3974                           status	equ	0xFD8
  3975                           
  3976 ;; *************** function _WriteCtrl *****************
  3977 ;; Defined at:
  3978 ;;		line 99 in file "lcd.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;  value           1    wreg     unsigned char 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;  value           1   37[COMRAM] unsigned char 
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3992 ;;      Params:         0       0       0       0       0       0       0
  3993 ;;      Locals:         1       0       0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0       0       0
  3995 ;;      Totals:         1       0       0       0       0       0       0
  3996 ;;Total ram usage:        1 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    6
  3999 ;; This function calls:
  4000 ;;		_WriteCommon
  4001 ;;		_delay
  4002 ;; This function is called by:
  4003 ;;		_clear_lcd
  4004 ;;		_InitLCD
  4005 ;;		_goto_xy
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text27
  4010  001348                     __ptext27:
  4011                           	opt stack 0
  4012  001348                     _WriteCtrl:
  4013                           	opt stack 22
  4014                           
  4015                           ;incstack = 0
  4016                           ;WriteCtrl@value stored from wreg
  4017  001348  6E26               	movwf	WriteCtrl@value,c
  4018                           
  4019                           ;lcd.c: 101: PORTCbits.RC0 = 0;
  4020  00134A  9082               	bcf	3970,0,c	;volatile
  4021                           
  4022                           ;lcd.c: 102: delay(1);
  4023  00134C  0E00               	movlw	0
  4024  00134E  6E22               	movwf	delay@x+1,c
  4025  001350  0E01               	movlw	1
  4026  001352  6E21               	movwf	delay@x,c
  4027  001354  EC22  F009         	call	_delay	;wreg free
  4028                           
  4029                           ;lcd.c: 103: WriteCommon( value );
  4030  001358  5026               	movf	WriteCtrl@value,w,c
  4031  00135A  ECAF  F008         	call	_WriteCommon
  4032  00135E  0012               	return		;funcret
  4033  001360                     __end_of_WriteCtrl:
  4034                           	opt stack 0
  4035                           tblptru	equ	0xFF8
  4036                           tblptrh	equ	0xFF7
  4037                           tblptrl	equ	0xFF6
  4038                           tablat	equ	0xFF5
  4039                           prodh	equ	0xFF4
  4040                           prodl	equ	0xFF3
  4041                           postinc0	equ	0xFEE
  4042                           postdec1	equ	0xFE5
  4043                           fsr1l	equ	0xFE1
  4044                           postinc2	equ	0xFDE
  4045                           postdec2	equ	0xFDD
  4046                           fsr2h	equ	0xFDA
  4047                           fsr2l	equ	0xFD9
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function _WriteCommon *****************
  4051 ;; Defined at:
  4052 ;;		line 120 in file "lcd.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  value           1    wreg     unsigned char 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  value           1   36[COMRAM] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4066 ;;      Params:         0       0       0       0       0       0       0
  4067 ;;      Locals:         1       0       0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0
  4069 ;;      Totals:         1       0       0       0       0       0       0
  4070 ;;Total ram usage:        1 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    5
  4073 ;; This function calls:
  4074 ;;		_delay
  4075 ;;		_pulse_enable
  4076 ;; This function is called by:
  4077 ;;		_WriteCtrl
  4078 ;;		_WriteData
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text28
  4083  00115E                     __ptext28:
  4084                           	opt stack 0
  4085  00115E                     _WriteCommon:
  4086                           	opt stack 22
  4087                           
  4088                           ;incstack = 0
  4089                           ;WriteCommon@value stored from wreg
  4090  00115E  6E25               	movwf	WriteCommon@value,c
  4091                           
  4092                           ;lcd.c: 122: delay(1);
  4093  001160  0E00               	movlw	0
  4094  001162  6E22               	movwf	delay@x+1,c
  4095  001164  0E01               	movlw	1
  4096  001166  6E21               	movwf	delay@x,c
  4097  001168  EC22  F009         	call	_delay	;wreg free
  4098                           
  4099                           ;lcd.c: 124: PORTD = ((value >> 4) & 0x0F);
  4100  00116C  3825               	swapf	WriteCommon@value,w,c
  4101  00116E  0B0F               	andlw	15
  4102  001170  0B0F               	andlw	15
  4103  001172  6E83               	movwf	3971,c	;volatile
  4104                           
  4105                           ;lcd.c: 125: pulse_enable();
  4106  001174  ECB0  F009         	call	_pulse_enable	;wreg free
  4107                           
  4108                           ;lcd.c: 126: delay(5);
  4109  001178  0E00               	movlw	0
  4110  00117A  6E22               	movwf	delay@x+1,c
  4111  00117C  0E05               	movlw	5
  4112  00117E  6E21               	movwf	delay@x,c
  4113  001180  EC22  F009         	call	_delay	;wreg free
  4114                           
  4115                           ;lcd.c: 128: PORTD = (value & 0x0F);
  4116  001184  5025               	movf	WriteCommon@value,w,c
  4117  001186  0B0F               	andlw	15
  4118  001188  6E83               	movwf	3971,c	;volatile
  4119                           
  4120                           ;lcd.c: 129: pulse_enable();
  4121  00118A  ECB0  F009         	call	_pulse_enable	;wreg free
  4122                           
  4123                           ;lcd.c: 131: delay(1);
  4124  00118E  0E00               	movlw	0
  4125  001190  6E22               	movwf	delay@x+1,c
  4126  001192  0E01               	movlw	1
  4127  001194  6E21               	movwf	delay@x,c
  4128  001196  EC22  F009         	call	_delay	;wreg free
  4129  00119A  0012               	return		;funcret
  4130  00119C                     __end_of_WriteCommon:
  4131                           	opt stack 0
  4132                           tblptru	equ	0xFF8
  4133                           tblptrh	equ	0xFF7
  4134                           tblptrl	equ	0xFF6
  4135                           tablat	equ	0xFF5
  4136                           prodh	equ	0xFF4
  4137                           prodl	equ	0xFF3
  4138                           postinc0	equ	0xFEE
  4139                           postdec1	equ	0xFE5
  4140                           fsr1l	equ	0xFE1
  4141                           postinc2	equ	0xFDE
  4142                           postdec2	equ	0xFDD
  4143                           fsr2h	equ	0xFDA
  4144                           fsr2l	equ	0xFD9
  4145                           status	equ	0xFD8
  4146                           
  4147 ;; *************** function _pulse_enable *****************
  4148 ;; Defined at:
  4149 ;;		line 113 in file "lcd.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;		None
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      void 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2, status,0, cstack
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4163 ;;      Params:         0       0       0       0       0       0       0
  4164 ;;      Locals:         0       0       0       0       0       0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0
  4166 ;;      Totals:         0       0       0       0       0       0       0
  4167 ;;Total ram usage:        0 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    4
  4170 ;; This function calls:
  4171 ;;		_delay
  4172 ;; This function is called by:
  4173 ;;		_InitLCD
  4174 ;;		_WriteCommon
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text29
  4179  001360                     __ptext29:
  4180                           	opt stack 0
  4181  001360                     _pulse_enable:
  4182                           	opt stack 22
  4183                           
  4184                           ;lcd.c: 115: PORTCbits.RC1 = 1;
  4185                           
  4186                           ;incstack = 0
  4187  001360  8282               	bsf	3970,1,c	;volatile
  4188                           
  4189                           ;lcd.c: 116: delay(2);
  4190  001362  0E00               	movlw	0
  4191  001364  6E22               	movwf	delay@x+1,c
  4192  001366  0E02               	movlw	2
  4193  001368  6E21               	movwf	delay@x,c
  4194  00136A  EC22  F009         	call	_delay	;wreg free
  4195                           
  4196                           ;lcd.c: 117: PORTCbits.RC1 = 0;
  4197  00136E  9282               	bcf	3970,1,c	;volatile
  4198  001370  0012               	return		;funcret
  4199  001372                     __end_of_pulse_enable:
  4200                           	opt stack 0
  4201                           tblptru	equ	0xFF8
  4202                           tblptrh	equ	0xFF7
  4203                           tblptrl	equ	0xFF6
  4204                           tablat	equ	0xFF5
  4205                           prodh	equ	0xFF4
  4206                           prodl	equ	0xFF3
  4207                           postinc0	equ	0xFEE
  4208                           postdec1	equ	0xFE5
  4209                           fsr1l	equ	0xFE1
  4210                           postinc2	equ	0xFDE
  4211                           postdec2	equ	0xFDD
  4212                           fsr2h	equ	0xFDA
  4213                           fsr2l	equ	0xFD9
  4214                           status	equ	0xFD8
  4215                           
  4216 ;; *************** function _delay *****************
  4217 ;; Defined at:
  4218 ;;		line 195 in file "hmi.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;  x               2   32[COMRAM] int 
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  i               2   34[COMRAM] int 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  1    wreg      void 
  4225 ;; Registers used:
  4226 ;;		wreg, status,2, status,0
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4232 ;;      Params:         2       0       0       0       0       0       0
  4233 ;;      Locals:         2       0       0       0       0       0       0
  4234 ;;      Temps:          0       0       0       0       0       0       0
  4235 ;;      Totals:         4       0       0       0       0       0       0
  4236 ;;Total ram usage:        4 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    3
  4239 ;; This function calls:
  4240 ;;		Nothing
  4241 ;; This function is called by:
  4242 ;;		_main
  4243 ;;		_adcToLcd
  4244 ;;		_hmi_out
  4245 ;;		_init_adc
  4246 ;;		_InitLCD
  4247 ;;		_WriteLCD
  4248 ;;		_WriteCtrl
  4249 ;;		_WriteData
  4250 ;;		_pulse_enable
  4251 ;;		_WriteCommon
  4252 ;;		_get_input
  4253 ;;		_IQS333_setup
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text30
  4258  001244                     __ptext30:
  4259                           	opt stack 0
  4260  001244                     _delay:
  4261                           	opt stack 26
  4262                           
  4263                           ;incstack = 0
  4264  001244  BE22               	btfsc	delay@x+1,7,c
  4265  001246  0012               	return	
  4266  001248  5022               	movf	delay@x+1,w,c
  4267  00124A  E104               	bnz	l2573
  4268  00124C  0E02               	movlw	2
  4269  00124E  5C21               	subwf	delay@x,w,c
  4270  001250  A0D8               	btfss	status,0,c
  4271  001252  0012               	return	
  4272  001254                     l2573:
  4273                           
  4274                           ;hmi.c: 199: {
  4275                           ;hmi.c: 200: for (i=0;i<=110;i++);
  4276  001254  0E00               	movlw	0
  4277  001256  6E24               	movwf	delay@i+1,c
  4278  001258  0E00               	movlw	0
  4279  00125A  6E23               	movwf	delay@i,c
  4280  00125C                     l2575:
  4281  00125C  BE24               	btfsc	delay@i+1,7,c
  4282  00125E  D006               	goto	l136
  4283  001260  5024               	movf	delay@i+1,w,c
  4284  001262  E107               	bnz	l2583
  4285  001264  0E6F               	movlw	111
  4286  001266  5C23               	subwf	delay@i,w,c
  4287  001268  B0D8               	btfsc	status,0,c
  4288  00126A  D003               	goto	u2110
  4289  00126C                     l136:
  4290  00126C  4A23               	infsnz	delay@i,f,c
  4291  00126E  2A24               	incf	delay@i+1,f,c
  4292  001270  D7F5               	goto	l2575
  4293  001272                     u2110:
  4294  001272                     l2583:
  4295  001272  0621               	decf	delay@x,f,c
  4296  001274  A0D8               	btfss	status,0,c
  4297  001276  0622               	decf	delay@x+1,f,c
  4298  001278  D7E5               	goto	_delay
  4299  00127A                     __end_of_delay:
  4300                           	opt stack 0
  4301                           tblptru	equ	0xFF8
  4302                           tblptrh	equ	0xFF7
  4303                           tblptrl	equ	0xFF6
  4304                           tablat	equ	0xFF5
  4305                           prodh	equ	0xFF4
  4306                           prodl	equ	0xFF3
  4307                           postinc0	equ	0xFEE
  4308                           postdec1	equ	0xFE5
  4309                           fsr1l	equ	0xFE1
  4310                           postinc2	equ	0xFDE
  4311                           postdec2	equ	0xFDD
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function _High_Priority_Interrupt *****************
  4317 ;; Defined at:
  4318 ;;		line 265 in file "hmi.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  tempChar        1   31[COMRAM] unsigned char 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      void 
  4325 ;; Registers used:
  4326 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4332 ;;      Params:         0       0       0       0       0       0       0
  4333 ;;      Locals:         1       0       0       0       0       0       0
  4334 ;;      Temps:         18       0       0       0       0       0       0
  4335 ;;      Totals:        19       0       0       0       0       0       0
  4336 ;;Total ram usage:       19 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    2
  4339 ;; This function calls:
  4340 ;;		_SerialTransmit
  4341 ;; This function is called by:
  4342 ;;		Interrupt level 2
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	intcode
  4347  000008                     __pintcode:
  4348                           	opt stack 0
  4349  000008                     _High_Priority_Interrupt:
  4350                           	opt stack 21
  4351                           
  4352                           ;incstack = 0
  4353  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4354  00000A  CFFA F00E          	movff	pclath,??_High_Priority_Interrupt
  4355  00000E  CFFB F00F          	movff	pclatu,??_High_Priority_Interrupt+1
  4356  000012  CFE9 F010          	movff	fsr0l,??_High_Priority_Interrupt+2
  4357  000016  CFEA F011          	movff	fsr0h,??_High_Priority_Interrupt+3
  4358  00001A  CFE1 F012          	movff	fsr1l,??_High_Priority_Interrupt+4
  4359  00001E  CFE2 F013          	movff	fsr1h,??_High_Priority_Interrupt+5
  4360  000022  CFD9 F014          	movff	fsr2l,??_High_Priority_Interrupt+6
  4361  000026  CFDA F015          	movff	fsr2h,??_High_Priority_Interrupt+7
  4362  00002A  CFF3 F016          	movff	prodl,??_High_Priority_Interrupt+8
  4363  00002E  CFF4 F017          	movff	prodh,??_High_Priority_Interrupt+9
  4364  000032  CFF6 F018          	movff	tblptrl,??_High_Priority_Interrupt+10
  4365  000036  CFF7 F019          	movff	tblptrh,??_High_Priority_Interrupt+11
  4366  00003A  CFF8 F01A          	movff	tblptru,??_High_Priority_Interrupt+12
  4367  00003E  CFF5 F01B          	movff	tablat,??_High_Priority_Interrupt+13
  4368  000042  C03F  F01C         	movff	btemp,??_High_Priority_Interrupt+14
  4369  000046  C040  F01D         	movff	btemp+1,??_High_Priority_Interrupt+15
  4370  00004A  C041  F01E         	movff	btemp+2,??_High_Priority_Interrupt+16
  4371  00004E  C042  F01F         	movff	btemp+3,??_High_Priority_Interrupt+17
  4372                           
  4373                           ;hmi.c: 267: unsigned char tempChar;
  4374                           ;hmi.c: 268: if(PIR1bits.RCIF)
  4375  000052  AA9E               	btfss	3998,5,c	;volatile
  4376  000054  D010               	goto	i2l173
  4377                           
  4378                           ;hmi.c: 269: {
  4379                           ;hmi.c: 270: tempChar = RCREG;
  4380  000056  CFAE F020          	movff	4014,High_Priority_Interrupt@tempChar	;volatile
  4381                           
  4382                           ;hmi.c: 271: switch(tempChar)
  4383  00005A  D009               	goto	i2l171
  4384  00005C                     
  4385                           ;hmi.c: 274: SerialTransmit('i');
  4386  00005C  0E69               	movlw	105
  4387  00005E  6E09               	movwf	SerialTransmit@buffer,c
  4388  000060  0E00               	movlw	0
  4389  000062  6E0A               	movwf	SerialTransmit@buffer+1,c
  4390  000064  0E00               	movlw	0
  4391  000066  6E0B               	movwf	SerialTransmit@buffer+2,c
  4392  000068  EC41  F008         	call	_SerialTransmit	;wreg free
  4393                           
  4394                           ;hmi.c: 276: }
  4395                           
  4396                           ;hmi.c: 275: break;
  4397  00006C  D004               	goto	i2l173
  4398  00006E                     i2l171:
  4399  00006E  5020               	movf	High_Priority_Interrupt@tempChar,w,c
  4400                           
  4401                           ; Switch size 1, requested type "space"
  4402                           ; Number of cases is 1, Range of values is 117 to 117
  4403                           ; switch strategies available:
  4404                           ; Name         Instructions Cycles
  4405                           ; simple_byte            4     3 (average)
  4406                           ;	Chosen strategy is simple_byte
  4407  000070  0A75               	xorlw	117	; case 117
  4408  000072  B4D8               	btfsc	status,2,c
  4409  000074  D7F3               	goto	i2l172
  4410  000076                     i2l173:
  4411                           
  4412                           ;hmi.c: 277: }
  4413                           ;hmi.c: 278: return;
  4414  000076  C01F  F042         	movff	??_High_Priority_Interrupt+17,btemp+3
  4415  00007A  C01E  F041         	movff	??_High_Priority_Interrupt+16,btemp+2
  4416  00007E  C01D  F040         	movff	??_High_Priority_Interrupt+15,btemp+1
  4417  000082  C01C  F03F         	movff	??_High_Priority_Interrupt+14,btemp
  4418  000086  C01B  FFF5         	movff	??_High_Priority_Interrupt+13,tablat
  4419  00008A  C01A  FFF8         	movff	??_High_Priority_Interrupt+12,tblptru
  4420  00008E  C019  FFF7         	movff	??_High_Priority_Interrupt+11,tblptrh
  4421  000092  C018  FFF6         	movff	??_High_Priority_Interrupt+10,tblptrl
  4422  000096  C017  FFF4         	movff	??_High_Priority_Interrupt+9,prodh
  4423  00009A  C016  FFF3         	movff	??_High_Priority_Interrupt+8,prodl
  4424  00009E  C015  FFDA         	movff	??_High_Priority_Interrupt+7,fsr2h
  4425  0000A2  C014  FFD9         	movff	??_High_Priority_Interrupt+6,fsr2l
  4426  0000A6  C013  FFE2         	movff	??_High_Priority_Interrupt+5,fsr1h
  4427  0000AA  C012  FFE1         	movff	??_High_Priority_Interrupt+4,fsr1l
  4428  0000AE  C011  FFEA         	movff	??_High_Priority_Interrupt+3,fsr0h
  4429  0000B2  C010  FFE9         	movff	??_High_Priority_Interrupt+2,fsr0l
  4430  0000B6  C00F  FFFB         	movff	??_High_Priority_Interrupt+1,pclatu
  4431  0000BA  C00E  FFFA         	movff	??_High_Priority_Interrupt,pclath
  4432  0000BE  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4433  0000C0  0011               	retfie		f
  4434  0000C2                     __end_of_High_Priority_Interrupt:
  4435                           	opt stack 0
  4436                           pclatu	equ	0xFFB
  4437                           pclath	equ	0xFFA
  4438                           tblptru	equ	0xFF8
  4439                           tblptrh	equ	0xFF7
  4440                           tblptrl	equ	0xFF6
  4441                           tablat	equ	0xFF5
  4442                           prodh	equ	0xFF4
  4443                           prodl	equ	0xFF3
  4444                           postinc0	equ	0xFEE
  4445                           fsr0h	equ	0xFEA
  4446                           fsr0l	equ	0xFE9
  4447                           postdec1	equ	0xFE5
  4448                           fsr1h	equ	0xFE2
  4449                           fsr1l	equ	0xFE1
  4450                           postinc2	equ	0xFDE
  4451                           postdec2	equ	0xFDD
  4452                           fsr2h	equ	0xFDA
  4453                           fsr2l	equ	0xFD9
  4454                           status	equ	0xFD8
  4455                           
  4456 ;; *************** function _SerialTransmit *****************
  4457 ;; Defined at:
  4458 ;;		line 53 in file "serial.h"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;  buffer          3    8[COMRAM] PTR const unsigned char 
  4461 ;;		 -> ROM(32767), 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  size            2   11[COMRAM] unsigned int 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      void 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4473 ;;      Params:         3       0       0       0       0       0       0
  4474 ;;      Locals:         2       0       0       0       0       0       0
  4475 ;;      Temps:          0       0       0       0       0       0       0
  4476 ;;      Totals:         5       0       0       0       0       0       0
  4477 ;;Total ram usage:        5 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    1
  4480 ;; This function calls:
  4481 ;;		_strlen
  4482 ;; This function is called by:
  4483 ;;		_High_Priority_Interrupt
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text32
  4488  001082                     __ptext32:
  4489                           	opt stack 0
  4490  001082                     _SerialTransmit:
  4491                           	opt stack 21
  4492                           
  4493                           ;serial.h: 56: unsigned int size = strlen(buffer);
  4494                           
  4495                           ;incstack = 0
  4496  001082  C009  F001         	movff	SerialTransmit@buffer,strlen@s
  4497  001086  C00A  F002         	movff	SerialTransmit@buffer+1,strlen@s+1
  4498  00108A  C00B  F003         	movff	SerialTransmit@buffer+2,strlen@s+2
  4499  00108E  EC69  F008         	call	_strlen	;wreg free
  4500  001092  C001  F00C         	movff	?_strlen,SerialTransmit@size
  4501  001096  C002  F00D         	movff	?_strlen+1,SerialTransmit@size+1
  4502                           
  4503                           ;serial.h: 58: while(size)
  4504  00109A  D014               	goto	i2l86
  4505  00109C                     
  4506                           ;serial.h: 59: {
  4507                           ;serial.h: 60: while(TXIF);
  4508  00109C  B89E               	btfsc	3998,4,c	;volatile
  4509  00109E  D7FE               	goto	i2l87
  4510                           
  4511                           ;serial.h: 61: TXREG = *buffer;
  4512  0010A0  C009  FFF6         	movff	SerialTransmit@buffer,tblptrl
  4513  0010A4  C00A  FFF7         	movff	SerialTransmit@buffer+1,tblptrh
  4514  0010A8  C00B  FFF8         	movff	SerialTransmit@buffer+2,tblptru
  4515  0010AC  0008               	tblrd		*
  4516  0010AE  CFF5 FFAD          	movff	tablat,4013	;volatile
  4517                           
  4518                           ;serial.h: 63: buffer++;
  4519  0010B2  0E01               	movlw	1
  4520  0010B4  2609               	addwf	SerialTransmit@buffer,f,c
  4521  0010B6  0E00               	movlw	0
  4522  0010B8  220A               	addwfc	SerialTransmit@buffer+1,f,c
  4523  0010BA  0E00               	movlw	0
  4524  0010BC  220B               	addwfc	SerialTransmit@buffer+2,f,c
  4525                           
  4526                           ;serial.h: 64: size--;
  4527  0010BE  060C               	decf	SerialTransmit@size,f,c
  4528  0010C0  A0D8               	btfss	status,0,c
  4529  0010C2  060D               	decf	SerialTransmit@size+1,f,c
  4530  0010C4                     i2l86:
  4531  0010C4  500C               	movf	SerialTransmit@size,w,c
  4532  0010C6  100D               	iorwf	SerialTransmit@size+1,w,c
  4533  0010C8  A4D8               	btfss	status,2,c
  4534  0010CA  D7E8               	goto	i2l87
  4535  0010CC                     i2u189_40:
  4536                           
  4537                           ;serial.h: 65: }
  4538                           ;serial.h: 67: while( !TRMT);
  4539  0010CC  B2AC               	btfsc	4012,1,c	;volatile
  4540  0010CE  0012               	return	
  4541  0010D0  D7FD               	goto	i2u189_40
  4542  0010D2                     __end_of_SerialTransmit:
  4543                           	opt stack 0
  4544                           pclatu	equ	0xFFB
  4545                           pclath	equ	0xFFA
  4546                           tblptru	equ	0xFF8
  4547                           tblptrh	equ	0xFF7
  4548                           tblptrl	equ	0xFF6
  4549                           tablat	equ	0xFF5
  4550                           prodh	equ	0xFF4
  4551                           prodl	equ	0xFF3
  4552                           postinc0	equ	0xFEE
  4553                           fsr0h	equ	0xFEA
  4554                           fsr0l	equ	0xFE9
  4555                           postdec1	equ	0xFE5
  4556                           fsr1h	equ	0xFE2
  4557                           fsr1l	equ	0xFE1
  4558                           postinc2	equ	0xFDE
  4559                           postdec2	equ	0xFDD
  4560                           fsr2h	equ	0xFDA
  4561                           fsr2l	equ	0xFD9
  4562                           status	equ	0xFD8
  4563                           
  4564 ;; *************** function _strlen *****************
  4565 ;; Defined at:
  4566 ;;		line 4 in file "/opt/microchip/xc8/v1.44/sources/common/strlen.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  s               3    0[COMRAM] PTR const unsigned char 
  4569 ;;		 -> ROM(32767), 
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  cp              3    5[COMRAM] PTR const unsigned char 
  4572 ;;		 -> ROM(32767), 
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  2    0[COMRAM] unsigned int 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4582 ;;      Params:         3       0       0       0       0       0       0
  4583 ;;      Locals:         3       0       0       0       0       0       0
  4584 ;;      Temps:          2       0       0       0       0       0       0
  4585 ;;      Totals:         8       0       0       0       0       0       0
  4586 ;;Total ram usage:        8 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; This function calls:
  4589 ;;		Nothing
  4590 ;; This function is called by:
  4591 ;;		_SerialTransmit
  4592 ;; This function uses a non-reentrant model
  4593 ;;
  4594                           
  4595                           	psect	text33
  4596  0010D2                     __ptext33:
  4597                           	opt stack 0
  4598  0010D2                     _strlen:
  4599                           	opt stack 21
  4600                           
  4601                           ;incstack = 0
  4602  0010D2  C001  F006         	movff	strlen@s,strlen@cp
  4603  0010D6  C002  F007         	movff	strlen@s+1,strlen@cp+1
  4604  0010DA  C003  F008         	movff	strlen@s+2,strlen@cp+2
  4605  0010DE  D006               	goto	i2l935
  4606  0010E0  0E01               	movlw	1
  4607  0010E2  2606               	addwf	strlen@cp,f,c
  4608  0010E4  0E00               	movlw	0
  4609  0010E6  2207               	addwfc	strlen@cp+1,f,c
  4610  0010E8  0E00               	movlw	0
  4611  0010EA  2208               	addwfc	strlen@cp+2,f,c
  4612  0010EC                     i2l935:
  4613  0010EC  C006  FFF6         	movff	strlen@cp,tblptrl
  4614  0010F0  C007  FFF7         	movff	strlen@cp+1,tblptrh
  4615  0010F4  C008  FFF8         	movff	strlen@cp+2,tblptru
  4616  0010F8  0008               	tblrd		*
  4617  0010FA  50F5               	movf	tablat,w,c
  4618  0010FC  0900               	iorlw	0
  4619  0010FE  A4D8               	btfss	status,2,c
  4620  001100  D7EF               	goto	i2l936
  4621  001102  C001  F004         	movff	strlen@s,??_strlen
  4622  001106  C002  F005         	movff	strlen@s+1,??_strlen+1
  4623  00110A  1E04               	comf	??_strlen,f,c
  4624  00110C  1E05               	comf	??_strlen+1,f,c
  4625  00110E  4A04               	infsnz	??_strlen,f,c
  4626  001110  2A05               	incf	??_strlen+1,f,c
  4627  001112  5006               	movf	strlen@cp,w,c
  4628  001114  2404               	addwf	??_strlen,w,c
  4629  001116  6E01               	movwf	?_strlen,c
  4630  001118  5007               	movf	strlen@cp+1,w,c
  4631  00111A  2005               	addwfc	??_strlen+1,w,c
  4632  00111C  6E02               	movwf	?_strlen+1,c
  4633  00111E  0012               	return	
  4634  001120                     __end_of_strlen:
  4635                           	opt stack 0
  4636                           pclatu	equ	0xFFB
  4637                           pclath	equ	0xFFA
  4638                           tblptru	equ	0xFF8
  4639                           tblptrh	equ	0xFF7
  4640                           tblptrl	equ	0xFF6
  4641                           tablat	equ	0xFF5
  4642                           prodh	equ	0xFF4
  4643                           prodl	equ	0xFF3
  4644                           postinc0	equ	0xFEE
  4645                           fsr0h	equ	0xFEA
  4646                           fsr0l	equ	0xFE9
  4647                           postdec1	equ	0xFE5
  4648                           fsr1h	equ	0xFE2
  4649                           fsr1l	equ	0xFE1
  4650                           postinc2	equ	0xFDE
  4651                           postdec2	equ	0xFDD
  4652                           fsr2h	equ	0xFDA
  4653                           fsr2l	equ	0xFD9
  4654                           status	equ	0xFD8
  4655                           pclatu	equ	0xFFB
  4656                           pclath	equ	0xFFA
  4657                           tblptru	equ	0xFF8
  4658                           tblptrh	equ	0xFF7
  4659                           tblptrl	equ	0xFF6
  4660                           tablat	equ	0xFF5
  4661                           prodh	equ	0xFF4
  4662                           prodl	equ	0xFF3
  4663                           postinc0	equ	0xFEE
  4664                           fsr0h	equ	0xFEA
  4665                           fsr0l	equ	0xFE9
  4666                           postdec1	equ	0xFE5
  4667                           fsr1h	equ	0xFE2
  4668                           fsr1l	equ	0xFE1
  4669                           postinc2	equ	0xFDE
  4670                           postdec2	equ	0xFDD
  4671                           fsr2h	equ	0xFDA
  4672                           fsr2l	equ	0xFD9
  4673                           status	equ	0xFD8
  4674                           
  4675                           	psect	rparam
  4676  0000                     pclatu	equ	0xFFB
  4677                           pclath	equ	0xFFA
  4678                           tblptru	equ	0xFF8
  4679                           tblptrh	equ	0xFF7
  4680                           tblptrl	equ	0xFF6
  4681                           tablat	equ	0xFF5
  4682                           prodh	equ	0xFF4
  4683                           prodl	equ	0xFF3
  4684                           postinc0	equ	0xFEE
  4685                           fsr0h	equ	0xFEA
  4686                           fsr0l	equ	0xFE9
  4687                           postdec1	equ	0xFE5
  4688                           fsr1h	equ	0xFE2
  4689                           fsr1l	equ	0xFE1
  4690                           postinc2	equ	0xFDE
  4691                           postdec2	equ	0xFDD
  4692                           fsr2h	equ	0xFDA
  4693                           fsr2l	equ	0xFD9
  4694                           status	equ	0xFD8
  4695                           
  4696                           	psect	temp
  4697  00003F                     btemp:
  4698                           	opt stack 0
  4699  00003F                     	ds	1
  4700  0000                     int$flags	set	btemp
  4701  0000                     wtemp6	set	btemp+1
  4702                           pclatu	equ	0xFFB
  4703                           pclath	equ	0xFFA
  4704                           tblptru	equ	0xFF8
  4705                           tblptrh	equ	0xFF7
  4706                           tblptrl	equ	0xFF6
  4707                           tablat	equ	0xFF5
  4708                           prodh	equ	0xFF4
  4709                           prodl	equ	0xFF3
  4710                           postinc0	equ	0xFEE
  4711                           fsr0h	equ	0xFEA
  4712                           fsr0l	equ	0xFE9
  4713                           postdec1	equ	0xFE5
  4714                           fsr1h	equ	0xFE2
  4715                           fsr1l	equ	0xFE1
  4716                           postinc2	equ	0xFDE
  4717                           postdec2	equ	0xFDD
  4718                           fsr2h	equ	0xFDA
  4719                           fsr2l	equ	0xFD9
  4720                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    27
    Data        4
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      62
    BANK0           160     68      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    strlen@s	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 

    strlen@cp	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 

    WriteLCD@message	PTR unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    SerialTransmit@buffer	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 


Critical Paths under _main in COMRAM

    _main->_adcToLcd
    _init_adc->_delay
    _goto_xy->_WriteCtrl
    _log->___ftmul
    _eval_poly->___ftmul
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___awdiv
    _display_speed->_integerToLcd
    _display_mode->_WriteLCD
    _adcToLcd->_integerToLcd
    _integerToLcd->___wmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    _WriteLCD->_WriteData
    _WriteData->_WriteCommon
    _InitLCD->_WriteCtrl
    _clear_lcd->_WriteCtrl
    _WriteCtrl->_WriteCommon
    _WriteCommon->_delay
    _pulse_enable->_delay

Critical Paths under _High_Priority_Interrupt in COMRAM

    _High_Priority_Interrupt->_SerialTransmit
    _SerialTransmit->_strlen

Critical Paths under _main in BANK0

    _hmi_out->_display_temp
    _display_temp->_get_temp
    _get_temp->___fttol
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftadd->___ftmul
    ___fttol->_log
    _display_speed->_integerToLcd
    _adcToLcd->_integerToLcd

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _High_Priority_Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _High_Priority_Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _High_Priority_Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  182442
                                             66 BANK0      2     2      0
                            _InitLCD
                      _SerialReceive
                           _adcToLcd
                              _delay
                            _hmi_out
                           _init_adc
 ---------------------------------------------------------------------------------
 (1) _init_adc                                             0     0      0    3103
                              _delay
 ---------------------------------------------------------------------------------
 (1) _hmi_out                                              0     0      0  112155
                           _WriteLCD
                          _clear_lcd
                              _delay
                       _display_mode
                      _display_speed
                       _display_temp
                            _goto_xy
 ---------------------------------------------------------------------------------
 (2) _goto_xy                                              2     1      1    9771
                                             38 COMRAM     2     1      1
                          _WriteCtrl
 ---------------------------------------------------------------------------------
 (2) _display_temp                                         2     2      0   50293
                                             64 BANK0      2     2      0
                          _WriteData
                           _get_temp
                       _integerToLcd
 ---------------------------------------------------------------------------------
 (3) _get_temp                                            11     9      2   27385
                                             53 BANK0     11     9      2
                            ___awdiv
                           ___awtoft
                            ___fttol
                             ___wmul
                           _adc_poll
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   21526
                                             33 BANK0      5     2      3
                            ___awdiv (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     376
                                             32 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7    9863
                                             21 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             15     9      6    3735
                                             50 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             12     6      6    4472
                                              9 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    2670
                                             46 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2427
                                             32 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     328
                                             38 BANK0     15    11      4
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (2) _display_speed                                        0     0      0   13472
                       _integerToLcd
 ---------------------------------------------------------------------------------
 (2) _display_mode                                         0     0      0   13057
                           _WriteLCD
 ---------------------------------------------------------------------------------
 (1) _adcToLcd                                             2     2      0   39068
                                             54 COMRAM     2     2      0
                           _WriteLCD
                           _adc_poll
                          _clear_lcd
                              _delay
                       _integerToLcd
 ---------------------------------------------------------------------------------
 (3) _integerToLcd                                         6     4      2   13472
                                             52 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                          _WriteData
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1132
                                             46 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     793
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1525
                                             38 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _adc_poll                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _WriteLCD                                             5     3      2   13057
                                             38 COMRAM     5     3      2
                          _WriteData
                              _delay
 ---------------------------------------------------------------------------------
 (4) _WriteData                                            1     1      0    9402
                                             37 COMRAM     1     1      0
                        _WriteCommon
                              _delay
 ---------------------------------------------------------------------------------
 (1) _SerialReceive                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              0     0      0   25010
                          _WriteCtrl
                          _clear_lcd
                              _delay
                       _pulse_enable
 ---------------------------------------------------------------------------------
 (2) _clear_lcd                                            0     0      0    9402
                          _WriteCtrl
 ---------------------------------------------------------------------------------
 (3) _WriteCtrl                                            1     1      0    9402
                                             37 COMRAM     1     1      0
                        _WriteCommon
                              _delay
 ---------------------------------------------------------------------------------
 (4) _WriteCommon                                          1     1      0    6268
                                             36 COMRAM     1     1      0
                              _delay
                       _pulse_enable
 ---------------------------------------------------------------------------------
 (5) _pulse_enable                                         0     0      0    3103
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                4     2      2    3103
                                             32 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _High_Priority_Interrupt                             19    19      0     334
                                             13 COMRAM    19    19      0
                     _SerialTransmit
 ---------------------------------------------------------------------------------
 (9) _SerialTransmit                                       5     2      3     311
                                              8 COMRAM     5     2      3
                             _strlen
 ---------------------------------------------------------------------------------
 (10) _strlen                                              8     5      3     166
                                              0 COMRAM     8     5      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitLCD
     _WriteCtrl
       _WriteCommon
         _delay
         _pulse_enable
           _delay
       _delay
     _clear_lcd
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
     _delay
     _pulse_enable
       _delay
   _SerialReceive
   _adcToLcd
     _WriteLCD
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       _delay
     _adc_poll
     _clear_lcd
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
     _delay
     _integerToLcd
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
   _delay
   _hmi_out
     _WriteLCD
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       _delay
     _clear_lcd
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
     _delay
     _display_mode
       _WriteLCD
         _WriteData
           _WriteCommon
             _delay
             _pulse_enable
               _delay
           _delay
         _delay
     _display_speed
       _integerToLcd
         _WriteData
           _WriteCommon
             _delay
             _pulse_enable
               _delay
           _delay
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
     _display_temp
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       _get_temp
         ___awdiv
           ___awmod (ARG)
         ___awtoft
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___fttol
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           _log (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
             _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
         _adc_poll
         _log
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
           _frexp (ARG)
       _integerToLcd
         _WriteData
           _WriteCommon
             _delay
             _pulse_enable
               _delay
           _delay
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
     _goto_xy
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
   _init_adc
     _delay

 _High_Priority_Interrupt (ROOT)
   _SerialTransmit
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     44      46       5       43.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      84      15        0.0%
DATA                 0      0      84       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Oct 22 16:34:27 2017

                     _SSPSTATbits 000FC7                      ___awdiv@sign 002C  
             ___wmul@multiplicand 0031                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000              __size_of_WriteCommon 003E  
                    ___ftadd@exp1 0074                      ___ftadd@exp2 0073  
                    ___ftadd@sign 0072                               l112 1282  
                             l121 1296                               l130 0E20  
                             l141 130A                               l136 126C  
                             l348 1034                               l540 0F4C  
                             l621 06B2                               l542 0F6A  
                             l543 0F62                               l631 070E  
                             l560 1004                               l552 0FC0  
                             l640 074C                               l632 0704  
                             l561 1012                               l553 0FCC  
                             l641 0742                               l617 0688  
                             l546 0F8A                               l626 0718  
                             l547 0F94                               l539 0F3C  
                             l555 0FE2                               l643 0770  
                             l548 0FA2                               l556 0FDA  
                             l644 078C                               l645 07BC  
                             l590 0D9E                               l559 0FFA  
                             l567 11E8                               l671 0AA6  
                             l592 0DDC                               l672 0AB6  
                             l593 0DD2                               l665 0A24  
                             l586 0D80                               l587 0D76  
                             l667 0A4C                               l668 0A7E  
                             l589 0DB4                               l669 0A8E  
                             l757 07FE                               l694 09CC  
                             l686 0930                               l695 09C0  
                             l759 081E                               l688 09A8  
                             l697 09E8                               l689 0998  
                             l962 0BB2                               l970 0EC0  
                             l963 0B32                      __CFG_CPB$OFF 000000  
                   ?_display_mode 0001                      __CFG_CPD$OFF 000000  
                   ?_display_temp 0001                               _log 07E2  
                    __CFG_BORV$18 000000                      ___awmod@sign 0026  
                    _pulse_enable 1360                      __CFG_LVP$OFF 000000  
                            l2573 1254                              l2583 1272  
                            l2575 125C                              l2843 102C  
                            ?_log 0081                              STR_1 0623  
                            STR_2 0628                              STR_3 062D  
                            STR_4 061C                              u1200 0D68  
                            u2110 1272                              u1240 0DE6  
                            u2200 06A4                              u2131 0646  
                            u2300 0754                              u2141 065A  
                            u2230 06E2                              u2170 067A  
                            u2341 0A0C                              u2270 0720  
                            u2520 0FE6                              u1560 0EE8  
                            u2361 0A34                              u1731 0914  
                            u2460 0F6E                              u2620 128C  
                            u1750 094E                              u1568 0EEA  
                            u1755 0946                              u1790 09D2  
                            _RCIF 007CF5                              i2l86 10C4  
                            i2l87 109C                              _TRMT 007D61  
                            _TXIF 007CF4                    ?_display_speed 0001  
                            _main 127A                      ___ftpack@arg 0021  
                            _mode 003D                      ___ftpack@exp 0024  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 003F                              log@x 0081  
                            prodh 000FF4                              prodl 000FF3  
                            start 00C2                     __CFG_IESO$OFF 000000  
                   __CFG_MCLRE$ON 000000                      ___ftmul@cntr 0067  
                    ___param_bank 000000                      ___ftmul@sign 0068  
                 __end_of_InitLCD 0C9C                      ___fttol@exp1 0094  
                           ??_log 0039                      ___fttol@lval 0090  
           __end_of_SerialReceive 1394                    ??_display_mode 002C  
                           ?_main 0001                    ??_display_temp 0039  
                 __end_of___awdiv 0FAC                   __end_of___ftadd 07E2  
                 __end_of___awmod 101C  __size_of_High_Priority_Interrupt 00BA  
                           _ANSEL 000F7E                   __end_of___ftmul 0AF0  
                 ___awdiv@divisor 0029                   __end_of___fttol 09FA  
                           i2l171 006E                             i2l172 005C  
                           i2l173 0076                             i2l935 10EC  
                           i2l936 10E0                   ___awdiv@counter 002B  
                           _RCREG 000FAE                             _RCSTA 000FAB  
                           _SPBRG 000FAF                             _PORTD 000F83  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                   ___awtoft@sign 0032                   __end_of_hmi_out 0E98  
                           _delay 1244                             _frexp 0E98  
                           _errno 00A4                   __end_of_goto_xy 1330  
                   ___ftpack@sign 0025                             _speed 003B  
                           _state 0039                             pclath 000FFA  
                           tablat 000FF5                             status 000FD8  
                           wtemp6 0040                    __CFG_HFOFST$ON 000000  
                  __CFG_PBADEN$ON 000000                    _SerialTransmit 1082  
                 __initialization 119C                       log@exponent 0084  
                    __end_of_main 12A8                   integerToLcd@num 0035  
                          ??_main 0039                     ___fttol@sign1 008F  
                   __activetblptr 000002                            ?_delay 0021  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          _ADCON2 000FC0                            ?_frexp 0021  
                 ??_display_speed 0037                            _ADRESH 000FC4  
                  WriteData@value 0026                  __end_of_adcToLcd 1244  
                ___awdiv@dividend 0027                  __end_of___awtoft 120C  
                __end_of___ftpack 0E06                  __end_of_WriteLCD 1082  
                __end_of_adc_poll 13A2                    __CFG_WDTEN$OFF 000000  
                          _SSPADD 000FC8                            _SSPBUF 000FC9  
                       ??_InitLCD 0027            __end_of_SerialTransmit 10D2  
                  __CFG_XINST$OFF 000000                  __end_of_get_temp 138C  
                          ___wmul 12CE                         ??___awdiv 002B  
                       ??___ftadd 006F                         ??___awmod 0025  
                       ??___ftmul 0060                         ??___fttol 008A  
                __end_of_init_adc 115E                            delay@i 0023  
                          delay@x 0021                  ___awdiv@quotient 002D  
                 ___awmod@divisor 0023                   ___awmod@counter 0025  
                          _strlen 10D2             ___ftmul@f3_as_product 0064  
                   ?_integerToLcd 0035                         ??_hmi_out 0039  
                    __pdataCOMRAM 0039                         ??_goto_xy 0028  
                    __mediumconst 0000                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                   main@state_old 00A2                  __end_oflog@coeff 061C  
                      __accesstop 0060           __end_of__initialization 11C6  
                  WriteCtrl@value 0026                        ___ftadd@f1 0069  
                      ___ftadd@f2 006C                __size_of_WriteData 0018  
              __size_of_WriteCtrl 0018              __end_of_display_mode 1318  
            __end_of_display_temp 12CE                   ?_SerialTransmit 0009  
                    eval_poly@res 007E                     ___rparam_used 000001  
                      ___awtoft@c 002F                        ___ftmul@f1 0033  
                      ___ftmul@f2 0036                        ___fttol@f1 0086  
                  __pcstackCOMRAM 0001                     __end_of_delay 127A  
                   __end_of_frexp 0F28           _High_Priority_Interrupt 0008  
              __size_of_clear_lcd 0008                    ??_integerToLcd 0037  
                integerToLcd@ones 0063                  integerToLcd@tens 0062  
                         ??_delay 0023                           ??_frexp 0026  
                      __pbssBANK0 00A4                __size_of_eval_poly 00DA  
                         ?___wmul 002F                     ??_WriteCommon 0025  
                  get_temp@logres 009C                    get_temp@result 009E  
                       ?_adcToLcd 0001                         ?___awtoft 002F  
                       ?___ftpack 0021                         ?_WriteLCD 0027  
                       ?_adc_poll 0001                           ?_strlen 0001  
               __end_of_WriteData 1348                 __end_of_WriteCtrl 1360  
                       ?_get_temp 0095                         ?_init_adc 0001  
               __end_of_clear_lcd 139C                           _InitLCD 0BCA  
            SerialTransmit@buffer 0009                           __Hparam 0000  
                         __Lparam 0000         ??_High_Priority_Interrupt 000E  
                         ___awdiv 0F28                           ___ftadd 0634  
                         ___awmod 0FAC                   __size_of___wmul 0026  
                         ___ftmul 09FA                           ___fttol 0902  
                    __psmallconst 0600                   __CFG_STVREN$OFF 000000  
                      ??_adcToLcd 0037                           __pcinit 119C  
                      ??___awtoft 0032                        ??___ftpack 0026  
                       _ANSELbits 000F7E                        ??_WriteLCD 0029  
               __end_of_eval_poly 0BCA                           __ramtop 0600  
                         __ptext0 127A                           __ptext1 1120  
                         __ptext2 0E06                           __ptext3 1318  
                         __ptext4 12A8                           __ptext5 1380  
                         __ptext6 07E2                           __ptext7 0E98  
                         __ptext8 0AF0                           __ptext9 09FA  
                      ??_adc_poll 0021                   __size_of_strlen 004E  
                         _hmi_out 0E06               __end_of_WriteCommon 119C  
                    __size_of_log 0120                           _goto_xy 1318  
                ___awmod@dividend 0021             __size_of_display_mode 0024  
                      ??_get_temp 0097             __size_of_display_temp 0026  
            end_of_initialization 11C6                        ??_init_adc 0025  
                   __Lmediumconst 0000              __end_of_integerToLcd 0D58  
          __size_of_SerialReceive 0008                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                           strlen@s 0001  
                       _PORTCbits 000F82                         _PORTEbits 000F84  
                    _display_mode 12F4                      _display_temp 12A8  
                       _TRISAbits 000F92                         _TRISCbits 000F94  
                       _TRISEbits 000F96                  ??_SerialTransmit 000C  
           __end_of_display_speed 1380                       ___ftmul@exp 0063  
                     _WriteCommon 115E                    __end_of___wmul 12F4  
                     _BAUDCONbits 000FB8                     __pidataCOMRAM 13A2  
                   _SerialReceive 138C                     ?_pulse_enable 0001  
                  __end_of_strlen 1120               start_initialization 119C  
                      eval_poly@d 0078                        eval_poly@n 007A  
                      eval_poly@x 0075                       __end_of_log 0902  
                      frexp@value 0021                          ??___wmul 0033  
                __CFG_LPT1OSC$OFF 000000                    ?_SerialReceive 0001  
                        ??_strlen 0004                    ??_pulse_enable 0025  
               __size_of_adcToLcd 0038                 __size_of___awtoft 0038  
               __size_of___ftpack 00AE                 __size_of_WriteLCD 0066  
                     __pbssCOMRAM 003D                 __size_of_adc_poll 0006  
                   __pcstackBANK0 0060                         _WriteData 1330  
                       _WriteCtrl 1348             __size_of_integerToLcd 00BC  
               __size_of_get_temp 000C                         WriteLCD@i 002B  
                        ?_InitLCD 0001                 __size_of_init_adc 003E  
                       _clear_lcd 1394                 __CFG_CCP2MX$PORTC 000000  
                       __pintcode 0008                          ?___awdiv 0027  
                        ?___ftadd 0069                          ?___awmod 0021  
                        ?___ftmul 0033                          ?___fttol 0086  
           integerToLcd@thousands 0060                          ?_hmi_out 0001  
                     __smallconst 0600                      _integerToLcd 0C9C  
                        ?_goto_xy 0027                         _eval_poly 0AF0  
                  adcToLcd@result 0037                        ?_WriteData 0001  
                      ?_WriteCtrl 0001                    __size_of_delay 0036  
                  __size_of_frexp 0090                    ___wmul@product 0033  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
                      ?_clear_lcd 0001                          i2u189_40 10CC  
                __CFG_WDTPS$32768 000000                   ??_SerialReceive 0021  
                      _ADCON0bits 000FC2                 ___wmul@multiplier 002F  
                      ?_eval_poly 0075                         copy_data0 11B0  
 High_Priority_Interrupt@tempChar 0020                         frexp@eptr 0024  
            __end_of_pulse_enable 1372          ?_High_Priority_Interrupt 0001  
                __size_of_InitLCD 00D2                          __Hrparam 0000  
                        __Lrparam 0000                __CFG_BOREN$SBORDIS 000000  
                    ?_WriteCommon 0001                  __size_of___awdiv 0084  
                __size_of___ftadd 01AE                  __size_of___awmod 0070  
                __size_of___ftmul 00F6                  __size_of___fttol 00F8  
                        _adcToLcd 120C                          ___awtoft 11D4  
                        ___ftpack 0D58                          _WriteLCD 101C  
                        _adc_poll 139C              integerToLcd@hundreds 0061  
                __size_of_hmi_out 0092                  __size_of_goto_xy 0018  
                     ??_WriteData 0026                       ??_WriteCtrl 0026  
                        __ptext10 0634                          __ptext11 11D4  
                        __ptext20 0F28                          __ptext12 0D58  
                        __ptext21 139C                          __ptext13 0902  
                        __ptext30 1244                          __ptext22 101C  
                        __ptext14 1372                          __ptext23 1330  
                        __ptext15 12F4                          __ptext32 1082  
                        __ptext24 138C                          __ptext16 120C  
                        __ptext33 10D2                          __ptext25 0BCA  
                        __ptext17 0C9C                          __ptext26 1394  
                        __ptext18 12CE                          __ptext27 1348  
                        __ptext19 0FAC                          __ptext28 115E  
                        __ptext29 1360                          _get_temp 1380  
              SerialTransmit@size 000C                          _init_adc 1120  
                   __size_of_main 002E                       ??_clear_lcd 0027  
                        int$flags 003F            __size_of_display_speed 000E  
                        log@coeff 0601                        _INTCONbits 000FF2  
                     ??_eval_poly 007C                  display_temp@temp 00A0  
                        goto_xy@x 0028                          goto_xy@y 0027  
                        intlevel2 0000   __end_of_High_Priority_Interrupt 00C2  
                   _get_temp$1821 0099                        _OSCCONbits 000FD3  
         __size_of_SerialTransmit 0050                          strlen@cp 0006  
                WriteCommon@value 0025                       _SSPCON1bits 000FC6  
                     _SSPCON2bits 000FC5             __size_of_pulse_enable 0012  
                   _display_speed 1372                 __CFG_FOSC$INTIO67 000000  
                 WriteLCD@message 0027  
