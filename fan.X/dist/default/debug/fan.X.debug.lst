

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Oct 22 13:34:03 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48  0000                     
    49                           ; Version 1.41
    50                           ; Generated 25/01/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F45K20 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataCOMRAM
    85  00139E                     __pidataCOMRAM:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _speed
    89  00139E  0001               	dw	1
    90                           
    91                           	psect	idataBANK0
    92  0013A0                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _state
    96  0013A0  0001               	dw	1
    97                           
    98                           	psect	smallconst
    99  000600                     __psmallconst:
   100                           	opt stack 0
   101  000600  00                 	db	0
   102  000601                     log@coeff:
   103                           	opt stack 0
   104  000601  00                 	db	0
   105  000602  00                 	db	0
   106  000603  00                 	db	0
   107  000604  00                 	db	0
   108  000605  80                 	db	128
   109  000606  3F                 	db	63
   110  000607  F0                 	db	240
   111  000608  FF                 	db	255
   112  000609  BE                 	db	190
   113  00060A  E2                 	db	226
   114  00060B  A9                 	db	169
   115  00060C  3E                 	db	62
   116  00060D  83                 	db	131
   117  00060E  76                 	db	118
   118  00060F  BE                 	db	190
   119  000610  AE                 	db	174
   120  000611  2B                 	db	43
   121  000612  3E                 	db	62
   122  000613  3C                 	db	60
   123  000614  C3                 	db	195
   124  000615  BD                 	db	189
   125  000616  D2                 	db	210
   126  000617  13                 	db	19
   127  000618  3D                 	db	61
   128  000619  78                 	db	120
   129  00061A  D3                 	db	211
   130  00061B  BB                 	db	187
   131  00061C                     __end_oflog@coeff:
   132                           	opt stack 0
   133  0000                     _PORTD	set	3971
   134  0000                     _ANSELbits	set	3966
   135  0000                     _TRISAbits	set	3986
   136  0000                     _PORTEbits	set	3972
   137  0000                     _PORTCbits	set	3970
   138  0000                     _TRISEbits	set	3990
   139  0000                     _ANSEL	set	3966
   140  0000                     _TRISD	set	3989
   141  0000                     _TRISC	set	3988
   142  0000                     _TRISCbits	set	3988
   143  0000                     _ADCON0bits	set	4034
   144  0000                     _ADCON2	set	4032
   145  0000                     _ADCON1	set	4033
   146  0000                     _PIR1bits	set	3998
   147  0000                     _SSPCON2bits	set	4037
   148  0000                     _SSPBUF	set	4041
   149  0000                     _SSPCON1bits	set	4038
   150  0000                     _SSPSTATbits	set	4039
   151  0000                     _SSPADD	set	4040
   152  0000                     _ADRESH	set	4036
   153  0000                     _ADCON0	set	4034
   154  0000                     _RCREG	set	4014
   155  0000                     _TXREG	set	4013
   156  0000                     _SPBRG	set	4015
   157  0000                     _OSCCONbits	set	4051
   158  0000                     _BAUDCONbits	set	4024
   159  0000                     _RCSTA	set	4011
   160  0000                     _TXSTA	set	4012
   161  0000                     _RCIF	set	31989
   162  0000                     _TRMT	set	32097
   163  0000                     _TXIF	set	31988
   164  00061C                     STR_1:
   165  00061C  75                 	db	117	;'u'
   166  00061D  32                 	db	50	;'2'
   167  00061E  36                 	db	54	;'6'
   168  00061F  31                 	db	49	;'1'
   169  000620  30                 	db	48	;'0'
   170  000621  31                 	db	49	;'1'
   171  000622  30                 	db	48	;'0'
   172  000623  30                 	db	48	;'0'
   173  000624  30                 	db	48	;'0'
   174  000625  00                 	db	0
   175  000626                     STR_5:
   176  000626  4D                 	db	77	;'M'
   177  000627  61                 	db	97	;'a'
   178  000628  6E                 	db	110	;'n'
   179  000629  75                 	db	117	;'u'
   180  00062A  61                 	db	97	;'a'
   181  00062B  6C                 	db	108	;'l'
   182  00062C  00                 	db	0
   183  00062D                     STR_2:
   184  00062D  41                 	db	65	;'A'
   185  00062E  44                 	db	68	;'D'
   186  00062F  43                 	db	67	;'C'
   187  000630  3A                 	db	58	;':'
   188  000631  00                 	db	0
   189  000632                     STR_3:
   190  000632  49                 	db	73	;'I'
   191  000633  64                 	db	100	;'d'
   192  000634  6C                 	db	108	;'l'
   193  000635  65                 	db	101	;'e'
   194  000636  00                 	db	0
   195  000637                     STR_4:
   196  000637  41                 	db	65	;'A'
   197  000638  75                 	db	117	;'u'
   198  000639  74                 	db	116	;'t'
   199  00063A  6F                 	db	111	;'o'
   200  00063B  00                 	db	0
   201                           
   202                           ; #config settings
   203  00063C  00                 	db	0	; dummy byte at the end
   204  0000                     
   205                           	psect	cinit
   206  001076                     __pcinit:
   207                           	opt stack 0
   208  001076                     start_initialization:
   209                           	opt stack 0
   210  001076                     __initialization:
   211                           	opt stack 0
   212                           
   213                           ; Initialize objects allocated to BANK0 (2 bytes)
   214                           ; load TBLPTR registers with __pidataBANK0
   215  001076  0EA0               	movlw	low __pidataBANK0
   216  001078  6EF6               	movwf	tblptrl,c
   217  00107A  0E13               	movlw	high __pidataBANK0
   218  00107C  6EF7               	movwf	tblptrh,c
   219  00107E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   220  001080  6EF8               	movwf	tblptru,c
   221  001082  0009               	tblrd		*+	;fetch initializer
   222  001084  CFF5 F064          	movff	tablat,__pdataBANK0
   223  001088  0009               	tblrd		*+	;fetch initializer
   224  00108A  CFF5 F065          	movff	tablat,__pdataBANK0+1
   225                           
   226                           ; Initialize objects allocated to COMRAM (2 bytes)
   227                           ; load TBLPTR registers with __pidataCOMRAM
   228  00108E  0E9E               	movlw	low __pidataCOMRAM
   229  001090  6EF6               	movwf	tblptrl,c
   230  001092  0E13               	movlw	high __pidataCOMRAM
   231  001094  6EF7               	movwf	tblptrh,c
   232  001096  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   233  001098  6EF8               	movwf	tblptru,c
   234  00109A  0009               	tblrd		*+	;fetch initializer
   235  00109C  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   236  0010A0  0009               	tblrd		*+	;fetch initializer
   237  0010A2  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
   238                           
   239                           ; Clear objects allocated to BANK0 (4 bytes)
   240  0010A6  0100               	movlb	0
   241  0010A8  6B63               	clrf	(__pbssBANK0+3)& (0+255),b
   242  0010AA  6B62               	clrf	(__pbssBANK0+2)& (0+255),b
   243  0010AC  6B61               	clrf	(__pbssBANK0+1)& (0+255),b
   244  0010AE  6B60               	clrf	__pbssBANK0& (0+255),b
   245  0010B0                     end_of_initialization:
   246                           	opt stack 0
   247  0010B0                     __end_of__initialization:
   248                           	opt stack 0
   249  0010B0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   250  0010B2  6EF8               	movwf	tblptru,c
   251  0010B4  0E06               	movlw	high __Lsmallconst
   252  0010B6  6EF7               	movwf	tblptrh,c
   253  0010B8  0100               	movlb	0
   254  0010BA  EF5F  F008         	goto	_main	;jump to C main() function
   255                           tblptru	equ	0xFF8
   256                           tblptrh	equ	0xFF7
   257                           tblptrl	equ	0xFF6
   258                           tablat	equ	0xFF5
   259                           
   260                           	psect	dataCOMRAM
   261  00005D                     __pdataCOMRAM:
   262                           	opt stack 0
   263  00005D                     _speed:
   264                           	opt stack 0
   265  00005D                     	ds	2
   266                           tblptru	equ	0xFF8
   267                           tblptrh	equ	0xFF7
   268                           tblptrl	equ	0xFF6
   269                           tablat	equ	0xFF5
   270                           
   271                           	psect	bssBANK0
   272  000060                     __pbssBANK0:
   273                           	opt stack 0
   274  000060                     _errno:
   275                           	opt stack 0
   276  000060                     	ds	2
   277  000062                     _mode:
   278                           	opt stack 0
   279  000062                     	ds	2
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           
   285                           	psect	dataBANK0
   286  000064                     __pdataBANK0:
   287                           	opt stack 0
   288  000064                     _state:
   289                           	opt stack 0
   290  000064                     	ds	2
   291                           tblptru	equ	0xFF8
   292                           tblptrh	equ	0xFF7
   293                           tblptrl	equ	0xFF6
   294                           tablat	equ	0xFF5
   295                           
   296                           	psect	cstackCOMRAM
   297  000001                     __pcstackCOMRAM:
   298                           	opt stack 0
   299  000001                     ?_strlen:
   300                           	opt stack 0
   301  000001                     ?___awmod:
   302                           	opt stack 0
   303  000001                     ?___ftpack:
   304                           	opt stack 0
   305  000001                     ?_frexp:
   306                           	opt stack 0
   307  000001                     delay@x:
   308                           	opt stack 0
   309  000001                     ___awmod@dividend:
   310                           	opt stack 0
   311  000001                     strlen@s:
   312                           	opt stack 0
   313  000001                     ___ftpack@arg:
   314                           	opt stack 0
   315  000001                     frexp@value:
   316                           	opt stack 0
   317                           
   318                           ; 3 bytes @ 0x0
   319  000001                     	ds	2
   320  000003                     ??_strlen:
   321  000003                     delay@i:
   322                           	opt stack 0
   323  000003                     ___awmod@divisor:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x2
   327  000003                     	ds	1
   328  000004                     ___ftpack@exp:
   329                           	opt stack 0
   330  000004                     frexp@eptr:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x3
   334  000004                     	ds	1
   335  000005                     WriteCommon@value:
   336                           	opt stack 0
   337  000005                     ___awmod@counter:
   338                           	opt stack 0
   339  000005                     ___ftpack@sign:
   340                           	opt stack 0
   341  000005                     strlen@cp:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x4
   345  000005                     	ds	1
   346  000006                     ??___ftpack:
   347  000006                     ??_frexp:
   348  000006                     WriteCtrl@value:
   349                           	opt stack 0
   350  000006                     WriteData@value:
   351                           	opt stack 0
   352  000006                     ___awmod@sign:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x5
   356  000006                     	ds	1
   357  000007                     ?___awdiv:
   358                           	opt stack 0
   359  000007                     goto_xy@y:
   360                           	opt stack 0
   361  000007                     SerialTransmit@buffer:
   362                           	opt stack 0
   363  000007                     WriteLCD@message:
   364                           	opt stack 0
   365  000007                     ___awdiv@dividend:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x6
   369  000007                     	ds	1
   370  000008                     goto_xy@x:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x7
   374  000008                     	ds	1
   375  000009                     ??_WriteLCD:
   376  000009                     SerialTransmit@size:
   377                           	opt stack 0
   378  000009                     ___awdiv@divisor:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x8
   382  000009                     	ds	2
   383  00000B                     WriteLCD@i:
   384                           	opt stack 0
   385  00000B                     ___awdiv@counter:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0xA
   389  00000B                     	ds	1
   390  00000C                     ___awdiv@sign:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0xB
   394  00000C                     	ds	1
   395  00000D                     ___awdiv@quotient:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0xC
   399  00000D                     	ds	2
   400  00000F                     ?___wmul:
   401                           	opt stack 0
   402  00000F                     ?___awtoft:
   403                           	opt stack 0
   404  00000F                     ___wmul@multiplier:
   405                           	opt stack 0
   406  00000F                     ___awtoft@c:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0xE
   410  00000F                     	ds	2
   411  000011                     ___wmul@multiplicand:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x10
   415  000011                     	ds	1
   416  000012                     ___awtoft@sign:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0x11
   420  000012                     	ds	1
   421  000013                     ?___ftmul:
   422                           	opt stack 0
   423  000013                     ___wmul@product:
   424                           	opt stack 0
   425  000013                     ___ftmul@f1:
   426                           	opt stack 0
   427                           
   428                           ; 3 bytes @ 0x12
   429  000013                     	ds	2
   430  000015                     integerToLcd@num:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x14
   434  000015                     	ds	1
   435  000016                     ___ftmul@f2:
   436                           	opt stack 0
   437                           
   438                           ; 3 bytes @ 0x15
   439  000016                     	ds	1
   440  000017                     integerToLcd@thousands:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x16
   444  000017                     	ds	1
   445  000018                     integerToLcd@hundreds:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x17
   449  000018                     	ds	1
   450  000019                     ??___ftmul:
   451  000019                     integerToLcd@tens:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x18
   455  000019                     	ds	1
   456  00001A                     integerToLcd@ones:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x19
   460  00001A                     	ds	1
   461  00001B                     adcToLcd@result:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x1A
   465  00001B                     	ds	1
   466  00001C                     ___ftmul@exp:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x1B
   470  00001C                     	ds	1
   471  00001D                     ___ftmul@f3_as_product:
   472                           	opt stack 0
   473                           
   474                           ; 3 bytes @ 0x1C
   475  00001D                     	ds	3
   476  000020                     ___ftmul@cntr:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x1F
   480  000020                     	ds	1
   481  000021                     ___ftmul@sign:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x20
   485  000021                     	ds	1
   486  000022                     ?___ftadd:
   487                           	opt stack 0
   488  000022                     ___ftadd@f1:
   489                           	opt stack 0
   490                           
   491                           ; 3 bytes @ 0x21
   492  000022                     	ds	3
   493  000025                     ___ftadd@f2:
   494                           	opt stack 0
   495                           
   496                           ; 3 bytes @ 0x24
   497  000025                     	ds	3
   498  000028                     ??___ftadd:
   499                           
   500                           ; 1 bytes @ 0x27
   501  000028                     	ds	3
   502  00002B                     ___ftadd@sign:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x2A
   506  00002B                     	ds	1
   507  00002C                     ___ftadd@exp2:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x2B
   511  00002C                     	ds	1
   512  00002D                     ___ftadd@exp1:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x2C
   516  00002D                     	ds	1
   517  00002E                     ?_eval_poly:
   518                           	opt stack 0
   519  00002E                     eval_poly@x:
   520                           	opt stack 0
   521                           
   522                           ; 3 bytes @ 0x2D
   523  00002E                     	ds	3
   524  000031                     eval_poly@d:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x30
   528  000031                     	ds	2
   529  000033                     eval_poly@n:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x32
   533  000033                     	ds	2
   534  000035                     ??_eval_poly:
   535                           
   536                           ; 1 bytes @ 0x34
   537  000035                     	ds	2
   538  000037                     eval_poly@res:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x36
   542  000037                     	ds	3
   543  00003A                     ?_log:
   544                           	opt stack 0
   545  00003A                     log@x:
   546                           	opt stack 0
   547                           
   548                           ; 3 bytes @ 0x39
   549  00003A                     	ds	3
   550  00003D                     log@exponent:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x3C
   554  00003D                     	ds	2
   555  00003F                     ?___fttol:
   556                           	opt stack 0
   557  00003F                     ___fttol@f1:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x3E
   561  00003F                     	ds	4
   562  000043                     ??___fttol:
   563                           
   564                           ; 1 bytes @ 0x42
   565  000043                     	ds	5
   566  000048                     ___fttol@sign1:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x47
   570  000048                     	ds	1
   571  000049                     ___fttol@lval:
   572                           	opt stack 0
   573                           
   574                           ; 4 bytes @ 0x48
   575  000049                     	ds	4
   576  00004D                     ___fttol@exp1:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x4C
   580  00004D                     	ds	1
   581  00004E                     ?_get_temp:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x4D
   585  00004E                     	ds	2
   586  000050                     ??_get_temp:
   587                           
   588                           ; 1 bytes @ 0x4F
   589  000050                     	ds	2
   590  000052                     _get_temp$1684:
   591                           	opt stack 0
   592                           
   593                           ; 3 bytes @ 0x51
   594  000052                     	ds	3
   595  000055                     get_temp@logres:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x54
   599  000055                     	ds	2
   600  000057                     get_temp@result:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x56
   604  000057                     	ds	2
   605  000059                     display_temp@temp:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x58
   609  000059                     	ds	2
   610  00005B                     main@state_old:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x5A
   614  00005B                     	ds	2
   615                           tblptru	equ	0xFF8
   616                           tblptrh	equ	0xFF7
   617                           tblptrl	equ	0xFF6
   618                           tablat	equ	0xFF5
   619                           
   620 ;;
   621 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   622 ;;
   623 ;; *************** function _main *****************
   624 ;; Defined at:
   625 ;;		line 89 in file "hmi.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;		None
   628 ;; Auto vars:     Size  Location     Type
   629 ;;  state_old       2   90[COMRAM] int 
   630 ;; Return value:  Size  Location     Type
   631 ;;                  2   86[None  ] int 
   632 ;; Registers used:
   633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   639 ;;      Params:         0       0       0       0       0       0       0
   640 ;;      Locals:         2       0       0       0       0       0       0
   641 ;;      Temps:          0       0       0       0       0       0       0
   642 ;;      Totals:         2       0       0       0       0       0       0
   643 ;;Total ram usage:        2 bytes
   644 ;; Hardware stack levels required when called:    7
   645 ;; This function calls:
   646 ;;		_InitLCD
   647 ;;		_SerialReceive
   648 ;;		_SerialTransmit
   649 ;;		_adcToLcd
   650 ;;		_delay
   651 ;;		_hmi_out
   652 ;;		_init_adc
   653 ;; This function is called by:
   654 ;;		Startup code after reset
   655 ;; This function uses a non-reentrant model
   656 ;;
   657                           
   658                           	psect	text0
   659  0010BE                     __ptext0:
   660                           	opt stack 0
   661  0010BE                     _main:
   662                           	opt stack 24
   663                           
   664                           ;hmi.c: 92: TRISCbits.RC6=0;
   665                           
   666                           ;incstack = 0
   667  0010BE  9C94               	bcf	3988,6,c	;volatile
   668                           
   669                           ;hmi.c: 93: TRISCbits.RC7=1;
   670  0010C0  8E94               	bsf	3988,7,c	;volatile
   671                           
   672                           ;hmi.c: 94: TXSTA = 0b00100000;
   673  0010C2  0E20               	movlw	32
   674  0010C4  6EAC               	movwf	4012,c	;volatile
   675                           
   676                           ;hmi.c: 95: RCSTA = 0b10010000;
   677  0010C6  0E90               	movlw	144
   678  0010C8  6EAB               	movwf	4011,c	;volatile
   679                           
   680                           ;hmi.c: 96: BAUDCONbits.BRG16 =0;
   681  0010CA  96B8               	bcf	4024,3,c	;volatile
   682                           
   683                           ;hmi.c: 97: OSCCONbits.IRCF0 = 0;
   684  0010CC  98D3               	bcf	4051,4,c	;volatile
   685                           
   686                           ;hmi.c: 98: OSCCONbits.IRCF1 = 1;
   687  0010CE  8AD3               	bsf	4051,5,c	;volatile
   688                           
   689                           ;hmi.c: 99: OSCCONbits.IRCF2 = 1;
   690  0010D0  8CD3               	bsf	4051,6,c	;volatile
   691                           
   692                           ;hmi.c: 100: OSCCONbits.SCS1 =1;
   693  0010D2  82D3               	bsf	4051,1,c	;volatile
   694                           
   695                           ;hmi.c: 101: SPBRG = 12;
   696  0010D4  0E0C               	movlw	12
   697  0010D6  6EAF               	movwf	4015,c	;volatile
   698  0010D8                     l2526:
   699  0010D8  ECC4  F009         	call	_SerialReceive	;wreg free
   700  0010DC  0A75               	xorlw	117
   701  0010DE  A4D8               	btfss	status,2,c
   702  0010E0  D7FB               	goto	l2526
   703                           
   704                           ;hmi.c: 107: SerialTransmit("u26101000");
   705  0010E2  0E1C               	movlw	low STR_1
   706  0010E4  6E07               	movwf	SerialTransmit@buffer,c
   707  0010E6  0E06               	movlw	high STR_1
   708  0010E8  6E08               	movwf	SerialTransmit@buffer+1,c
   709  0010EA  EC81  F008         	call	_SerialTransmit	;wreg free
   710  0010EE  D7F4               	goto	l2526
   711  0010F0                     l2546:
   712                           
   713                           ;hmi.c: 137: {
   714                           ;hmi.c: 138: adcToLcd();
   715  0010F0  EC1A  F009         	call	_adcToLcd	;wreg free
   716                           
   717                           ;hmi.c: 139: delay(100);
   718  0010F4  0E00               	movlw	0
   719  0010F6  6E02               	movwf	delay@x+1,c
   720  0010F8  0E64               	movlw	100
   721  0010FA  6E01               	movwf	delay@x,c
   722  0010FC  EC36  F009         	call	_delay	;wreg free
   723  001100  D7F7               	goto	l2546
   724  001102                     __end_of_main:
   725                           	opt stack 0
   726                           tblptru	equ	0xFF8
   727                           tblptrh	equ	0xFF7
   728                           tblptrl	equ	0xFF6
   729                           tablat	equ	0xFF5
   730                           status	equ	0xFD8
   731                           
   732 ;; *************** function _init_adc *****************
   733 ;; Defined at:
   734 ;;		line 9 in file "sensors.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;		None
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg, status,2, status,0, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   748 ;;      Params:         0       0       0       0       0       0       0
   749 ;;      Locals:         0       0       0       0       0       0       0
   750 ;;      Temps:          0       0       0       0       0       0       0
   751 ;;      Totals:         0       0       0       0       0       0       0
   752 ;;Total ram usage:        0 bytes
   753 ;; Hardware stack levels used:    1
   754 ;; Hardware stack levels required when called:    1
   755 ;; This function calls:
   756 ;;		_delay
   757 ;; This function is called by:
   758 ;;		_main
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text1
   763  001142                     __ptext1:
   764                           	opt stack 0
   765  001142                     _init_adc:
   766                           	opt stack 29
   767                           
   768                           ;sensors.c: 11: TRISAbits.RA0 = 1;
   769                           
   770                           ;incstack = 0
   771  001142  8092               	bsf	3986,0,c	;volatile
   772                           
   773                           ;sensors.c: 12: TRISAbits.RA1 = 1;
   774  001144  8292               	bsf	3986,1,c	;volatile
   775                           
   776                           ;sensors.c: 13: TRISAbits.RA2 = 1;
   777  001146  8492               	bsf	3986,2,c	;volatile
   778                           
   779                           ;sensors.c: 14: TRISAbits.RA3 = 1;
   780  001148  8692               	bsf	3986,3,c	;volatile
   781                           
   782                           ;sensors.c: 15: ANSELbits.ANS0 = 1;
   783  00114A  807E               	bsf	3966,0,c	;volatile
   784                           
   785                           ;sensors.c: 16: ANSELbits.ANS1 = 1;
   786  00114C  827E               	bsf	3966,1,c	;volatile
   787                           
   788                           ;sensors.c: 17: ANSELbits.ANS2 = 1;
   789  00114E  847E               	bsf	3966,2,c	;volatile
   790                           
   791                           ;sensors.c: 18: ANSELbits.ANS3 = 1;
   792  001150  867E               	bsf	3966,3,c	;volatile
   793                           
   794                           ;sensors.c: 19: delay(2);
   795  001152  0E00               	movlw	0
   796  001154  6E02               	movwf	delay@x+1,c
   797  001156  0E02               	movlw	2
   798  001158  6E01               	movwf	delay@x,c
   799  00115A  EC36  F009         	call	_delay	;wreg free
   800                           
   801                           ;sensors.c: 20: ADCON1 = 0;
   802  00115E  0E00               	movlw	0
   803  001160  6EC1               	movwf	4033,c	;volatile
   804                           
   805                           ;sensors.c: 21: delay(2);
   806  001162  0E00               	movlw	0
   807  001164  6E02               	movwf	delay@x+1,c
   808  001166  0E02               	movlw	2
   809  001168  6E01               	movwf	delay@x,c
   810  00116A  EC36  F009         	call	_delay	;wreg free
   811                           
   812                           ;sensors.c: 22: ADCON2 = 0b00101011;
   813  00116E  0E2B               	movlw	43
   814  001170  6EC0               	movwf	4032,c	;volatile
   815                           
   816                           ;sensors.c: 23: delay(2);
   817  001172  0E00               	movlw	0
   818  001174  6E02               	movwf	delay@x+1,c
   819  001176  0E02               	movlw	2
   820  001178  6E01               	movwf	delay@x,c
   821  00117A  EC36  F009         	call	_delay	;wreg free
   822  00117E  0012               	return		;funcret
   823  001180                     __end_of_init_adc:
   824                           	opt stack 0
   825                           tblptru	equ	0xFF8
   826                           tblptrh	equ	0xFF7
   827                           tblptrl	equ	0xFF6
   828                           tablat	equ	0xFF5
   829                           status	equ	0xFD8
   830                           
   831 ;; *************** function _hmi_out *****************
   832 ;; Defined at:
   833 ;;		line 187 in file "hmi.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;		None
   838 ;; Return value:  Size  Location     Type
   839 ;;                  1    wreg      void 
   840 ;; Registers used:
   841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   842 ;; Tracked objects:
   843 ;;		On entry : 0/0
   844 ;;		On exit  : 0/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   847 ;;      Params:         0       0       0       0       0       0       0
   848 ;;      Locals:         0       0       0       0       0       0       0
   849 ;;      Temps:          0       0       0       0       0       0       0
   850 ;;      Totals:         0       0       0       0       0       0       0
   851 ;;Total ram usage:        0 bytes
   852 ;; Hardware stack levels used:    1
   853 ;; Hardware stack levels required when called:    6
   854 ;; This function calls:
   855 ;;		_WriteLCD
   856 ;;		_clear_lcd
   857 ;;		_delay
   858 ;;		_display_mode
   859 ;;		_display_speed
   860 ;;		_display_temp
   861 ;;		_goto_xy
   862 ;; This function is called by:
   863 ;;		_main
   864 ;;		_get_input
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           	psect	text2
   869  000DF6                     __ptext2:
   870                           	opt stack 0
   871  000DF6                     _hmi_out:
   872                           	opt stack 24
   873                           
   874                           ;hmi.c: 189: if(!state)
   875                           
   876                           ;incstack = 0
   877  000DF6  0100               	movlb	0	; () banked
   878  000DF8  5164               	movf	_state& (0+255),w,b
   879  000DFA  0100               	movlb	0	; () banked
   880  000DFC  1165               	iorwf	(_state+1)& (0+255),w,b
   881  000DFE  A4D8               	btfss	status,2,c
   882  000E00  D009               	goto	l2434
   883                           
   884                           ; BSR set to: 0
   885                           ;hmi.c: 190: {
   886                           ;hmi.c: 191: clear_lcd();
   887  000E02  ECC8  F009         	call	_clear_lcd	;wreg free
   888                           
   889                           ;hmi.c: 192: WriteLCD("Idle");
   890  000E06  0E32               	movlw	low STR_3
   891  000E08  6E07               	movwf	WriteLCD@message,c
   892  000E0A  0E06               	movlw	high STR_3
   893  000E0C  6E08               	movwf	WriteLCD@message+1,c
   894  000E0E  EC08  F008         	call	_WriteLCD	;wreg free
   895                           
   896                           ;hmi.c: 193: return;
   897  000E12  0012               	return	
   898  000E14                     l2434:
   899                           
   900                           ;hmi.c: 194: }
   901                           ;hmi.c: 195: clear_lcd();
   902  000E14  ECC8  F009         	call	_clear_lcd	;wreg free
   903                           
   904                           ;hmi.c: 196: delay(1);
   905  000E18  0E00               	movlw	0
   906  000E1A  6E02               	movwf	delay@x+1,c
   907  000E1C  0E01               	movlw	1
   908  000E1E  6E01               	movwf	delay@x,c
   909  000E20  EC36  F009         	call	_delay	;wreg free
   910                           
   911                           ;hmi.c: 197: goto_xy(1,15);
   912  000E24  0E0F               	movlw	15
   913  000E26  6E07               	movwf	goto_xy@y,c
   914  000E28  0E01               	movlw	1
   915  000E2A  EC8B  F009         	call	_goto_xy
   916                           
   917                           ;hmi.c: 198: delay(1);
   918  000E2E  0E00               	movlw	0
   919  000E30  6E02               	movwf	delay@x+1,c
   920  000E32  0E01               	movlw	1
   921  000E34  6E01               	movwf	delay@x,c
   922  000E36  EC36  F009         	call	_delay	;wreg free
   923                           
   924                           ;hmi.c: 199: display_speed();
   925  000E3A  ECB8  F009         	call	_display_speed	;wreg free
   926                           
   927                           ;hmi.c: 204: delay(1);
   928  000E3E  0E00               	movlw	0
   929  000E40  6E02               	movwf	delay@x+1,c
   930  000E42  0E01               	movlw	1
   931  000E44  6E01               	movwf	delay@x,c
   932  000E46  EC36  F009         	call	_delay	;wreg free
   933                           
   934                           ;hmi.c: 205: goto_xy(0,0);
   935  000E4A  0E00               	movlw	0
   936  000E4C  6E07               	movwf	goto_xy@y,c
   937  000E4E  0E00               	movlw	0
   938  000E50  EC8B  F009         	call	_goto_xy
   939                           
   940                           ;hmi.c: 206: delay(1);
   941  000E54  0E00               	movlw	0
   942  000E56  6E02               	movwf	delay@x+1,c
   943  000E58  0E01               	movlw	1
   944  000E5A  6E01               	movwf	delay@x,c
   945  000E5C  EC36  F009         	call	_delay	;wreg free
   946                           
   947                           ;hmi.c: 207: display_temp();
   948  000E60  EC65  F009         	call	_display_temp	;wreg free
   949                           
   950                           ;hmi.c: 208: delay(1);
   951  000E64  0E00               	movlw	0
   952  000E66  6E02               	movwf	delay@x+1,c
   953  000E68  0E01               	movlw	1
   954  000E6A  6E01               	movwf	delay@x,c
   955  000E6C  EC36  F009         	call	_delay	;wreg free
   956                           
   957                           ;hmi.c: 209: goto_xy(9,0);
   958  000E70  0E00               	movlw	0
   959  000E72  6E07               	movwf	goto_xy@y,c
   960  000E74  0E09               	movlw	9
   961  000E76  EC8B  F009         	call	_goto_xy
   962                           
   963                           ;hmi.c: 210: delay(1);
   964  000E7A  0E00               	movlw	0
   965  000E7C  6E02               	movwf	delay@x+1,c
   966  000E7E  0E01               	movlw	1
   967  000E80  6E01               	movwf	delay@x,c
   968  000E82  EC36  F009         	call	_delay	;wreg free
   969                           
   970                           ;hmi.c: 211: display_mode();
   971  000E86  EC51  F009         	call	_display_mode	;wreg free
   972  000E8A  0012               	return		;funcret
   973  000E8C                     __end_of_hmi_out:
   974                           	opt stack 0
   975                           tblptru	equ	0xFF8
   976                           tblptrh	equ	0xFF7
   977                           tblptrl	equ	0xFF6
   978                           tablat	equ	0xFF5
   979                           status	equ	0xFD8
   980                           
   981 ;; *************** function _goto_xy *****************
   982 ;; Defined at:
   983 ;;		line 136 in file "lcd.c"
   984 ;; Parameters:    Size  Location     Type
   985 ;;  x               1    wreg     unsigned char 
   986 ;;  y               1    6[COMRAM] unsigned char 
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  x               1    7[COMRAM] unsigned char 
   989 ;; Return value:  Size  Location     Type
   990 ;;                  1    wreg      void 
   991 ;; Registers used:
   992 ;;		wreg, status,2, status,0, cstack
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   998 ;;      Params:         1       0       0       0       0       0       0
   999 ;;      Locals:         1       0       0       0       0       0       0
  1000 ;;      Temps:          0       0       0       0       0       0       0
  1001 ;;      Totals:         2       0       0       0       0       0       0
  1002 ;;Total ram usage:        2 bytes
  1003 ;; Hardware stack levels used:    1
  1004 ;; Hardware stack levels required when called:    4
  1005 ;; This function calls:
  1006 ;;		_WriteCtrl
  1007 ;; This function is called by:
  1008 ;;		_hmi_out
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012                           	psect	text3
  1013  001316                     __ptext3:
  1014                           	opt stack 0
  1015  001316                     _goto_xy:
  1016                           	opt stack 25
  1017                           
  1018                           ;incstack = 0
  1019                           ;goto_xy@x stored from wreg
  1020  001316  6E08               	movwf	goto_xy@x,c
  1021                           
  1022                           ;lcd.c: 138: if(x<40)
  1023  001318  0E28               	movlw	40
  1024  00131A  6008               	cpfslt	goto_xy@x,c
  1025  00131C  0012               	return	
  1026                           
  1027                           ;lcd.c: 139: {
  1028                           ;lcd.c: 140: if(y) x|=0b01000000;
  1029  00131E  5007               	movf	goto_xy@y,w,c
  1030  001320  A4D8               	btfss	status,2,c
  1031  001322  8C08               	bsf	goto_xy@x,6,c
  1032                           
  1033                           ;lcd.c: 141: x|=0b10000000;
  1034  001324  8E08               	bsf	goto_xy@x,7,c
  1035                           
  1036                           ;lcd.c: 142: WriteCtrl(x);
  1037  001326  5008               	movf	goto_xy@x,w,c
  1038  001328  ECA3  F009         	call	_WriteCtrl
  1039  00132C  0012               	return	
  1040  00132E                     __end_of_goto_xy:
  1041                           	opt stack 0
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           status	equ	0xFD8
  1047                           
  1048 ;; *************** function _display_temp *****************
  1049 ;; Defined at:
  1050 ;;		line 233 in file "hmi.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;  temp            2   88[COMRAM] int 
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1064 ;;      Params:         0       0       0       0       0       0       0
  1065 ;;      Locals:         2       0       0       0       0       0       0
  1066 ;;      Temps:          0       0       0       0       0       0       0
  1067 ;;      Totals:         2       0       0       0       0       0       0
  1068 ;;Total ram usage:        2 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    5
  1071 ;; This function calls:
  1072 ;;		_WriteData
  1073 ;;		_get_temp
  1074 ;;		_integerToLcd
  1075 ;; This function is called by:
  1076 ;;		_hmi_out
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text4
  1081  0012CA                     __ptext4:
  1082                           	opt stack 0
  1083  0012CA                     _display_temp:
  1084                           	opt stack 24
  1085                           
  1086                           ;hmi.c: 235: int temp = get_temp();
  1087                           
  1088                           ;incstack = 0
  1089  0012CA  ECBF  F009         	call	_get_temp	;wreg free
  1090  0012CE  C04E  F059         	movff	?_get_temp,display_temp@temp
  1091  0012D2  C04F  F05A         	movff	?_get_temp+1,display_temp@temp+1
  1092                           
  1093                           ;hmi.c: 236: integerToLcd(temp);
  1094  0012D6  C059  F015         	movff	display_temp@temp,integerToLcd@num
  1095  0012DA  C05A  F016         	movff	display_temp@temp+1,integerToLcd@num+1
  1096  0012DE  EC4A  F006         	call	_integerToLcd	;wreg free
  1097                           
  1098                           ;hmi.c: 237: WriteData(0b11011111);
  1099  0012E2  0EDF               	movlw	223
  1100  0012E4  EC97  F009         	call	_WriteData
  1101                           
  1102                           ;hmi.c: 238: WriteData('C');
  1103  0012E8  0E43               	movlw	67
  1104  0012EA  EC97  F009         	call	_WriteData
  1105  0012EE  0012               	return		;funcret
  1106  0012F0                     __end_of_display_temp:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           status	equ	0xFD8
  1113                           
  1114 ;; *************** function _get_temp *****************
  1115 ;; Defined at:
  1116 ;;		line 31 in file "sensors.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  result          2   86[COMRAM] int 
  1121 ;;  logres          2   84[COMRAM] int 
  1122 ;; Return value:  Size  Location     Type
  1123 ;;                  2   77[COMRAM] int 
  1124 ;; Registers used:
  1125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1126 ;; Tracked objects:
  1127 ;;		On entry : 0/0
  1128 ;;		On exit  : 0/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1131 ;;      Params:         2       0       0       0       0       0       0
  1132 ;;      Locals:         7       0       0       0       0       0       0
  1133 ;;      Temps:          2       0       0       0       0       0       0
  1134 ;;      Totals:        11       0       0       0       0       0       0
  1135 ;;Total ram usage:       11 bytes
  1136 ;; Hardware stack levels used:    1
  1137 ;; Hardware stack levels required when called:    4
  1138 ;; This function calls:
  1139 ;;		___awdiv
  1140 ;;		___awtoft
  1141 ;;		___fttol
  1142 ;;		___wmul
  1143 ;;		_adc_poll
  1144 ;;		_log
  1145 ;; This function is called by:
  1146 ;;		_display_temp
  1147 ;;		_display_light
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           	psect	text5
  1152  00137E                     __ptext5:
  1153                           	opt stack 0
  1154  00137E                     _get_temp:
  1155                           	opt stack 24
  1156                           
  1157                           ;sensors.c: 33: return 27;
  1158                           
  1159                           ;incstack = 0
  1160  00137E  0E00               	movlw	0
  1161  001380  6E4F               	movwf	?_get_temp+1,c
  1162  001382  0E1B               	movlw	27
  1163  001384  6E4E               	movwf	?_get_temp,c
  1164  001386  0012               	return	
  1165  001388                     __end_of_get_temp:
  1166                           	opt stack 0
  1167                           tblptru	equ	0xFF8
  1168                           tblptrh	equ	0xFF7
  1169                           tblptrl	equ	0xFF6
  1170                           tablat	equ	0xFF5
  1171                           status	equ	0xFD8
  1172                           
  1173 ;; *************** function _log *****************
  1174 ;; Defined at:
  1175 ;;		line 5 in file "/opt/microchip/xc8/v1.41/sources/common/log.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;  x               3   57[COMRAM] int 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  exponent        2   60[COMRAM] int 
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  3   57[COMRAM] int 
  1182 ;; Registers used:
  1183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1189 ;;      Params:         3       0       0       0       0       0       0
  1190 ;;      Locals:         2       0       0       0       0       0       0
  1191 ;;      Temps:          0       0       0       0       0       0       0
  1192 ;;      Totals:         5       0       0       0       0       0       0
  1193 ;;Total ram usage:        5 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:    3
  1196 ;; This function calls:
  1197 ;;		___awtoft
  1198 ;;		___ftadd
  1199 ;;		___ftmul
  1200 ;;		_eval_poly
  1201 ;;		_frexp
  1202 ;; This function is called by:
  1203 ;;		_get_temp
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           	psect	text6
  1208  0007EA                     __ptext6:
  1209                           	opt stack 0
  1210  0007EA                     _log:
  1211                           	opt stack 24
  1212                           
  1213                           ;incstack = 0
  1214  0007EA  AE3C               	btfss	log@x+2,7,c
  1215  0007EC  D00C               	goto	l2078
  1216  0007EE  0E00               	movlw	0
  1217  0007F0  0100               	movlb	0	; () banked
  1218  0007F2  6F61               	movwf	(_errno+1)& (0+255),b
  1219  0007F4  0E21               	movlw	33
  1220  0007F6  6F60               	movwf	_errno& (0+255),b
  1221  0007F8  0E00               	movlw	0
  1222  0007FA  6E3A               	movwf	?_log,c
  1223  0007FC  0E00               	movlw	0
  1224  0007FE  6E3B               	movwf	?_log+1,c
  1225  000800  0E00               	movlw	0
  1226  000802  6E3C               	movwf	?_log+2,c
  1227                           
  1228                           ; BSR set to: 0
  1229  000804  0012               	return	
  1230  000806                     l2078:
  1231  000806  503A               	movf	log@x,w,c
  1232  000808  103B               	iorwf	log@x+1,w,c
  1233  00080A  103C               	iorwf	log@x+2,w,c
  1234  00080C  A4D8               	btfss	status,2,c
  1235  00080E  D00C               	goto	l2084
  1236  000810  0E00               	movlw	0
  1237  000812  0100               	movlb	0	; () banked
  1238  000814  6F61               	movwf	(_errno+1)& (0+255),b
  1239  000816  0E22               	movlw	34
  1240  000818  6F60               	movwf	_errno& (0+255),b
  1241  00081A  0E00               	movlw	0
  1242  00081C  6E3A               	movwf	?_log,c
  1243  00081E  0E00               	movlw	0
  1244  000820  6E3B               	movwf	?_log+1,c
  1245  000822  0E00               	movlw	0
  1246  000824  6E3C               	movwf	?_log+2,c
  1247                           
  1248                           ; BSR set to: 0
  1249  000826  0012               	return	
  1250  000828                     l2084:
  1251  000828  0E00               	movlw	0
  1252  00082A  6E16               	movwf	___ftmul@f2,c
  1253  00082C  0E00               	movlw	0
  1254  00082E  6E17               	movwf	___ftmul@f2+1,c
  1255  000830  0E40               	movlw	64
  1256  000832  6E18               	movwf	___ftmul@f2+2,c
  1257  000834  0E3D               	movlw	low log@exponent
  1258  000836  6E04               	movwf	frexp@eptr,c
  1259  000838  0E00               	movlw	high log@exponent
  1260  00083A  6E05               	movwf	frexp@eptr+1,c
  1261  00083C  C03A  F001         	movff	log@x,frexp@value
  1262  000840  C03B  F002         	movff	log@x+1,frexp@value+1
  1263  000844  C03C  F003         	movff	log@x+2,frexp@value+2
  1264  000848  EC46  F007         	call	_frexp	;wreg free
  1265  00084C  C001  F013         	movff	?_frexp,___ftmul@f1
  1266  000850  C002  F014         	movff	?_frexp+1,___ftmul@f1+1
  1267  000854  C003  F015         	movff	?_frexp+2,___ftmul@f1+2
  1268  000858  EC84  F004         	call	___ftmul	;wreg free
  1269  00085C  C013  F022         	movff	?___ftmul,___ftadd@f1
  1270  000860  C014  F023         	movff	?___ftmul+1,___ftadd@f1+1
  1271  000864  C015  F024         	movff	?___ftmul+2,___ftadd@f1+2
  1272  000868  0E00               	movlw	0
  1273  00086A  6E25               	movwf	___ftadd@f2,c
  1274  00086C  0E80               	movlw	128
  1275  00086E  6E26               	movwf	___ftadd@f2+1,c
  1276  000870  0EBF               	movlw	191
  1277  000872  6E27               	movwf	___ftadd@f2+2,c
  1278  000874  EC1F  F003         	call	___ftadd	;wreg free
  1279  000878  C022  F03A         	movff	?___ftadd,log@x
  1280  00087C  C023  F03B         	movff	?___ftadd+1,log@x+1
  1281  000880  C024  F03C         	movff	?___ftadd+2,log@x+2
  1282  000884  063D               	decf	log@exponent,f,c
  1283  000886  A0D8               	btfss	status,0,c
  1284  000888  063E               	decf	log@exponent+1,f,c
  1285  00088A  C03A  F02E         	movff	log@x,eval_poly@x
  1286  00088E  C03B  F02F         	movff	log@x+1,eval_poly@x+1
  1287  000892  C03C  F030         	movff	log@x+2,eval_poly@x+2
  1288  000896  0E01               	movlw	low log@coeff
  1289  000898  6E31               	movwf	eval_poly@d,c
  1290  00089A  0E06               	movlw	high log@coeff
  1291  00089C  6E32               	movwf	eval_poly@d+1,c
  1292  00089E  0E00               	movlw	0
  1293  0008A0  6E34               	movwf	eval_poly@n+1,c
  1294  0008A2  0E08               	movlw	8
  1295  0008A4  6E33               	movwf	eval_poly@n,c
  1296  0008A6  EC78  F005         	call	_eval_poly	;wreg free
  1297  0008AA  C02E  F03A         	movff	?_eval_poly,log@x
  1298  0008AE  C02F  F03B         	movff	?_eval_poly+1,log@x+1
  1299  0008B2  C030  F03C         	movff	?_eval_poly+2,log@x+2
  1300  0008B6  0E72               	movlw	114
  1301  0008B8  6E16               	movwf	___ftmul@f2,c
  1302  0008BA  0E31               	movlw	49
  1303  0008BC  6E17               	movwf	___ftmul@f2+1,c
  1304  0008BE  0E3F               	movlw	63
  1305  0008C0  6E18               	movwf	___ftmul@f2+2,c
  1306  0008C2  C03D  F00F         	movff	log@exponent,___awtoft@c
  1307  0008C6  C03E  F010         	movff	log@exponent+1,___awtoft@c+1
  1308  0008CA  ECFE  F008         	call	___awtoft	;wreg free
  1309  0008CE  C00F  F013         	movff	?___awtoft,___ftmul@f1
  1310  0008D2  C010  F014         	movff	?___awtoft+1,___ftmul@f1+1
  1311  0008D6  C011  F015         	movff	?___awtoft+2,___ftmul@f1+2
  1312  0008DA  EC84  F004         	call	___ftmul	;wreg free
  1313  0008DE  C013  F022         	movff	?___ftmul,___ftadd@f1
  1314  0008E2  C014  F023         	movff	?___ftmul+1,___ftadd@f1+1
  1315  0008E6  C015  F024         	movff	?___ftmul+2,___ftadd@f1+2
  1316  0008EA  C03A  F025         	movff	log@x,___ftadd@f2
  1317  0008EE  C03B  F026         	movff	log@x+1,___ftadd@f2+1
  1318  0008F2  C03C  F027         	movff	log@x+2,___ftadd@f2+2
  1319  0008F6  EC1F  F003         	call	___ftadd	;wreg free
  1320  0008FA  C022  F03A         	movff	?___ftadd,?_log
  1321  0008FE  C023  F03B         	movff	?___ftadd+1,?_log+1
  1322  000902  C024  F03C         	movff	?___ftadd+2,?_log+2
  1323  000906  0012               	return	
  1324  000908                     __end_of_log:
  1325                           	opt stack 0
  1326                           tblptru	equ	0xFF8
  1327                           tblptrh	equ	0xFF7
  1328                           tblptrl	equ	0xFF6
  1329                           tablat	equ	0xFF5
  1330                           status	equ	0xFD8
  1331                           
  1332 ;; *************** function _frexp *****************
  1333 ;; Defined at:
  1334 ;;		line 254 in file "/opt/microchip/xc8/v1.41/sources/common/frexp.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;  value           3    0[COMRAM] int 
  1337 ;;  eptr            2    3[COMRAM] PTR int 
  1338 ;;		 -> log@exponent(2), 
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;		None
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  3    0[COMRAM] PTR int 
  1343 ;; Registers used:
  1344 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1350 ;;      Params:         5       0       0       0       0       0       0
  1351 ;;      Locals:         0       0       0       0       0       0       0
  1352 ;;      Temps:          2       0       0       0       0       0       0
  1353 ;;      Totals:         7       0       0       0       0       0       0
  1354 ;;Total ram usage:        7 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; This function calls:
  1357 ;;		Nothing
  1358 ;; This function is called by:
  1359 ;;		_log
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text7
  1364  000E8C                     __ptext7:
  1365                           	opt stack 0
  1366  000E8C                     _frexp:
  1367                           	opt stack 26
  1368                           
  1369                           ;incstack = 0
  1370  000E8C  5001               	movf	frexp@value,w,c
  1371  000E8E  1002               	iorwf	frexp@value+1,w,c
  1372  000E90  1003               	iorwf	frexp@value+2,w,c
  1373  000E92  A4D8               	btfss	status,2,c
  1374  000E94  D00F               	goto	l2048
  1375  000E96  C004  FFD9         	movff	frexp@eptr,fsr2l
  1376  000E9A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1377  000E9E  0E00               	movlw	0
  1378  000EA0  6EDE               	movwf	postinc2,c
  1379  000EA2  0E00               	movlw	0
  1380  000EA4  6EDD               	movwf	postdec2,c
  1381  000EA6  0E00               	movlw	0
  1382  000EA8  6E01               	movwf	?_frexp,c
  1383  000EAA  0E00               	movlw	0
  1384  000EAC  6E02               	movwf	?_frexp+1,c
  1385  000EAE  0E00               	movlw	0
  1386  000EB0  6E03               	movwf	?_frexp+2,c
  1387  000EB2  0012               	return	
  1388  000EB4                     l2048:
  1389  000EB4  5003               	movf	frexp@value+2,w,c
  1390  000EB6  0B7F               	andlw	127
  1391  000EB8  6E06               	movwf	??_frexp& (0+255),c
  1392  000EBA  6A07               	clrf	(??_frexp+1)& (0+255),c
  1393  000EBC  90D8               	bcf	status,0,c
  1394  000EBE  3606               	rlcf	??_frexp,f,c
  1395  000EC0  3607               	rlcf	??_frexp+1,f,c
  1396  000EC2  C004  FFD9         	movff	frexp@eptr,fsr2l
  1397  000EC6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1398  000ECA  C006  FFDE         	movff	??_frexp,postinc2
  1399  000ECE  C007  FFDD         	movff	??_frexp+1,postdec2
  1400  000ED2  AE02               	btfss	frexp@value+1,7,c
  1401  000ED4  D003               	goto	u1540
  1402  000ED6  6A06               	clrf	??_frexp& (0+255),c
  1403  000ED8  2A06               	incf	??_frexp& (0+255),f,c
  1404  000EDA  D001               	goto	u1548
  1405  000EDC                     u1540:
  1406  000EDC  6A06               	clrf	??_frexp& (0+255),c
  1407  000EDE                     u1548:
  1408  000EDE  5006               	movf	??_frexp,w,c
  1409  000EE0  C004  FFD9         	movff	frexp@eptr,fsr2l
  1410  000EE4  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1411  000EE8  12DE               	iorwf	postinc2,f,c
  1412  000EEA  0E00               	movlw	0
  1413  000EEC  12DD               	iorwf	postdec2,f,c
  1414  000EEE  C004  FFD9         	movff	frexp@eptr,fsr2l
  1415  000EF2  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1416  000EF6  0E82               	movlw	130
  1417  000EF8  26DE               	addwf	postinc2,f,c
  1418  000EFA  0EFF               	movlw	255
  1419  000EFC  22DD               	addwfc	postdec2,f,c
  1420  000EFE  8003               	bsf	frexp@value+2,0,c
  1421  000F00  8203               	bsf	frexp@value+2,1,c
  1422  000F02  8403               	bsf	frexp@value+2,2,c
  1423  000F04  8603               	bsf	frexp@value+2,3,c
  1424  000F06  8803               	bsf	frexp@value+2,4,c
  1425  000F08  8A03               	bsf	frexp@value+2,5,c
  1426  000F0A  9C03               	bcf	frexp@value+2,6,c
  1427  000F0C  9E02               	bcf	frexp@value+1,7,c
  1428  000F0E  C001  F001         	movff	frexp@value,?_frexp
  1429  000F12  C002  F002         	movff	frexp@value+1,?_frexp+1
  1430  000F16  C003  F003         	movff	frexp@value+2,?_frexp+2
  1431  000F1A  0012               	return	
  1432  000F1C                     __end_of_frexp:
  1433                           	opt stack 0
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           postinc2	equ	0xFDE
  1439                           postdec2	equ	0xFDD
  1440                           fsr2h	equ	0xFDA
  1441                           fsr2l	equ	0xFD9
  1442                           status	equ	0xFD8
  1443                           
  1444 ;; *************** function _eval_poly *****************
  1445 ;; Defined at:
  1446 ;;		line 4 in file "/opt/microchip/xc8/v1.41/sources/common/evalpoly.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;  x               3   45[COMRAM] PTR int 
  1449 ;;  d               2   48[COMRAM] PTR const 
  1450 ;;		 -> log@coeff(27), 
  1451 ;;  n               2   50[COMRAM] int 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  res             3   54[COMRAM] int 
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  3   45[COMRAM] int 
  1456 ;; Registers used:
  1457 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1463 ;;      Params:         7       0       0       0       0       0       0
  1464 ;;      Locals:         3       0       0       0       0       0       0
  1465 ;;      Temps:          2       0       0       0       0       0       0
  1466 ;;      Totals:        12       0       0       0       0       0       0
  1467 ;;Total ram usage:       12 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    2
  1470 ;; This function calls:
  1471 ;;		___ftadd
  1472 ;;		___ftmul
  1473 ;;		___wmul
  1474 ;; This function is called by:
  1475 ;;		_log
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text8
  1480  000AF0                     __ptext8:
  1481                           	opt stack 0
  1482  000AF0                     _eval_poly:
  1483                           	opt stack 24
  1484                           
  1485                           ;incstack = 0
  1486  000AF0  C033  F00F         	movff	eval_poly@n,___wmul@multiplier
  1487  000AF4  C034  F010         	movff	eval_poly@n+1,___wmul@multiplier+1
  1488  000AF8  0E00               	movlw	0
  1489  000AFA  6E12               	movwf	___wmul@multiplicand+1,c
  1490  000AFC  0E03               	movlw	3
  1491  000AFE  6E11               	movwf	___wmul@multiplicand,c
  1492  000B00  EC78  F009         	call	___wmul	;wreg free
  1493  000B04  C031  F035         	movff	eval_poly@d,??_eval_poly
  1494  000B08  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  1495  000B0C  500F               	movf	?___wmul,w,c
  1496  000B0E  2635               	addwf	??_eval_poly,f,c
  1497  000B10  5010               	movf	?___wmul+1,w,c
  1498  000B12  2236               	addwfc	??_eval_poly+1,f,c
  1499  000B14  C035  FFF6         	movff	??_eval_poly,tblptrl
  1500  000B18  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  1501  000B1C                     	if	0	;tblptru may be non-zero
  1502  000B1C                     	endif
  1503  000B1C                     	if	0	;tblptru may be non-zero
  1504  000B1C                     	endif
  1505  000B1C  0009               	tblrd		*+
  1506  000B1E  CFF5 F037          	movff	tablat,eval_poly@res
  1507  000B22  0009               	tblrd		*+
  1508  000B24  CFF5 F038          	movff	tablat,eval_poly@res+1
  1509  000B28  000A               	tblrd		*-
  1510  000B2A  CFF5 F039          	movff	tablat,eval_poly@res+2
  1511  000B2E  D03E               	goto	l2064
  1512  000B30                     l2062:
  1513  000B30  C037  F016         	movff	eval_poly@res,___ftmul@f2
  1514  000B34  C038  F017         	movff	eval_poly@res+1,___ftmul@f2+1
  1515  000B38  C039  F018         	movff	eval_poly@res+2,___ftmul@f2+2
  1516  000B3C  C02E  F013         	movff	eval_poly@x,___ftmul@f1
  1517  000B40  C02F  F014         	movff	eval_poly@x+1,___ftmul@f1+1
  1518  000B44  C030  F015         	movff	eval_poly@x+2,___ftmul@f1+2
  1519  000B48  EC84  F004         	call	___ftmul	;wreg free
  1520  000B4C  C013  F022         	movff	?___ftmul,___ftadd@f1
  1521  000B50  C014  F023         	movff	?___ftmul+1,___ftadd@f1+1
  1522  000B54  C015  F024         	movff	?___ftmul+2,___ftadd@f1+2
  1523  000B58  0E00               	movlw	0
  1524  000B5A  6E12               	movwf	___wmul@multiplicand+1,c
  1525  000B5C  0E03               	movlw	3
  1526  000B5E  6E11               	movwf	___wmul@multiplicand,c
  1527  000B60  0633               	decf	eval_poly@n,f,c
  1528  000B62  A0D8               	btfss	status,0,c
  1529  000B64  0634               	decf	eval_poly@n+1,f,c
  1530  000B66  C033  F00F         	movff	eval_poly@n,___wmul@multiplier
  1531  000B6A  C034  F010         	movff	eval_poly@n+1,___wmul@multiplier+1
  1532  000B6E  EC78  F009         	call	___wmul	;wreg free
  1533  000B72  C031  F035         	movff	eval_poly@d,??_eval_poly
  1534  000B76  C032  F036         	movff	eval_poly@d+1,??_eval_poly+1
  1535  000B7A  500F               	movf	?___wmul,w,c
  1536  000B7C  2635               	addwf	??_eval_poly,f,c
  1537  000B7E  5010               	movf	?___wmul+1,w,c
  1538  000B80  2236               	addwfc	??_eval_poly+1,f,c
  1539  000B82  C035  FFF6         	movff	??_eval_poly,tblptrl
  1540  000B86  C036  FFF7         	movff	??_eval_poly+1,tblptrh
  1541  000B8A                     	if	0	;tblptru may be non-zero
  1542  000B8A                     	endif
  1543  000B8A                     	if	0	;tblptru may be non-zero
  1544  000B8A                     	endif
  1545  000B8A  0009               	tblrd		*+
  1546  000B8C  CFF5 F025          	movff	tablat,___ftadd@f2
  1547  000B90  0009               	tblrd		*+
  1548  000B92  CFF5 F026          	movff	tablat,___ftadd@f2+1
  1549  000B96  000A               	tblrd		*-
  1550  000B98  CFF5 F027          	movff	tablat,___ftadd@f2+2
  1551  000B9C  EC1F  F003         	call	___ftadd	;wreg free
  1552  000BA0  C022  F037         	movff	?___ftadd,eval_poly@res
  1553  000BA4  C023  F038         	movff	?___ftadd+1,eval_poly@res+1
  1554  000BA8  C024  F039         	movff	?___ftadd+2,eval_poly@res+2
  1555  000BAC                     l2064:
  1556  000BAC  5033               	movf	eval_poly@n,w,c
  1557  000BAE  1034               	iorwf	eval_poly@n+1,w,c
  1558  000BB0  A4D8               	btfss	status,2,c
  1559  000BB2  D7BE               	goto	l2062
  1560  000BB4  C037  F02E         	movff	eval_poly@res,?_eval_poly
  1561  000BB8  C038  F02F         	movff	eval_poly@res+1,?_eval_poly+1
  1562  000BBC  C039  F030         	movff	eval_poly@res+2,?_eval_poly+2
  1563  000BC0  0012               	return		;funcret
  1564  000BC2                     __end_of_eval_poly:
  1565                           	opt stack 0
  1566                           tblptru	equ	0xFF8
  1567                           tblptrh	equ	0xFF7
  1568                           tblptrl	equ	0xFF6
  1569                           tablat	equ	0xFF5
  1570                           postinc2	equ	0xFDE
  1571                           postdec2	equ	0xFDD
  1572                           fsr2h	equ	0xFDA
  1573                           fsr2l	equ	0xFD9
  1574                           status	equ	0xFD8
  1575                           
  1576 ;; *************** function ___ftmul *****************
  1577 ;; Defined at:
  1578 ;;		line 62 in file "/opt/microchip/xc8/v1.41/sources/common/ftmul.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;  f1              3   18[COMRAM] float 
  1581 ;;  f2              3   21[COMRAM] float 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  f3_as_produc    3   28[COMRAM] unsigned um
  1584 ;;  sign            1   32[COMRAM] unsigned char 
  1585 ;;  cntr            1   31[COMRAM] unsigned char 
  1586 ;;  exp             1   27[COMRAM] unsigned char 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  3   18[COMRAM] float 
  1589 ;; Registers used:
  1590 ;;		wreg, status,2, status,0, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1596 ;;      Params:         6       0       0       0       0       0       0
  1597 ;;      Locals:         6       0       0       0       0       0       0
  1598 ;;      Temps:          3       0       0       0       0       0       0
  1599 ;;      Totals:        15       0       0       0       0       0       0
  1600 ;;Total ram usage:       15 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    1
  1603 ;; This function calls:
  1604 ;;		___ftpack
  1605 ;; This function is called by:
  1606 ;;		_log
  1607 ;;		_eval_poly
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text9
  1612  000908                     __ptext9:
  1613                           	opt stack 0
  1614  000908                     ___ftmul:
  1615                           	opt stack 24
  1616                           
  1617                           ;incstack = 0
  1618  000908  C015  F019         	movff	___ftmul@f1+2,??___ftmul
  1619  00090C  6A1A               	clrf	(??___ftmul+1)& (0+255),c
  1620  00090E  6A1B               	clrf	(??___ftmul+2)& (0+255),c
  1621  000910  3414               	rlcf	___ftmul@f1+1,w,c
  1622  000912  3619               	rlcf	??___ftmul& (0+255),f,c
  1623  000914  E301               	bnc	u1461
  1624  000916  801A               	bsf	(??___ftmul+1)& (0+255),0,c
  1625  000918                     u1461:
  1626  000918  5019               	movf	??___ftmul,w,c
  1627  00091A  6E1C               	movwf	___ftmul@exp,c
  1628  00091C  501C               	movf	___ftmul@exp,w,c
  1629  00091E  A4D8               	btfss	status,2,c
  1630  000920  D007               	goto	l1976
  1631  000922  0E00               	movlw	0
  1632  000924  6E13               	movwf	?___ftmul,c
  1633  000926  0E00               	movlw	0
  1634  000928  6E14               	movwf	?___ftmul+1,c
  1635  00092A  0E00               	movlw	0
  1636  00092C  6E15               	movwf	?___ftmul+2,c
  1637  00092E  0012               	return	
  1638  000930                     l1976:
  1639  000930  C018  F019         	movff	___ftmul@f2+2,??___ftmul
  1640  000934  6A1A               	clrf	(??___ftmul+1)& (0+255),c
  1641  000936  6A1B               	clrf	(??___ftmul+2)& (0+255),c
  1642  000938  3417               	rlcf	___ftmul@f2+1,w,c
  1643  00093A  3619               	rlcf	??___ftmul& (0+255),f,c
  1644  00093C  E301               	bnc	u1481
  1645  00093E  801A               	bsf	(??___ftmul+1)& (0+255),0,c
  1646  000940                     u1481:
  1647  000940  5019               	movf	??___ftmul,w,c
  1648  000942  6E21               	movwf	___ftmul@sign,c
  1649  000944  5021               	movf	___ftmul@sign,w,c
  1650  000946  A4D8               	btfss	status,2,c
  1651  000948  D007               	goto	l1982
  1652  00094A  0E00               	movlw	0
  1653  00094C  6E13               	movwf	?___ftmul,c
  1654  00094E  0E00               	movlw	0
  1655  000950  6E14               	movwf	?___ftmul+1,c
  1656  000952  0E00               	movlw	0
  1657  000954  6E15               	movwf	?___ftmul+2,c
  1658  000956  0012               	return	
  1659  000958                     l1982:
  1660  000958  5021               	movf	___ftmul@sign,w,c
  1661  00095A  0F7B               	addlw	123
  1662  00095C  261C               	addwf	___ftmul@exp,f,c
  1663  00095E  C015  F021         	movff	___ftmul@f1+2,___ftmul@sign
  1664  000962  5018               	movf	___ftmul@f2+2,w,c
  1665  000964  1A21               	xorwf	___ftmul@sign,f,c
  1666  000966  0E80               	movlw	128
  1667  000968  1621               	andwf	___ftmul@sign,f,c
  1668  00096A  8E14               	bsf	___ftmul@f1+1,7,c
  1669  00096C  8E17               	bsf	___ftmul@f2+1,7,c
  1670  00096E  0EFF               	movlw	255
  1671  000970  1616               	andwf	___ftmul@f2,f,c
  1672  000972  0EFF               	movlw	255
  1673  000974  1617               	andwf	___ftmul@f2+1,f,c
  1674  000976  0E00               	movlw	0
  1675  000978  1618               	andwf	___ftmul@f2+2,f,c
  1676  00097A  0E00               	movlw	0
  1677  00097C  6E1D               	movwf	___ftmul@f3_as_product,c
  1678  00097E  0E00               	movlw	0
  1679  000980  6E1E               	movwf	___ftmul@f3_as_product+1,c
  1680  000982  0E00               	movlw	0
  1681  000984  6E1F               	movwf	___ftmul@f3_as_product+2,c
  1682  000986  0E07               	movlw	7
  1683  000988  6E20               	movwf	___ftmul@cntr,c
  1684  00098A                     l1996:
  1685  00098A  A013               	btfss	___ftmul@f1,0,c
  1686  00098C  D006               	goto	l2000
  1687  00098E  5016               	movf	___ftmul@f2,w,c
  1688  000990  261D               	addwf	___ftmul@f3_as_product,f,c
  1689  000992  5017               	movf	___ftmul@f2+1,w,c
  1690  000994  221E               	addwfc	___ftmul@f3_as_product+1,f,c
  1691  000996  5018               	movf	___ftmul@f2+2,w,c
  1692  000998  221F               	addwfc	___ftmul@f3_as_product+2,f,c
  1693  00099A                     l2000:
  1694  00099A  90D8               	bcf	status,0,c
  1695  00099C  3215               	rrcf	___ftmul@f1+2,f,c
  1696  00099E  3214               	rrcf	___ftmul@f1+1,f,c
  1697  0009A0  3213               	rrcf	___ftmul@f1,f,c
  1698  0009A2  90D8               	bcf	status,0,c
  1699  0009A4  3616               	rlcf	___ftmul@f2,f,c
  1700  0009A6  3617               	rlcf	___ftmul@f2+1,f,c
  1701  0009A8  3618               	rlcf	___ftmul@f2+2,f,c
  1702  0009AA  2E20               	decfsz	___ftmul@cntr,f,c
  1703  0009AC  D7EE               	goto	l1996
  1704  0009AE  0E09               	movlw	9
  1705  0009B0  6E20               	movwf	___ftmul@cntr,c
  1706  0009B2                     l2006:
  1707  0009B2  A013               	btfss	___ftmul@f1,0,c
  1708  0009B4  D006               	goto	l2010
  1709  0009B6  5016               	movf	___ftmul@f2,w,c
  1710  0009B8  261D               	addwf	___ftmul@f3_as_product,f,c
  1711  0009BA  5017               	movf	___ftmul@f2+1,w,c
  1712  0009BC  221E               	addwfc	___ftmul@f3_as_product+1,f,c
  1713  0009BE  5018               	movf	___ftmul@f2+2,w,c
  1714  0009C0  221F               	addwfc	___ftmul@f3_as_product+2,f,c
  1715  0009C2                     l2010:
  1716  0009C2  90D8               	bcf	status,0,c
  1717  0009C4  3215               	rrcf	___ftmul@f1+2,f,c
  1718  0009C6  3214               	rrcf	___ftmul@f1+1,f,c
  1719  0009C8  3213               	rrcf	___ftmul@f1,f,c
  1720  0009CA  90D8               	bcf	status,0,c
  1721  0009CC  321F               	rrcf	___ftmul@f3_as_product+2,f,c
  1722  0009CE  321E               	rrcf	___ftmul@f3_as_product+1,f,c
  1723  0009D0  321D               	rrcf	___ftmul@f3_as_product,f,c
  1724  0009D2  2E20               	decfsz	___ftmul@cntr,f,c
  1725  0009D4  D7EE               	goto	l2006
  1726  0009D6  C01D  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  1727  0009DA  C01E  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  1728  0009DE  C01F  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  1729  0009E2  C01C  F004         	movff	___ftmul@exp,___ftpack@exp
  1730  0009E6  C021  F005         	movff	___ftmul@sign,___ftpack@sign
  1731  0009EA  ECA4  F006         	call	___ftpack	;wreg free
  1732  0009EE  C001  F013         	movff	?___ftpack,?___ftmul
  1733  0009F2  C002  F014         	movff	?___ftpack+1,?___ftmul+1
  1734  0009F6  C003  F015         	movff	?___ftpack+2,?___ftmul+2
  1735  0009FA  0012               	return	
  1736  0009FC                     __end_of___ftmul:
  1737                           	opt stack 0
  1738                           tblptru	equ	0xFF8
  1739                           tblptrh	equ	0xFF7
  1740                           tblptrl	equ	0xFF6
  1741                           tablat	equ	0xFF5
  1742                           postinc2	equ	0xFDE
  1743                           postdec2	equ	0xFDD
  1744                           fsr2h	equ	0xFDA
  1745                           fsr2l	equ	0xFD9
  1746                           status	equ	0xFD8
  1747                           
  1748 ;; *************** function ___ftadd *****************
  1749 ;; Defined at:
  1750 ;;		line 86 in file "/opt/microchip/xc8/v1.41/sources/common/ftadd.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;  f1              3   33[COMRAM] float 
  1753 ;;  f2              3   36[COMRAM] float 
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;  exp1            1   44[COMRAM] unsigned char 
  1756 ;;  exp2            1   43[COMRAM] unsigned char 
  1757 ;;  sign            1   42[COMRAM] unsigned char 
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  3   33[COMRAM] float 
  1760 ;; Registers used:
  1761 ;;		wreg, status,2, status,0, cstack
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1767 ;;      Params:         6       0       0       0       0       0       0
  1768 ;;      Locals:         3       0       0       0       0       0       0
  1769 ;;      Temps:          3       0       0       0       0       0       0
  1770 ;;      Totals:        12       0       0       0       0       0       0
  1771 ;;Total ram usage:       12 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    1
  1774 ;; This function calls:
  1775 ;;		___ftpack
  1776 ;; This function is called by:
  1777 ;;		_log
  1778 ;;		_eval_poly
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           	psect	text10
  1783  00063E                     __ptext10:
  1784                           	opt stack 0
  1785  00063E                     ___ftadd:
  1786                           	opt stack 24
  1787                           
  1788                           ;incstack = 0
  1789  00063E  C024  F028         	movff	___ftadd@f1+2,??___ftadd
  1790  000642  6A29               	clrf	(??___ftadd+1)& (0+255),c
  1791  000644  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  1792  000646  3423               	rlcf	___ftadd@f1+1,w,c
  1793  000648  3628               	rlcf	??___ftadd& (0+255),f,c
  1794  00064A  E301               	bnc	u1251
  1795  00064C  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  1796  00064E                     u1251:
  1797  00064E  5028               	movf	??___ftadd,w,c
  1798  000650  6E2D               	movwf	___ftadd@exp1,c
  1799  000652  C027  F028         	movff	___ftadd@f2+2,??___ftadd
  1800  000656  6A29               	clrf	(??___ftadd+1)& (0+255),c
  1801  000658  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  1802  00065A  3426               	rlcf	___ftadd@f2+1,w,c
  1803  00065C  3628               	rlcf	??___ftadd& (0+255),f,c
  1804  00065E  E301               	bnc	u1261
  1805  000660  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  1806  000662                     u1261:
  1807  000662  5028               	movf	??___ftadd,w,c
  1808  000664  6E2C               	movwf	___ftadd@exp2,c
  1809  000666  502D               	movf	___ftadd@exp1,w,c
  1810  000668  B4D8               	btfsc	status,2,c
  1811  00066A  D00B               	goto	l600
  1812  00066C  502C               	movf	___ftadd@exp2,w,c
  1813  00066E  5C2D               	subwf	___ftadd@exp1,w,c
  1814  000670  B0D8               	btfsc	status,0,c
  1815  000672  D00E               	goto	l1908
  1816  000674  502D               	movf	___ftadd@exp1,w,c
  1817  000676  0800               	sublw	0
  1818  000678  242C               	addwf	___ftadd@exp2,w,c
  1819  00067A  6E28               	movwf	??___ftadd& (0+255),c
  1820  00067C  0E18               	movlw	24
  1821  00067E  6428               	cpfsgt	??___ftadd,c
  1822  000680  D007               	goto	l1908
  1823  000682                     l600:
  1824  000682  C025  F022         	movff	___ftadd@f2,?___ftadd
  1825  000686  C026  F023         	movff	___ftadd@f2+1,?___ftadd+1
  1826  00068A  C027  F024         	movff	___ftadd@f2+2,?___ftadd+2
  1827  00068E  0012               	return	
  1828  000690                     l1908:
  1829  000690  502C               	movf	___ftadd@exp2,w,c
  1830  000692  B4D8               	btfsc	status,2,c
  1831  000694  D00B               	goto	l604
  1832  000696  502D               	movf	___ftadd@exp1,w,c
  1833  000698  5C2C               	subwf	___ftadd@exp2,w,c
  1834  00069A  B0D8               	btfsc	status,0,c
  1835  00069C  D00E               	goto	l1914
  1836  00069E  502C               	movf	___ftadd@exp2,w,c
  1837  0006A0  0800               	sublw	0
  1838  0006A2  242D               	addwf	___ftadd@exp1,w,c
  1839  0006A4  6E28               	movwf	??___ftadd& (0+255),c
  1840  0006A6  0E18               	movlw	24
  1841  0006A8  6428               	cpfsgt	??___ftadd,c
  1842  0006AA  D007               	goto	l1914
  1843  0006AC                     l604:
  1844  0006AC  C022  F022         	movff	___ftadd@f1,?___ftadd
  1845  0006B0  C023  F023         	movff	___ftadd@f1+1,?___ftadd+1
  1846  0006B4  C024  F024         	movff	___ftadd@f1+2,?___ftadd+2
  1847  0006B8  0012               	return	
  1848  0006BA                     l1914:
  1849  0006BA  0E06               	movlw	6
  1850  0006BC  6E2B               	movwf	___ftadd@sign,c
  1851  0006BE  BE24               	btfsc	___ftadd@f1+2,7,c
  1852  0006C0  8E2B               	bsf	___ftadd@sign,7,c
  1853  0006C2  BE27               	btfsc	___ftadd@f2+2,7,c
  1854  0006C4  8C2B               	bsf	___ftadd@sign,6,c
  1855  0006C6  8E23               	bsf	___ftadd@f1+1,7,c
  1856  0006C8  0EFF               	movlw	255
  1857  0006CA  1622               	andwf	___ftadd@f1,f,c
  1858  0006CC  0EFF               	movlw	255
  1859  0006CE  1623               	andwf	___ftadd@f1+1,f,c
  1860  0006D0  0E00               	movlw	0
  1861  0006D2  1624               	andwf	___ftadd@f1+2,f,c
  1862  0006D4  8E26               	bsf	___ftadd@f2+1,7,c
  1863  0006D6  0EFF               	movlw	255
  1864  0006D8  1625               	andwf	___ftadd@f2,f,c
  1865  0006DA  0EFF               	movlw	255
  1866  0006DC  1626               	andwf	___ftadd@f2+1,f,c
  1867  0006DE  0E00               	movlw	0
  1868  0006E0  1627               	andwf	___ftadd@f2+2,f,c
  1869  0006E2  502C               	movf	___ftadd@exp2,w,c
  1870  0006E4  5C2D               	subwf	___ftadd@exp1,w,c
  1871  0006E6  B0D8               	btfsc	status,0,c
  1872  0006E8  D01B               	goto	l1940
  1873  0006EA                     l1930:
  1874  0006EA  90D8               	bcf	status,0,c
  1875  0006EC  3625               	rlcf	___ftadd@f2,f,c
  1876  0006EE  3626               	rlcf	___ftadd@f2+1,f,c
  1877  0006F0  3627               	rlcf	___ftadd@f2+2,f,c
  1878  0006F2  062C               	decf	___ftadd@exp2,f,c
  1879  0006F4  502D               	movf	___ftadd@exp1,w,c
  1880  0006F6  182C               	xorwf	___ftadd@exp2,w,c
  1881  0006F8  B4D8               	btfsc	status,2,c
  1882  0006FA  D00D               	goto	l1938
  1883  0006FC  062B               	decf	___ftadd@sign,f,c
  1884  0006FE  C02B  F028         	movff	___ftadd@sign,??___ftadd
  1885  000702  0E07               	movlw	7
  1886  000704  1628               	andwf	??___ftadd,f,c
  1887  000706  B4D8               	btfsc	status,2,c
  1888  000708  D006               	goto	l1938
  1889  00070A  D7EF               	goto	l1930
  1890  00070C                     l1936:
  1891  00070C  90D8               	bcf	status,0,c
  1892  00070E  3224               	rrcf	___ftadd@f1+2,f,c
  1893  000710  3223               	rrcf	___ftadd@f1+1,f,c
  1894  000712  3222               	rrcf	___ftadd@f1,f,c
  1895  000714  2A2D               	incf	___ftadd@exp1,f,c
  1896  000716                     l1938:
  1897  000716  502C               	movf	___ftadd@exp2,w,c
  1898  000718  182D               	xorwf	___ftadd@exp1,w,c
  1899  00071A  B4D8               	btfsc	status,2,c
  1900  00071C  D01F               	goto	l615
  1901  00071E  D7F6               	goto	l1936
  1902  000720                     l1940:
  1903  000720  502D               	movf	___ftadd@exp1,w,c
  1904  000722  5C2C               	subwf	___ftadd@exp2,w,c
  1905  000724  B0D8               	btfsc	status,0,c
  1906  000726  D01A               	goto	l615
  1907  000728                     l1942:
  1908  000728  90D8               	bcf	status,0,c
  1909  00072A  3622               	rlcf	___ftadd@f1,f,c
  1910  00072C  3623               	rlcf	___ftadd@f1+1,f,c
  1911  00072E  3624               	rlcf	___ftadd@f1+2,f,c
  1912  000730  062D               	decf	___ftadd@exp1,f,c
  1913  000732  502D               	movf	___ftadd@exp1,w,c
  1914  000734  182C               	xorwf	___ftadd@exp2,w,c
  1915  000736  B4D8               	btfsc	status,2,c
  1916  000738  D00D               	goto	l1950
  1917  00073A  062B               	decf	___ftadd@sign,f,c
  1918  00073C  C02B  F028         	movff	___ftadd@sign,??___ftadd
  1919  000740  0E07               	movlw	7
  1920  000742  1628               	andwf	??___ftadd,f,c
  1921  000744  B4D8               	btfsc	status,2,c
  1922  000746  D006               	goto	l1950
  1923  000748  D7EF               	goto	l1942
  1924  00074A                     l1948:
  1925  00074A  90D8               	bcf	status,0,c
  1926  00074C  3227               	rrcf	___ftadd@f2+2,f,c
  1927  00074E  3226               	rrcf	___ftadd@f2+1,f,c
  1928  000750  3225               	rrcf	___ftadd@f2,f,c
  1929  000752  2A2C               	incf	___ftadd@exp2,f,c
  1930  000754                     l1950:
  1931  000754  502C               	movf	___ftadd@exp2,w,c
  1932  000756  182D               	xorwf	___ftadd@exp1,w,c
  1933  000758  A4D8               	btfss	status,2,c
  1934  00075A  D7F7               	goto	l1948
  1935  00075C                     l615:
  1936  00075C  AE2B               	btfss	___ftadd@sign,7,c
  1937  00075E  D00C               	goto	l624
  1938  000760  0EFF               	movlw	255
  1939  000762  1A22               	xorwf	___ftadd@f1,f,c
  1940  000764  0EFF               	movlw	255
  1941  000766  1A23               	xorwf	___ftadd@f1+1,f,c
  1942  000768  0EFF               	movlw	255
  1943  00076A  1A24               	xorwf	___ftadd@f1+2,f,c
  1944  00076C  0E01               	movlw	1
  1945  00076E  2622               	addwf	___ftadd@f1,f,c
  1946  000770  0E00               	movlw	0
  1947  000772  2223               	addwfc	___ftadd@f1+1,f,c
  1948  000774  0E00               	movlw	0
  1949  000776  2224               	addwfc	___ftadd@f1+2,f,c
  1950  000778                     l624:
  1951  000778  AC2B               	btfss	___ftadd@sign,6,c
  1952  00077A  D00C               	goto	l1956
  1953  00077C  0EFF               	movlw	255
  1954  00077E  1A25               	xorwf	___ftadd@f2,f,c
  1955  000780  0EFF               	movlw	255
  1956  000782  1A26               	xorwf	___ftadd@f2+1,f,c
  1957  000784  0EFF               	movlw	255
  1958  000786  1A27               	xorwf	___ftadd@f2+2,f,c
  1959  000788  0E01               	movlw	1
  1960  00078A  2625               	addwf	___ftadd@f2,f,c
  1961  00078C  0E00               	movlw	0
  1962  00078E  2226               	addwfc	___ftadd@f2+1,f,c
  1963  000790  0E00               	movlw	0
  1964  000792  2227               	addwfc	___ftadd@f2+2,f,c
  1965  000794                     l1956:
  1966  000794  0E00               	movlw	0
  1967  000796  6E2B               	movwf	___ftadd@sign,c
  1968  000798  5022               	movf	___ftadd@f1,w,c
  1969  00079A  2625               	addwf	___ftadd@f2,f,c
  1970  00079C  5023               	movf	___ftadd@f1+1,w,c
  1971  00079E  2226               	addwfc	___ftadd@f2+1,f,c
  1972  0007A0  5024               	movf	___ftadd@f1+2,w,c
  1973  0007A2  2227               	addwfc	___ftadd@f2+2,f,c
  1974  0007A4  AE27               	btfss	___ftadd@f2+2,7,c
  1975  0007A6  D00E               	goto	l1966
  1976  0007A8  0EFF               	movlw	255
  1977  0007AA  1A25               	xorwf	___ftadd@f2,f,c
  1978  0007AC  0EFF               	movlw	255
  1979  0007AE  1A26               	xorwf	___ftadd@f2+1,f,c
  1980  0007B0  0EFF               	movlw	255
  1981  0007B2  1A27               	xorwf	___ftadd@f2+2,f,c
  1982  0007B4  0E01               	movlw	1
  1983  0007B6  2625               	addwf	___ftadd@f2,f,c
  1984  0007B8  0E00               	movlw	0
  1985  0007BA  2226               	addwfc	___ftadd@f2+1,f,c
  1986  0007BC  0E00               	movlw	0
  1987  0007BE  2227               	addwfc	___ftadd@f2+2,f,c
  1988  0007C0  0E01               	movlw	1
  1989  0007C2  6E2B               	movwf	___ftadd@sign,c
  1990  0007C4                     l1966:
  1991  0007C4  C025  F001         	movff	___ftadd@f2,___ftpack@arg
  1992  0007C8  C026  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  1993  0007CC  C027  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  1994  0007D0  C02D  F004         	movff	___ftadd@exp1,___ftpack@exp
  1995  0007D4  C02B  F005         	movff	___ftadd@sign,___ftpack@sign
  1996  0007D8  ECA4  F006         	call	___ftpack	;wreg free
  1997  0007DC  C001  F022         	movff	?___ftpack,?___ftadd
  1998  0007E0  C002  F023         	movff	?___ftpack+1,?___ftadd+1
  1999  0007E4  C003  F024         	movff	?___ftpack+2,?___ftadd+2
  2000  0007E8  0012               	return	
  2001  0007EA                     __end_of___ftadd:
  2002                           	opt stack 0
  2003                           tblptru	equ	0xFF8
  2004                           tblptrh	equ	0xFF7
  2005                           tblptrl	equ	0xFF6
  2006                           tablat	equ	0xFF5
  2007                           postinc2	equ	0xFDE
  2008                           postdec2	equ	0xFDD
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function ___awtoft *****************
  2014 ;; Defined at:
  2015 ;;		line 32 in file "/opt/microchip/xc8/v1.41/sources/common/awtoft.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  c               2   14[COMRAM] int 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  sign            1   17[COMRAM] unsigned char 
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  3   14[COMRAM] float 
  2022 ;; Registers used:
  2023 ;;		wreg, status,2, status,0, cstack
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2029 ;;      Params:         3       0       0       0       0       0       0
  2030 ;;      Locals:         1       0       0       0       0       0       0
  2031 ;;      Temps:          0       0       0       0       0       0       0
  2032 ;;      Totals:         4       0       0       0       0       0       0
  2033 ;;Total ram usage:        4 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; Hardware stack levels required when called:    1
  2036 ;; This function calls:
  2037 ;;		___ftpack
  2038 ;; This function is called by:
  2039 ;;		_get_temp
  2040 ;;		_log
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text11
  2045  0011FC                     __ptext11:
  2046                           	opt stack 0
  2047  0011FC                     ___awtoft:
  2048                           	opt stack 25
  2049                           
  2050                           ;incstack = 0
  2051  0011FC  0E00               	movlw	0
  2052  0011FE  6E12               	movwf	___awtoft@sign,c
  2053  001200  AE10               	btfss	___awtoft@c+1,7,c
  2054  001202  D006               	goto	l2036
  2055  001204  6C0F               	negf	___awtoft@c,c
  2056  001206  1E10               	comf	___awtoft@c+1,f,c
  2057  001208  B0D8               	btfsc	status,0,c
  2058  00120A  2A10               	incf	___awtoft@c+1,f,c
  2059  00120C  0E01               	movlw	1
  2060  00120E  6E12               	movwf	___awtoft@sign,c
  2061  001210                     l2036:
  2062  001210  C00F  F001         	movff	___awtoft@c,___ftpack@arg
  2063  001214  C010  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2064  001218  6A03               	clrf	___ftpack@arg+2,c
  2065  00121A  0E8E               	movlw	142
  2066  00121C  6E04               	movwf	___ftpack@exp,c
  2067  00121E  C012  F005         	movff	___awtoft@sign,___ftpack@sign
  2068  001222  ECA4  F006         	call	___ftpack	;wreg free
  2069  001226  C001  F00F         	movff	?___ftpack,?___awtoft
  2070  00122A  C002  F010         	movff	?___ftpack+1,?___awtoft+1
  2071  00122E  C003  F011         	movff	?___ftpack+2,?___awtoft+2
  2072  001232  0012               	return	
  2073  001234                     __end_of___awtoft:
  2074                           	opt stack 0
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           postinc2	equ	0xFDE
  2080                           postdec2	equ	0xFDD
  2081                           fsr2h	equ	0xFDA
  2082                           fsr2l	equ	0xFD9
  2083                           status	equ	0xFD8
  2084                           
  2085 ;; *************** function ___ftpack *****************
  2086 ;; Defined at:
  2087 ;;		line 62 in file "/opt/microchip/xc8/v1.41/sources/common/float.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  arg             3    0[COMRAM] unsigned um
  2090 ;;  exp             1    3[COMRAM] unsigned char 
  2091 ;;  sign            1    4[COMRAM] unsigned char 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  3    0[COMRAM] float 
  2096 ;; Registers used:
  2097 ;;		wreg, status,2, status,0
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2103 ;;      Params:         5       0       0       0       0       0       0
  2104 ;;      Locals:         0       0       0       0       0       0       0
  2105 ;;      Temps:          3       0       0       0       0       0       0
  2106 ;;      Totals:         8       0       0       0       0       0       0
  2107 ;;Total ram usage:        8 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		___awtoft
  2113 ;;		___ftadd
  2114 ;;		___ftmul
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           	psect	text12
  2119  000D48                     __ptext12:
  2120                           	opt stack 0
  2121  000D48                     ___ftpack:
  2122                           	opt stack 24
  2123                           
  2124                           ;incstack = 0
  2125  000D48  5004               	movf	___ftpack@exp,w,c
  2126  000D4A  B4D8               	btfsc	status,2,c
  2127  000D4C  D005               	goto	l1856
  2128  000D4E  5001               	movf	___ftpack@arg,w,c
  2129  000D50  1002               	iorwf	___ftpack@arg+1,w,c
  2130  000D52  1003               	iorwf	___ftpack@arg+2,w,c
  2131  000D54  A4D8               	btfss	status,2,c
  2132  000D56  D00C               	goto	l1862
  2133  000D58                     l1856:
  2134  000D58  0E00               	movlw	0
  2135  000D5A  6E01               	movwf	?___ftpack,c
  2136  000D5C  0E00               	movlw	0
  2137  000D5E  6E02               	movwf	?___ftpack+1,c
  2138  000D60  0E00               	movlw	0
  2139  000D62  6E03               	movwf	?___ftpack+2,c
  2140  000D64  0012               	return	
  2141  000D66                     l1860:
  2142  000D66  2A04               	incf	___ftpack@exp,f,c
  2143  000D68  90D8               	bcf	status,0,c
  2144  000D6A  3203               	rrcf	___ftpack@arg+2,f,c
  2145  000D6C  3202               	rrcf	___ftpack@arg+1,f,c
  2146  000D6E  3201               	rrcf	___ftpack@arg,f,c
  2147  000D70                     l1862:
  2148  000D70  0E00               	movlw	0
  2149  000D72  1401               	andwf	___ftpack@arg,w,c
  2150  000D74  6E06               	movwf	??___ftpack& (0+255),c
  2151  000D76  0E00               	movlw	0
  2152  000D78  1402               	andwf	___ftpack@arg+1,w,c
  2153  000D7A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2154  000D7C  0EFE               	movlw	254
  2155  000D7E  1403               	andwf	___ftpack@arg+2,w,c
  2156  000D80  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2157  000D82  5006               	movf	??___ftpack,w,c
  2158  000D84  1007               	iorwf	??___ftpack+1,w,c
  2159  000D86  1008               	iorwf	??___ftpack+2,w,c
  2160  000D88  B4D8               	btfsc	status,2,c
  2161  000D8A  D00C               	goto	l1868
  2162  000D8C  D7EC               	goto	l1860
  2163  000D8E                     l1864:
  2164  000D8E  2A04               	incf	___ftpack@exp,f,c
  2165  000D90  0E01               	movlw	1
  2166  000D92  2601               	addwf	___ftpack@arg,f,c
  2167  000D94  0E00               	movlw	0
  2168  000D96  2202               	addwfc	___ftpack@arg+1,f,c
  2169  000D98  0E00               	movlw	0
  2170  000D9A  2203               	addwfc	___ftpack@arg+2,f,c
  2171  000D9C  90D8               	bcf	status,0,c
  2172  000D9E  3203               	rrcf	___ftpack@arg+2,f,c
  2173  000DA0  3202               	rrcf	___ftpack@arg+1,f,c
  2174  000DA2  3201               	rrcf	___ftpack@arg,f,c
  2175  000DA4                     l1868:
  2176  000DA4  0E00               	movlw	0
  2177  000DA6  1401               	andwf	___ftpack@arg,w,c
  2178  000DA8  6E06               	movwf	??___ftpack& (0+255),c
  2179  000DAA  0E00               	movlw	0
  2180  000DAC  1402               	andwf	___ftpack@arg+1,w,c
  2181  000DAE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2182  000DB0  0EFF               	movlw	255
  2183  000DB2  1403               	andwf	___ftpack@arg+2,w,c
  2184  000DB4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2185  000DB6  5006               	movf	??___ftpack,w,c
  2186  000DB8  1007               	iorwf	??___ftpack+1,w,c
  2187  000DBA  1008               	iorwf	??___ftpack+2,w,c
  2188  000DBC  B4D8               	btfsc	status,2,c
  2189  000DBE  D006               	goto	l1872
  2190  000DC0  D7E6               	goto	l1864
  2191  000DC2                     l1870:
  2192  000DC2  0604               	decf	___ftpack@exp,f,c
  2193  000DC4  90D8               	bcf	status,0,c
  2194  000DC6  3601               	rlcf	___ftpack@arg,f,c
  2195  000DC8  3602               	rlcf	___ftpack@arg+1,f,c
  2196  000DCA  3603               	rlcf	___ftpack@arg+2,f,c
  2197  000DCC                     l1872:
  2198  000DCC  BE02               	btfsc	___ftpack@arg+1,7,c
  2199  000DCE  D003               	goto	l577
  2200  000DD0  0E02               	movlw	2
  2201  000DD2  6004               	cpfslt	___ftpack@exp,c
  2202  000DD4  D7F6               	goto	l1870
  2203  000DD6                     l577:
  2204  000DD6  A004               	btfss	___ftpack@exp,0,c
  2205  000DD8  9E02               	bcf	___ftpack@arg+1,7,c
  2206  000DDA  90D8               	bcf	status,0,c
  2207  000DDC  3204               	rrcf	___ftpack@exp,f,c
  2208  000DDE  5004               	movf	___ftpack@exp,w,c
  2209  000DE0  1203               	iorwf	___ftpack@arg+2,f,c
  2210  000DE2  5005               	movf	___ftpack@sign,w,c
  2211  000DE4  A4D8               	btfss	status,2,c
  2212  000DE6  8E03               	bsf	___ftpack@arg+2,7,c
  2213  000DE8  C001  F001         	movff	___ftpack@arg,?___ftpack
  2214  000DEC  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  2215  000DF0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  2216  000DF4  0012               	return	
  2217  000DF6                     __end_of___ftpack:
  2218                           	opt stack 0
  2219                           tblptru	equ	0xFF8
  2220                           tblptrh	equ	0xFF7
  2221                           tblptrl	equ	0xFF6
  2222                           tablat	equ	0xFF5
  2223                           postinc2	equ	0xFDE
  2224                           postdec2	equ	0xFDD
  2225                           fsr2h	equ	0xFDA
  2226                           fsr2l	equ	0xFD9
  2227                           status	equ	0xFD8
  2228                           
  2229 ;; *************** function ___fttol *****************
  2230 ;; Defined at:
  2231 ;;		line 44 in file "/opt/microchip/xc8/v1.41/sources/common/fttol.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;  f1              3   62[COMRAM] float 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  lval            4   72[COMRAM] unsigned long 
  2236 ;;  exp1            1   76[COMRAM] unsigned char 
  2237 ;;  sign1           1   71[COMRAM] unsigned char 
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  4   62[COMRAM] long 
  2240 ;; Registers used:
  2241 ;;		wreg, status,2, status,0
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2247 ;;      Params:         4       0       0       0       0       0       0
  2248 ;;      Locals:         6       0       0       0       0       0       0
  2249 ;;      Temps:          5       0       0       0       0       0       0
  2250 ;;      Totals:        15       0       0       0       0       0       0
  2251 ;;Total ram usage:       15 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_get_temp
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text13
  2261  0009FC                     __ptext13:
  2262                           	opt stack 0
  2263  0009FC                     ___fttol:
  2264                           	opt stack 27
  2265                           
  2266                           ;incstack = 0
  2267  0009FC  C041  F043         	movff	___fttol@f1+2,??___fttol
  2268  000A00  6A44               	clrf	(??___fttol+1)& (0+255),c
  2269  000A02  6A45               	clrf	(??___fttol+2)& (0+255),c
  2270  000A04  3440               	rlcf	___fttol@f1+1,w,c
  2271  000A06  3643               	rlcf	??___fttol& (0+255),f,c
  2272  000A08  E301               	bnc	u1711
  2273  000A0A  8044               	bsf	(??___fttol+1)& (0+255),0,c
  2274  000A0C                     u1711:
  2275  000A0C  5043               	movf	??___fttol,w,c
  2276  000A0E  6E4D               	movwf	___fttol@exp1,c
  2277  000A10  504D               	movf	___fttol@exp1,w,c
  2278  000A12  A4D8               	btfss	status,2,c
  2279  000A14  D009               	goto	l2180
  2280  000A16  0E00               	movlw	0
  2281  000A18  6E3F               	movwf	?___fttol,c
  2282  000A1A  0E00               	movlw	0
  2283  000A1C  6E40               	movwf	?___fttol+1,c
  2284  000A1E  0E00               	movlw	0
  2285  000A20  6E41               	movwf	?___fttol+2,c
  2286  000A22  0E00               	movlw	0
  2287  000A24  6E42               	movwf	?___fttol+3,c
  2288  000A26  0012               	return	
  2289  000A28                     l2180:
  2290  000A28  0E17               	movlw	23
  2291  000A2A  6E43               	movwf	??___fttol& (0+255),c
  2292  000A2C  C03F  F044         	movff	___fttol@f1,??___fttol+1
  2293  000A30  C040  F045         	movff	___fttol@f1+1,??___fttol+2
  2294  000A34  C041  F046         	movff	___fttol@f1+2,??___fttol+3
  2295  000A38  2843               	incf	??___fttol,w,c
  2296  000A3A  6E47               	movwf	(??___fttol+4)& (0+255),c
  2297  000A3C  D004               	goto	u1730
  2298  000A3E                     u1735:
  2299  000A3E  90D8               	bcf	status,0,c
  2300  000A40  3246               	rrcf	??___fttol+3,f,c
  2301  000A42  3245               	rrcf	??___fttol+2,f,c
  2302  000A44  3244               	rrcf	??___fttol+1,f,c
  2303  000A46                     u1730:
  2304  000A46  2E47               	decfsz	(??___fttol+4)& (0+255),f,c
  2305  000A48  D7FA               	goto	u1735
  2306  000A4A  5044               	movf	??___fttol+1,w,c
  2307  000A4C  6E48               	movwf	___fttol@sign1,c
  2308  000A4E  8E40               	bsf	___fttol@f1+1,7,c
  2309  000A50  0EFF               	movlw	255
  2310  000A52  163F               	andwf	___fttol@f1,f,c
  2311  000A54  0EFF               	movlw	255
  2312  000A56  1640               	andwf	___fttol@f1+1,f,c
  2313  000A58  0E00               	movlw	0
  2314  000A5A  1641               	andwf	___fttol@f1+2,f,c
  2315  000A5C  503F               	movf	___fttol@f1,w,c
  2316  000A5E  6E49               	movwf	___fttol@lval,c
  2317  000A60  5040               	movf	___fttol@f1+1,w,c
  2318  000A62  6E4A               	movwf	___fttol@lval+1,c
  2319  000A64  5041               	movf	___fttol@f1+2,w,c
  2320  000A66  6E4B               	movwf	___fttol@lval+2,c
  2321  000A68  6A4C               	clrf	___fttol@lval+3,c
  2322  000A6A  0E8E               	movlw	142
  2323  000A6C  5E4D               	subwf	___fttol@exp1,f,c
  2324  000A6E  AE4D               	btfss	___fttol@exp1,7,c
  2325  000A70  D016               	goto	l2202
  2326  000A72  504D               	movf	___fttol@exp1,w,c
  2327  000A74  0A80               	xorlw	128
  2328  000A76  0F8F               	addlw	143
  2329  000A78  B0D8               	btfsc	status,0,c
  2330  000A7A  D009               	goto	l2198
  2331  000A7C  0E00               	movlw	0
  2332  000A7E  6E3F               	movwf	?___fttol,c
  2333  000A80  0E00               	movlw	0
  2334  000A82  6E40               	movwf	?___fttol+1,c
  2335  000A84  0E00               	movlw	0
  2336  000A86  6E41               	movwf	?___fttol+2,c
  2337  000A88  0E00               	movlw	0
  2338  000A8A  6E42               	movwf	?___fttol+3,c
  2339  000A8C  0012               	return	
  2340  000A8E                     l2198:
  2341  000A8E  90D8               	bcf	status,0,c
  2342  000A90  324C               	rrcf	___fttol@lval+3,f,c
  2343  000A92  324B               	rrcf	___fttol@lval+2,f,c
  2344  000A94  324A               	rrcf	___fttol@lval+1,f,c
  2345  000A96  3249               	rrcf	___fttol@lval,f,c
  2346  000A98  3E4D               	incfsz	___fttol@exp1,f,c
  2347  000A9A  D7F9               	goto	l2198
  2348  000A9C  D015               	goto	l2212
  2349  000A9E                     l2202:
  2350  000A9E  0E17               	movlw	23
  2351  000AA0  644D               	cpfsgt	___fttol@exp1,c
  2352  000AA2  D00F               	goto	l2210
  2353  000AA4  0E00               	movlw	0
  2354  000AA6  6E3F               	movwf	?___fttol,c
  2355  000AA8  0E00               	movlw	0
  2356  000AAA  6E40               	movwf	?___fttol+1,c
  2357  000AAC  0E00               	movlw	0
  2358  000AAE  6E41               	movwf	?___fttol+2,c
  2359  000AB0  0E00               	movlw	0
  2360  000AB2  6E42               	movwf	?___fttol+3,c
  2361  000AB4  0012               	return	
  2362  000AB6                     l2208:
  2363  000AB6  90D8               	bcf	status,0,c
  2364  000AB8  3649               	rlcf	___fttol@lval,f,c
  2365  000ABA  364A               	rlcf	___fttol@lval+1,f,c
  2366  000ABC  364B               	rlcf	___fttol@lval+2,f,c
  2367  000ABE  364C               	rlcf	___fttol@lval+3,f,c
  2368  000AC0  064D               	decf	___fttol@exp1,f,c
  2369  000AC2                     l2210:
  2370  000AC2  504D               	movf	___fttol@exp1,w,c
  2371  000AC4  A4D8               	btfss	status,2,c
  2372  000AC6  D7F7               	goto	l2208
  2373  000AC8                     l2212:
  2374  000AC8  5048               	movf	___fttol@sign1,w,c
  2375  000ACA  B4D8               	btfsc	status,2,c
  2376  000ACC  D008               	goto	l2216
  2377  000ACE  1E4C               	comf	___fttol@lval+3,f,c
  2378  000AD0  1E4B               	comf	___fttol@lval+2,f,c
  2379  000AD2  1E4A               	comf	___fttol@lval+1,f,c
  2380  000AD4  6C49               	negf	___fttol@lval,c
  2381  000AD6  0E00               	movlw	0
  2382  000AD8  224A               	addwfc	___fttol@lval+1,f,c
  2383  000ADA  224B               	addwfc	___fttol@lval+2,f,c
  2384  000ADC  224C               	addwfc	___fttol@lval+3,f,c
  2385  000ADE                     l2216:
  2386  000ADE  C049  F03F         	movff	___fttol@lval,?___fttol
  2387  000AE2  C04A  F040         	movff	___fttol@lval+1,?___fttol+1
  2388  000AE6  C04B  F041         	movff	___fttol@lval+2,?___fttol+2
  2389  000AEA  C04C  F042         	movff	___fttol@lval+3,?___fttol+3
  2390  000AEE  0012               	return	
  2391  000AF0                     __end_of___fttol:
  2392                           	opt stack 0
  2393                           tblptru	equ	0xFF8
  2394                           tblptrh	equ	0xFF7
  2395                           tblptrl	equ	0xFF6
  2396                           tablat	equ	0xFF5
  2397                           postinc2	equ	0xFDE
  2398                           postdec2	equ	0xFDD
  2399                           fsr2h	equ	0xFDA
  2400                           fsr2l	equ	0xFD9
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _display_speed *****************
  2404 ;; Defined at:
  2405 ;;		line 246 in file "hmi.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;		None
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;		None
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      void 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2419 ;;      Params:         0       0       0       0       0       0       0
  2420 ;;      Locals:         0       0       0       0       0       0       0
  2421 ;;      Temps:          0       0       0       0       0       0       0
  2422 ;;      Totals:         0       0       0       0       0       0       0
  2423 ;;Total ram usage:        0 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; Hardware stack levels required when called:    5
  2426 ;; This function calls:
  2427 ;;		_integerToLcd
  2428 ;; This function is called by:
  2429 ;;		_hmi_out
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	text14
  2434  001370                     __ptext14:
  2435                           	opt stack 0
  2436  001370                     _display_speed:
  2437                           	opt stack 24
  2438                           
  2439                           ;hmi.c: 248: integerToLcd(speed);
  2440                           
  2441                           ;incstack = 0
  2442  001370  C05D  F015         	movff	_speed,integerToLcd@num
  2443  001374  C05E  F016         	movff	_speed+1,integerToLcd@num+1
  2444  001378  EC4A  F006         	call	_integerToLcd	;wreg free
  2445  00137C  0012               	return		;funcret
  2446  00137E                     __end_of_display_speed:
  2447                           	opt stack 0
  2448                           tblptru	equ	0xFF8
  2449                           tblptrh	equ	0xFF7
  2450                           tblptrl	equ	0xFF6
  2451                           tablat	equ	0xFF5
  2452                           postinc2	equ	0xFDE
  2453                           postdec2	equ	0xFDD
  2454                           fsr2h	equ	0xFDA
  2455                           fsr2l	equ	0xFD9
  2456                           status	equ	0xFD8
  2457                           
  2458 ;; *************** function _display_mode *****************
  2459 ;; Defined at:
  2460 ;;		line 225 in file "hmi.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;		None
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;		None
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      void 
  2467 ;; Registers used:
  2468 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2474 ;;      Params:         0       0       0       0       0       0       0
  2475 ;;      Locals:         0       0       0       0       0       0       0
  2476 ;;      Temps:          0       0       0       0       0       0       0
  2477 ;;      Totals:         0       0       0       0       0       0       0
  2478 ;;Total ram usage:        0 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    5
  2481 ;; This function calls:
  2482 ;;		_WriteLCD
  2483 ;; This function is called by:
  2484 ;;		_hmi_out
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text15
  2489  0012A2                     __ptext15:
  2490                           	opt stack 0
  2491  0012A2                     _display_mode:
  2492                           	opt stack 24
  2493                           
  2494                           ;hmi.c: 227: if(mode == 0)
  2495                           
  2496                           ;incstack = 0
  2497  0012A2  0100               	movlb	0	; () banked
  2498  0012A4  5162               	movf	_mode& (0+255),w,b
  2499  0012A6  0100               	movlb	0	; () banked
  2500  0012A8  1163               	iorwf	(_mode+1)& (0+255),w,b
  2501  0012AA  A4D8               	btfss	status,2,c
  2502  0012AC  D007               	goto	l2316
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;hmi.c: 228: WriteLCD("Auto");
  2506  0012AE  0E37               	movlw	low STR_4
  2507  0012B0  6E07               	movwf	WriteLCD@message,c
  2508  0012B2  0E06               	movlw	high STR_4
  2509  0012B4  6E08               	movwf	WriteLCD@message+1,c
  2510  0012B6  EC08  F008         	call	_WriteLCD	;wreg free
  2511  0012BA  0012               	return	
  2512  0012BC                     l2316:
  2513                           
  2514                           ;hmi.c: 229: else
  2515                           ;hmi.c: 230: WriteLCD("Manual");
  2516  0012BC  0E26               	movlw	low STR_5
  2517  0012BE  6E07               	movwf	WriteLCD@message,c
  2518  0012C0  0E06               	movlw	high STR_5
  2519  0012C2  6E08               	movwf	WriteLCD@message+1,c
  2520  0012C4  EC08  F008         	call	_WriteLCD	;wreg free
  2521  0012C8  0012               	return	
  2522  0012CA                     __end_of_display_mode:
  2523                           	opt stack 0
  2524                           tblptru	equ	0xFF8
  2525                           tblptrh	equ	0xFF7
  2526                           tblptrl	equ	0xFF6
  2527                           tablat	equ	0xFF5
  2528                           postinc2	equ	0xFDE
  2529                           postdec2	equ	0xFDD
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function _adcToLcd *****************
  2535 ;; Defined at:
  2536 ;;		line 176 in file "hmi.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;  result          2   26[COMRAM] int 
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      void 
  2543 ;; Registers used:
  2544 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2550 ;;      Params:         0       0       0       0       0       0       0
  2551 ;;      Locals:         2       0       0       0       0       0       0
  2552 ;;      Temps:          0       0       0       0       0       0       0
  2553 ;;      Totals:         2       0       0       0       0       0       0
  2554 ;;Total ram usage:        2 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    5
  2557 ;; This function calls:
  2558 ;;		_WriteLCD
  2559 ;;		_adc_poll
  2560 ;;		_clear_lcd
  2561 ;;		_delay
  2562 ;;		_integerToLcd
  2563 ;; This function is called by:
  2564 ;;		_main
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           	psect	text16
  2569  001234                     __ptext16:
  2570                           	opt stack 0
  2571  001234                     _adcToLcd:
  2572                           	opt stack 25
  2573                           
  2574                           ;hmi.c: 178: clear_lcd();
  2575                           
  2576                           ;incstack = 0
  2577  001234  ECC8  F009         	call	_clear_lcd	;wreg free
  2578                           
  2579                           ;hmi.c: 179: delay(5);
  2580  001238  0E00               	movlw	0
  2581  00123A  6E02               	movwf	delay@x+1,c
  2582  00123C  0E05               	movlw	5
  2583  00123E  6E01               	movwf	delay@x,c
  2584  001240  EC36  F009         	call	_delay	;wreg free
  2585                           
  2586                           ;hmi.c: 180: ADCON0 = 0b00001011;
  2587  001244  0E0B               	movlw	11
  2588  001246  6EC2               	movwf	4034,c	;volatile
  2589                           
  2590                           ;hmi.c: 181: adc_poll();
  2591  001248  ECCC  F009         	call	_adc_poll	;wreg free
  2592                           
  2593                           ;hmi.c: 182: int result = ADRESH;
  2594  00124C  CFC4 F01B          	movff	4036,adcToLcd@result	;volatile
  2595  001250  6A1C               	clrf	adcToLcd@result+1,c
  2596                           
  2597                           ;hmi.c: 183: WriteLCD("ADC:");
  2598  001252  0E2D               	movlw	low STR_2
  2599  001254  6E07               	movwf	WriteLCD@message,c
  2600  001256  0E06               	movlw	high STR_2
  2601  001258  6E08               	movwf	WriteLCD@message+1,c
  2602  00125A  EC08  F008         	call	_WriteLCD	;wreg free
  2603                           
  2604                           ;hmi.c: 184: integerToLcd(result);
  2605  00125E  C01B  F015         	movff	adcToLcd@result,integerToLcd@num
  2606  001262  C01C  F016         	movff	adcToLcd@result+1,integerToLcd@num+1
  2607  001266  EC4A  F006         	call	_integerToLcd	;wreg free
  2608  00126A  0012               	return		;funcret
  2609  00126C                     __end_of_adcToLcd:
  2610                           	opt stack 0
  2611                           tblptru	equ	0xFF8
  2612                           tblptrh	equ	0xFF7
  2613                           tblptrl	equ	0xFF6
  2614                           tablat	equ	0xFF5
  2615                           postinc2	equ	0xFDE
  2616                           postdec2	equ	0xFDD
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function _integerToLcd *****************
  2622 ;; Defined at:
  2623 ;;		line 146 in file "lcd.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;  num             2   20[COMRAM] int 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;  ones            1   25[COMRAM] unsigned char 
  2628 ;;  tens            1   24[COMRAM] unsigned char 
  2629 ;;  hundreds        1   23[COMRAM] unsigned char 
  2630 ;;  thousands       1   22[COMRAM] unsigned char 
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      void 
  2633 ;; Registers used:
  2634 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2635 ;; Tracked objects:
  2636 ;;		On entry : 0/0
  2637 ;;		On exit  : 0/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2640 ;;      Params:         2       0       0       0       0       0       0
  2641 ;;      Locals:         4       0       0       0       0       0       0
  2642 ;;      Temps:          0       0       0       0       0       0       0
  2643 ;;      Totals:         6       0       0       0       0       0       0
  2644 ;;Total ram usage:        6 bytes
  2645 ;; Hardware stack levels used:    1
  2646 ;; Hardware stack levels required when called:    4
  2647 ;; This function calls:
  2648 ;;		_WriteData
  2649 ;;		___awdiv
  2650 ;;		___awmod
  2651 ;;		___wmul
  2652 ;; This function is called by:
  2653 ;;		_adcToLcd
  2654 ;;		_display_temp
  2655 ;;		_display_speed
  2656 ;;		_display_light
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text17
  2661  000C94                     __ptext17:
  2662                           	opt stack 0
  2663  000C94                     _integerToLcd:
  2664                           	opt stack 24
  2665                           
  2666                           ;lcd.c: 150: unsigned char thousands ,hundreds,tens,ones;
  2667                           ;lcd.c: 151: thousands = num / 1000;
  2668                           
  2669                           ;incstack = 0
  2670  000C94  C015  F007         	movff	integerToLcd@num,___awdiv@dividend
  2671  000C98  C016  F008         	movff	integerToLcd@num+1,___awdiv@dividend+1
  2672  000C9C  0E03               	movlw	3
  2673  000C9E  6E0A               	movwf	___awdiv@divisor+1,c
  2674  000CA0  0EE8               	movlw	232
  2675  000CA2  6E09               	movwf	___awdiv@divisor,c
  2676  000CA4  EC8E  F007         	call	___awdiv	;wreg free
  2677  000CA8  5007               	movf	?___awdiv,w,c
  2678  000CAA  6E17               	movwf	integerToLcd@thousands,c
  2679                           
  2680                           ;lcd.c: 153: hundreds = ((num - thousands*1000)-1) / 100;
  2681  000CAC  C017  F00F         	movff	integerToLcd@thousands,___wmul@multiplier
  2682  000CB0  6A10               	clrf	___wmul@multiplier+1,c
  2683  000CB2  0E03               	movlw	3
  2684  000CB4  6E12               	movwf	___wmul@multiplicand+1,c
  2685  000CB6  0EE8               	movlw	232
  2686  000CB8  6E11               	movwf	___wmul@multiplicand,c
  2687  000CBA  EC78  F009         	call	___wmul	;wreg free
  2688  000CBE  0E01               	movlw	1
  2689  000CC0  260F               	addwf	?___wmul,f,c
  2690  000CC2  0E00               	movlw	0
  2691  000CC4  2210               	addwfc	?___wmul+1,f,c
  2692  000CC6  1E0F               	comf	?___wmul,f,c
  2693  000CC8  1E10               	comf	?___wmul+1,f,c
  2694  000CCA  4A0F               	infsnz	?___wmul,f,c
  2695  000CCC  2A10               	incf	?___wmul+1,f,c
  2696  000CCE  5015               	movf	integerToLcd@num,w,c
  2697  000CD0  240F               	addwf	?___wmul,w,c
  2698  000CD2  6E07               	movwf	___awdiv@dividend,c
  2699  000CD4  5016               	movf	integerToLcd@num+1,w,c
  2700  000CD6  2010               	addwfc	?___wmul+1,w,c
  2701  000CD8  6E08               	movwf	___awdiv@dividend+1,c
  2702  000CDA  0E00               	movlw	0
  2703  000CDC  6E0A               	movwf	___awdiv@divisor+1,c
  2704  000CDE  0E64               	movlw	100
  2705  000CE0  6E09               	movwf	___awdiv@divisor,c
  2706  000CE2  EC8E  F007         	call	___awdiv	;wreg free
  2707  000CE6  5007               	movf	?___awdiv,w,c
  2708  000CE8  6E18               	movwf	integerToLcd@hundreds,c
  2709                           
  2710                           ;lcd.c: 155: WriteData( hundreds + 0x30);
  2711  000CEA  5018               	movf	integerToLcd@hundreds,w,c
  2712  000CEC  0F30               	addlw	48
  2713  000CEE  EC97  F009         	call	_WriteData
  2714                           
  2715                           ;lcd.c: 156: tens = (num%100)/10;
  2716  000CF2  0E00               	movlw	0
  2717  000CF4  6E04               	movwf	___awmod@divisor+1,c
  2718  000CF6  0E64               	movlw	100
  2719  000CF8  6E03               	movwf	___awmod@divisor,c
  2720  000CFA  C015  F001         	movff	integerToLcd@num,___awmod@dividend
  2721  000CFE  C016  F002         	movff	integerToLcd@num+1,___awmod@dividend+1
  2722  000D02  ECD0  F007         	call	___awmod	;wreg free
  2723  000D06  C001  F007         	movff	?___awmod,___awdiv@dividend
  2724  000D0A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2725  000D0E  0E00               	movlw	0
  2726  000D10  6E0A               	movwf	___awdiv@divisor+1,c
  2727  000D12  0E0A               	movlw	10
  2728  000D14  6E09               	movwf	___awdiv@divisor,c
  2729  000D16  EC8E  F007         	call	___awdiv	;wreg free
  2730  000D1A  5007               	movf	?___awdiv,w,c
  2731  000D1C  6E19               	movwf	integerToLcd@tens,c
  2732                           
  2733                           ;lcd.c: 158: WriteData( tens + 0x30);
  2734  000D1E  5019               	movf	integerToLcd@tens,w,c
  2735  000D20  0F30               	addlw	48
  2736  000D22  EC97  F009         	call	_WriteData
  2737                           
  2738                           ;lcd.c: 159: ones = num%10;
  2739  000D26  C015  F001         	movff	integerToLcd@num,___awmod@dividend
  2740  000D2A  C016  F002         	movff	integerToLcd@num+1,___awmod@dividend+1
  2741  000D2E  0E00               	movlw	0
  2742  000D30  6E04               	movwf	___awmod@divisor+1,c
  2743  000D32  0E0A               	movlw	10
  2744  000D34  6E03               	movwf	___awmod@divisor,c
  2745  000D36  ECD0  F007         	call	___awmod	;wreg free
  2746  000D3A  5001               	movf	?___awmod,w,c
  2747  000D3C  6E1A               	movwf	integerToLcd@ones,c
  2748                           
  2749                           ;lcd.c: 161: WriteData( ones + 0x30);
  2750  000D3E  501A               	movf	integerToLcd@ones,w,c
  2751  000D40  0F30               	addlw	48
  2752  000D42  EC97  F009         	call	_WriteData
  2753  000D46  0012               	return		;funcret
  2754  000D48                     __end_of_integerToLcd:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           tblptrh	equ	0xFF7
  2758                           tblptrl	equ	0xFF6
  2759                           tablat	equ	0xFF5
  2760                           postinc2	equ	0xFDE
  2761                           postdec2	equ	0xFDD
  2762                           fsr2h	equ	0xFDA
  2763                           fsr2l	equ	0xFD9
  2764                           status	equ	0xFD8
  2765                           
  2766 ;; *************** function ___wmul *****************
  2767 ;; Defined at:
  2768 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;  multiplier      2   14[COMRAM] unsigned int 
  2771 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;  product         2   18[COMRAM] unsigned int 
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  2   14[COMRAM] unsigned int 
  2776 ;; Registers used:
  2777 ;;		wreg, status,2, status,0, prodl, prodh
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2783 ;;      Params:         4       0       0       0       0       0       0
  2784 ;;      Locals:         2       0       0       0       0       0       0
  2785 ;;      Temps:          0       0       0       0       0       0       0
  2786 ;;      Totals:         6       0       0       0       0       0       0
  2787 ;;Total ram usage:        6 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; This function calls:
  2790 ;;		Nothing
  2791 ;; This function is called by:
  2792 ;;		_get_temp
  2793 ;;		_integerToLcd
  2794 ;;		_eval_poly
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text18
  2799  0012F0                     __ptext18:
  2800                           	opt stack 0
  2801  0012F0                     ___wmul:
  2802                           	opt stack 27
  2803                           
  2804                           ;incstack = 0
  2805  0012F0  500F               	movf	___wmul@multiplier,w,c
  2806  0012F2  0211               	mulwf	___wmul@multiplicand,c
  2807  0012F4  CFF3 F013          	movff	prodl,___wmul@product
  2808  0012F8  CFF4 F014          	movff	prodh,___wmul@product+1
  2809  0012FC  500F               	movf	___wmul@multiplier,w,c
  2810  0012FE  0212               	mulwf	___wmul@multiplicand+1,c
  2811  001300  50F3               	movf	prodl,w,c
  2812  001302  2614               	addwf	___wmul@product+1,f,c
  2813  001304  5010               	movf	___wmul@multiplier+1,w,c
  2814  001306  0211               	mulwf	___wmul@multiplicand,c
  2815  001308  50F3               	movf	prodl,w,c
  2816  00130A  2614               	addwf	___wmul@product+1,f,c
  2817  00130C  C013  F00F         	movff	___wmul@product,?___wmul
  2818  001310  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2819  001314  0012               	return	
  2820  001316                     __end_of___wmul:
  2821                           	opt stack 0
  2822                           tblptru	equ	0xFF8
  2823                           tblptrh	equ	0xFF7
  2824                           tblptrl	equ	0xFF6
  2825                           tablat	equ	0xFF5
  2826                           prodh	equ	0xFF4
  2827                           prodl	equ	0xFF3
  2828                           postinc2	equ	0xFDE
  2829                           postdec2	equ	0xFDD
  2830                           fsr2h	equ	0xFDA
  2831                           fsr2l	equ	0xFD9
  2832                           status	equ	0xFD8
  2833                           
  2834 ;; *************** function ___awmod *****************
  2835 ;; Defined at:
  2836 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awmod.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  dividend        2    0[COMRAM] int 
  2839 ;;  divisor         2    2[COMRAM] int 
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  sign            1    5[COMRAM] unsigned char 
  2842 ;;  counter         1    4[COMRAM] unsigned char 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  2    0[COMRAM] int 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, status,0
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2852 ;;      Params:         4       0       0       0       0       0       0
  2853 ;;      Locals:         2       0       0       0       0       0       0
  2854 ;;      Temps:          0       0       0       0       0       0       0
  2855 ;;      Totals:         6       0       0       0       0       0       0
  2856 ;;Total ram usage:        6 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; This function calls:
  2859 ;;		Nothing
  2860 ;; This function is called by:
  2861 ;;		_integerToLcd
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           	psect	text19
  2866  000FA0                     __ptext19:
  2867                           	opt stack 0
  2868  000FA0                     ___awmod:
  2869                           	opt stack 27
  2870                           
  2871                           ;incstack = 0
  2872  000FA0  0E00               	movlw	0
  2873  000FA2  6E06               	movwf	___awmod@sign,c
  2874  000FA4  AE02               	btfss	___awmod@dividend+1,7,c
  2875  000FA6  D006               	goto	l2146
  2876  000FA8  6C01               	negf	___awmod@dividend,c
  2877  000FAA  1E02               	comf	___awmod@dividend+1,f,c
  2878  000FAC  B0D8               	btfsc	status,0,c
  2879  000FAE  2A02               	incf	___awmod@dividend+1,f,c
  2880  000FB0  0E01               	movlw	1
  2881  000FB2  6E06               	movwf	___awmod@sign,c
  2882  000FB4                     l2146:
  2883  000FB4  AE04               	btfss	___awmod@divisor+1,7,c
  2884  000FB6  D004               	goto	l2150
  2885  000FB8  6C03               	negf	___awmod@divisor,c
  2886  000FBA  1E04               	comf	___awmod@divisor+1,f,c
  2887  000FBC  B0D8               	btfsc	status,0,c
  2888  000FBE  2A04               	incf	___awmod@divisor+1,f,c
  2889  000FC0                     l2150:
  2890  000FC0  5003               	movf	___awmod@divisor,w,c
  2891  000FC2  1004               	iorwf	___awmod@divisor+1,w,c
  2892  000FC4  B4D8               	btfsc	status,2,c
  2893  000FC6  D018               	goto	l2166
  2894  000FC8  0E01               	movlw	1
  2895  000FCA  6E05               	movwf	___awmod@counter,c
  2896  000FCC  D004               	goto	l2156
  2897  000FCE                     l2154:
  2898  000FCE  90D8               	bcf	status,0,c
  2899  000FD0  3603               	rlcf	___awmod@divisor,f,c
  2900  000FD2  3604               	rlcf	___awmod@divisor+1,f,c
  2901  000FD4  2A05               	incf	___awmod@counter,f,c
  2902  000FD6                     l2156:
  2903  000FD6  AE04               	btfss	___awmod@divisor+1,7,c
  2904  000FD8  D7FA               	goto	l2154
  2905  000FDA                     l2158:
  2906  000FDA  5003               	movf	___awmod@divisor,w,c
  2907  000FDC  5C01               	subwf	___awmod@dividend,w,c
  2908  000FDE  5004               	movf	___awmod@divisor+1,w,c
  2909  000FE0  5802               	subwfb	___awmod@dividend+1,w,c
  2910  000FE2  A0D8               	btfss	status,0,c
  2911  000FE4  D004               	goto	l2162
  2912  000FE6  5003               	movf	___awmod@divisor,w,c
  2913  000FE8  5E01               	subwf	___awmod@dividend,f,c
  2914  000FEA  5004               	movf	___awmod@divisor+1,w,c
  2915  000FEC  5A02               	subwfb	___awmod@dividend+1,f,c
  2916  000FEE                     l2162:
  2917  000FEE  90D8               	bcf	status,0,c
  2918  000FF0  3204               	rrcf	___awmod@divisor+1,f,c
  2919  000FF2  3203               	rrcf	___awmod@divisor,f,c
  2920  000FF4  2E05               	decfsz	___awmod@counter,f,c
  2921  000FF6  D7F1               	goto	l2158
  2922  000FF8                     l2166:
  2923  000FF8  5006               	movf	___awmod@sign,w,c
  2924  000FFA  B4D8               	btfsc	status,2,c
  2925  000FFC  D004               	goto	l2170
  2926  000FFE  6C01               	negf	___awmod@dividend,c
  2927  001000  1E02               	comf	___awmod@dividend+1,f,c
  2928  001002  B0D8               	btfsc	status,0,c
  2929  001004  2A02               	incf	___awmod@dividend+1,f,c
  2930  001006                     l2170:
  2931  001006  C001  F001         	movff	___awmod@dividend,?___awmod
  2932  00100A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2933  00100E  0012               	return	
  2934  001010                     __end_of___awmod:
  2935                           	opt stack 0
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           prodh	equ	0xFF4
  2941                           prodl	equ	0xFF3
  2942                           postinc2	equ	0xFDE
  2943                           postdec2	equ	0xFDD
  2944                           fsr2h	equ	0xFDA
  2945                           fsr2l	equ	0xFD9
  2946                           status	equ	0xFD8
  2947                           
  2948 ;; *************** function ___awdiv *****************
  2949 ;; Defined at:
  2950 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awdiv.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  dividend        2    6[COMRAM] int 
  2953 ;;  divisor         2    8[COMRAM] int 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  quotient        2   12[COMRAM] int 
  2956 ;;  sign            1   11[COMRAM] unsigned char 
  2957 ;;  counter         1   10[COMRAM] unsigned char 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  2    6[COMRAM] int 
  2960 ;; Registers used:
  2961 ;;		wreg, status,2, status,0
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2967 ;;      Params:         4       0       0       0       0       0       0
  2968 ;;      Locals:         4       0       0       0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0
  2970 ;;      Totals:         8       0       0       0       0       0       0
  2971 ;;Total ram usage:        8 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; This function calls:
  2974 ;;		Nothing
  2975 ;; This function is called by:
  2976 ;;		_get_temp
  2977 ;;		_integerToLcd
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text20
  2982  000F1C                     __ptext20:
  2983                           	opt stack 0
  2984  000F1C                     ___awdiv:
  2985                           	opt stack 27
  2986                           
  2987                           ;incstack = 0
  2988  000F1C  0E00               	movlw	0
  2989  000F1E  6E0C               	movwf	___awdiv@sign,c
  2990  000F20  AE0A               	btfss	___awdiv@divisor+1,7,c
  2991  000F22  D006               	goto	l2102
  2992  000F24  6C09               	negf	___awdiv@divisor,c
  2993  000F26  1E0A               	comf	___awdiv@divisor+1,f,c
  2994  000F28  B0D8               	btfsc	status,0,c
  2995  000F2A  2A0A               	incf	___awdiv@divisor+1,f,c
  2996  000F2C  0E01               	movlw	1
  2997  000F2E  6E0C               	movwf	___awdiv@sign,c
  2998  000F30                     l2102:
  2999  000F30  AE08               	btfss	___awdiv@dividend+1,7,c
  3000  000F32  D006               	goto	l2108
  3001  000F34  6C07               	negf	___awdiv@dividend,c
  3002  000F36  1E08               	comf	___awdiv@dividend+1,f,c
  3003  000F38  B0D8               	btfsc	status,0,c
  3004  000F3A  2A08               	incf	___awdiv@dividend+1,f,c
  3005  000F3C  0E01               	movlw	1
  3006  000F3E  1A0C               	xorwf	___awdiv@sign,f,c
  3007  000F40                     l2108:
  3008  000F40  0E00               	movlw	0
  3009  000F42  6E0E               	movwf	___awdiv@quotient+1,c
  3010  000F44  0E00               	movlw	0
  3011  000F46  6E0D               	movwf	___awdiv@quotient,c
  3012  000F48  5009               	movf	___awdiv@divisor,w,c
  3013  000F4A  100A               	iorwf	___awdiv@divisor+1,w,c
  3014  000F4C  B4D8               	btfsc	status,2,c
  3015  000F4E  D01C               	goto	l2130
  3016  000F50  0E01               	movlw	1
  3017  000F52  6E0B               	movwf	___awdiv@counter,c
  3018  000F54  D004               	goto	l2116
  3019  000F56                     l2114:
  3020  000F56  90D8               	bcf	status,0,c
  3021  000F58  3609               	rlcf	___awdiv@divisor,f,c
  3022  000F5A  360A               	rlcf	___awdiv@divisor+1,f,c
  3023  000F5C  2A0B               	incf	___awdiv@counter,f,c
  3024  000F5E                     l2116:
  3025  000F5E  AE0A               	btfss	___awdiv@divisor+1,7,c
  3026  000F60  D7FA               	goto	l2114
  3027  000F62                     l2118:
  3028  000F62  90D8               	bcf	status,0,c
  3029  000F64  360D               	rlcf	___awdiv@quotient,f,c
  3030  000F66  360E               	rlcf	___awdiv@quotient+1,f,c
  3031  000F68  5009               	movf	___awdiv@divisor,w,c
  3032  000F6A  5C07               	subwf	___awdiv@dividend,w,c
  3033  000F6C  500A               	movf	___awdiv@divisor+1,w,c
  3034  000F6E  5808               	subwfb	___awdiv@dividend+1,w,c
  3035  000F70  A0D8               	btfss	status,0,c
  3036  000F72  D005               	goto	l2126
  3037  000F74  5009               	movf	___awdiv@divisor,w,c
  3038  000F76  5E07               	subwf	___awdiv@dividend,f,c
  3039  000F78  500A               	movf	___awdiv@divisor+1,w,c
  3040  000F7A  5A08               	subwfb	___awdiv@dividend+1,f,c
  3041  000F7C  800D               	bsf	___awdiv@quotient,0,c
  3042  000F7E                     l2126:
  3043  000F7E  90D8               	bcf	status,0,c
  3044  000F80  320A               	rrcf	___awdiv@divisor+1,f,c
  3045  000F82  3209               	rrcf	___awdiv@divisor,f,c
  3046  000F84  2E0B               	decfsz	___awdiv@counter,f,c
  3047  000F86  D7ED               	goto	l2118
  3048  000F88                     l2130:
  3049  000F88  500C               	movf	___awdiv@sign,w,c
  3050  000F8A  B4D8               	btfsc	status,2,c
  3051  000F8C  D004               	goto	l2134
  3052  000F8E  6C0D               	negf	___awdiv@quotient,c
  3053  000F90  1E0E               	comf	___awdiv@quotient+1,f,c
  3054  000F92  B0D8               	btfsc	status,0,c
  3055  000F94  2A0E               	incf	___awdiv@quotient+1,f,c
  3056  000F96                     l2134:
  3057  000F96  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3058  000F9A  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3059  000F9E  0012               	return	
  3060  000FA0                     __end_of___awdiv:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           postinc2	equ	0xFDE
  3069                           postdec2	equ	0xFDD
  3070                           fsr2h	equ	0xFDA
  3071                           fsr2l	equ	0xFD9
  3072                           status	equ	0xFD8
  3073                           
  3074 ;; *************** function _adc_poll *****************
  3075 ;; Defined at:
  3076 ;;		line 26 in file "sensors.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;		None
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;		None
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  1    wreg      void 
  3083 ;; Registers used:
  3084 ;;		None
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3090 ;;      Params:         0       0       0       0       0       0       0
  3091 ;;      Locals:         0       0       0       0       0       0       0
  3092 ;;      Temps:          0       0       0       0       0       0       0
  3093 ;;      Totals:         0       0       0       0       0       0       0
  3094 ;;Total ram usage:        0 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_adcToLcd
  3100 ;;		_get_temp
  3101 ;;		_get_light
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text21
  3106  001398                     __ptext21:
  3107                           	opt stack 0
  3108  001398                     _adc_poll:
  3109                           	opt stack 27
  3110  001398                     l296:
  3111  001398  A2C2               	btfss	4034,1,c	;volatile
  3112  00139A  0012               	return	
  3113  00139C  D7FD               	goto	l296
  3114  00139E                     __end_of_adc_poll:
  3115                           	opt stack 0
  3116                           tblptru	equ	0xFF8
  3117                           tblptrh	equ	0xFF7
  3118                           tblptrl	equ	0xFF6
  3119                           tablat	equ	0xFF5
  3120                           prodh	equ	0xFF4
  3121                           prodl	equ	0xFF3
  3122                           postinc2	equ	0xFDE
  3123                           postdec2	equ	0xFDD
  3124                           fsr2h	equ	0xFDA
  3125                           fsr2l	equ	0xFD9
  3126                           status	equ	0xFD8
  3127                           
  3128 ;; *************** function _WriteLCD *****************
  3129 ;; Defined at:
  3130 ;;		line 87 in file "lcd.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  message         2    6[COMRAM] PTR unsigned char 
  3133 ;;		 -> STR_5(7), STR_4(5), STR_3(5), STR_2(5), 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  i               1   10[COMRAM] unsigned char 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      void 
  3138 ;; Registers used:
  3139 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3145 ;;      Params:         2       0       0       0       0       0       0
  3146 ;;      Locals:         1       0       0       0       0       0       0
  3147 ;;      Temps:          2       0       0       0       0       0       0
  3148 ;;      Totals:         5       0       0       0       0       0       0
  3149 ;;Total ram usage:        5 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    4
  3152 ;; This function calls:
  3153 ;;		_WriteData
  3154 ;;		_delay
  3155 ;; This function is called by:
  3156 ;;		_adcToLcd
  3157 ;;		_hmi_out
  3158 ;;		_display_mode
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text22
  3163  001010                     __ptext22:
  3164                           	opt stack 0
  3165  001010                     _WriteLCD:
  3166                           	opt stack 24
  3167                           
  3168                           ;lcd.c: 89: delay(1);
  3169                           
  3170                           ;incstack = 0
  3171  001010  0E00               	movlw	0
  3172  001012  6E02               	movwf	delay@x+1,c
  3173  001014  0E01               	movlw	1
  3174  001016  6E01               	movwf	delay@x,c
  3175  001018  EC36  F009         	call	_delay	;wreg free
  3176                           
  3177                           ;lcd.c: 90: unsigned char i;
  3178                           ;lcd.c: 91: for(i=0; i<20; i++)
  3179  00101C  0E00               	movlw	0
  3180  00101E  6E0B               	movwf	WriteLCD@i,c
  3181  001020                     l2224:
  3182  001020  0E13               	movlw	19
  3183  001022  640B               	cpfsgt	WriteLCD@i,c
  3184  001024  D001               	goto	l2228
  3185  001026  0012               	return	
  3186  001028                     l2228:
  3187                           
  3188                           ;lcd.c: 92: {
  3189                           ;lcd.c: 93: if( !message[i] )
  3190  001028  500B               	movf	WriteLCD@i,w,c
  3191  00102A  0D01               	mullw	1
  3192  00102C  C007  F009         	movff	WriteLCD@message,??_WriteLCD
  3193  001030  C008  F00A         	movff	WriteLCD@message+1,??_WriteLCD+1
  3194  001034  50F3               	movf	prodl,w,c
  3195  001036  2609               	addwf	??_WriteLCD,f,c
  3196  001038  50F4               	movf	prodh,w,c
  3197  00103A  220A               	addwfc	??_WriteLCD+1,f,c
  3198  00103C  C009  FFF6         	movff	??_WriteLCD,tblptrl
  3199  001040  C00A  FFF7         	movff	??_WriteLCD+1,tblptrh
  3200  001044                     	if	0	;tblptru may be non-zero
  3201  001044                     	endif
  3202  001044                     	if	0	;tblptru may be non-zero
  3203  001044                     	endif
  3204  001044  0008               	tblrd		*
  3205  001046  50F5               	movf	tablat,w,c
  3206  001048  0900               	iorlw	0
  3207  00104A  B4D8               	btfsc	status,2,c
  3208  00104C  0012               	return	
  3209                           
  3210                           ;lcd.c: 95: WriteData(message[i]);
  3211                           
  3212                           ;lcd.c: 94: break;
  3213  00104E  500B               	movf	WriteLCD@i,w,c
  3214  001050  0D01               	mullw	1
  3215  001052  C007  F009         	movff	WriteLCD@message,??_WriteLCD
  3216  001056  C008  F00A         	movff	WriteLCD@message+1,??_WriteLCD+1
  3217  00105A  50F3               	movf	prodl,w,c
  3218  00105C  2609               	addwf	??_WriteLCD,f,c
  3219  00105E  50F4               	movf	prodh,w,c
  3220  001060  220A               	addwfc	??_WriteLCD+1,f,c
  3221  001062  C009  FFF6         	movff	??_WriteLCD,tblptrl
  3222  001066  C00A  FFF7         	movff	??_WriteLCD+1,tblptrh
  3223  00106A                     	if	0	;tblptru may be non-zero
  3224  00106A                     	endif
  3225  00106A                     	if	0	;tblptru may be non-zero
  3226  00106A                     	endif
  3227  00106A  0008               	tblrd		*
  3228  00106C  50F5               	movf	tablat,w,c
  3229  00106E  EC97  F009         	call	_WriteData
  3230  001072  2A0B               	incf	WriteLCD@i,f,c
  3231  001074  D7D5               	goto	l2224
  3232  001076                     __end_of_WriteLCD:
  3233                           	opt stack 0
  3234                           tblptru	equ	0xFF8
  3235                           tblptrh	equ	0xFF7
  3236                           tblptrl	equ	0xFF6
  3237                           tablat	equ	0xFF5
  3238                           prodh	equ	0xFF4
  3239                           prodl	equ	0xFF3
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           fsr2h	equ	0xFDA
  3243                           fsr2l	equ	0xFD9
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _WriteData *****************
  3247 ;; Defined at:
  3248 ;;		line 106 in file "lcd.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  value           1    wreg     unsigned char 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  value           1    5[COMRAM] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      void 
  3255 ;; Registers used:
  3256 ;;		wreg, status,2, status,0, cstack
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3262 ;;      Params:         0       0       0       0       0       0       0
  3263 ;;      Locals:         1       0       0       0       0       0       0
  3264 ;;      Temps:          0       0       0       0       0       0       0
  3265 ;;      Totals:         1       0       0       0       0       0       0
  3266 ;;Total ram usage:        1 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    3
  3269 ;; This function calls:
  3270 ;;		_WriteCommon
  3271 ;;		_delay
  3272 ;; This function is called by:
  3273 ;;		_display_temp
  3274 ;;		_WriteLCD
  3275 ;;		_integerToLcd
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text23
  3280  00132E                     __ptext23:
  3281                           	opt stack 0
  3282  00132E                     _WriteData:
  3283                           	opt stack 24
  3284                           
  3285                           ;incstack = 0
  3286                           ;WriteData@value stored from wreg
  3287  00132E  6E06               	movwf	WriteData@value,c
  3288                           
  3289                           ;lcd.c: 108: PORTCbits.RC0 = 1;
  3290  001330  8082               	bsf	3970,0,c	;volatile
  3291                           
  3292                           ;lcd.c: 109: delay(1);
  3293  001332  0E00               	movlw	0
  3294  001334  6E02               	movwf	delay@x+1,c
  3295  001336  0E01               	movlw	1
  3296  001338  6E01               	movwf	delay@x,c
  3297  00133A  EC36  F009         	call	_delay	;wreg free
  3298                           
  3299                           ;lcd.c: 110: WriteCommon( value );
  3300  00133E  5006               	movf	WriteData@value,w,c
  3301  001340  ECDF  F008         	call	_WriteCommon
  3302  001344  0012               	return		;funcret
  3303  001346                     __end_of_WriteData:
  3304                           	opt stack 0
  3305                           tblptru	equ	0xFF8
  3306                           tblptrh	equ	0xFF7
  3307                           tblptrl	equ	0xFF6
  3308                           tablat	equ	0xFF5
  3309                           prodh	equ	0xFF4
  3310                           prodl	equ	0xFF3
  3311                           postinc2	equ	0xFDE
  3312                           postdec2	equ	0xFDD
  3313                           fsr2h	equ	0xFDA
  3314                           fsr2l	equ	0xFD9
  3315                           status	equ	0xFD8
  3316                           
  3317 ;; *************** function _SerialTransmit *****************
  3318 ;; Defined at:
  3319 ;;		line 151 in file "hmi.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;  buffer          2    6[COMRAM] PTR const unsigned char 
  3322 ;;		 -> STR_1(10), 
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;  size            2    8[COMRAM] unsigned int 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  1    wreg      void 
  3327 ;; Registers used:
  3328 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3334 ;;      Params:         2       0       0       0       0       0       0
  3335 ;;      Locals:         2       0       0       0       0       0       0
  3336 ;;      Temps:          0       0       0       0       0       0       0
  3337 ;;      Totals:         4       0       0       0       0       0       0
  3338 ;;Total ram usage:        4 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    1
  3341 ;; This function calls:
  3342 ;;		_strlen
  3343 ;; This function is called by:
  3344 ;;		_main
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text24
  3349  001102                     __ptext24:
  3350                           	opt stack 0
  3351  001102                     _SerialTransmit:
  3352                           	opt stack 29
  3353                           
  3354                           ;hmi.c: 154: unsigned int size = strlen(buffer);
  3355                           
  3356                           ;incstack = 0
  3357  001102  C007  F001         	movff	SerialTransmit@buffer,strlen@s
  3358  001106  C008  F002         	movff	SerialTransmit@buffer+1,strlen@s+1
  3359  00110A  ECC0  F008         	call	_strlen	;wreg free
  3360  00110E  C001  F009         	movff	?_strlen,SerialTransmit@size
  3361  001112  C002  F00A         	movff	?_strlen+1,SerialTransmit@size+1
  3362                           
  3363                           ;hmi.c: 156: while(size)
  3364  001116  D00E               	goto	l2406
  3365  001118                     l101:
  3366  001118  B89E               	btfsc	3998,4,c	;volatile
  3367  00111A  D7FE               	goto	l101
  3368                           
  3369                           ;hmi.c: 159: TXREG = *buffer;
  3370  00111C  C007  FFF6         	movff	SerialTransmit@buffer,tblptrl
  3371  001120  C008  FFF7         	movff	SerialTransmit@buffer+1,tblptrh
  3372  001124                     	if	0	;tblptru may be non-zero
  3373  001124                     	endif
  3374  001124                     	if	0	;tblptru may be non-zero
  3375  001124                     	endif
  3376  001124  0008               	tblrd		*
  3377  001126  CFF5 FFAD          	movff	tablat,4013	;volatile
  3378                           
  3379                           ;hmi.c: 161: buffer++;
  3380  00112A  4A07               	infsnz	SerialTransmit@buffer,f,c
  3381  00112C  2A08               	incf	SerialTransmit@buffer+1,f,c
  3382                           
  3383                           ;hmi.c: 162: size--;
  3384  00112E  0609               	decf	SerialTransmit@size,f,c
  3385  001130  A0D8               	btfss	status,0,c
  3386  001132  060A               	decf	SerialTransmit@size+1,f,c
  3387  001134                     l2406:
  3388  001134  5009               	movf	SerialTransmit@size,w,c
  3389  001136  100A               	iorwf	SerialTransmit@size+1,w,c
  3390  001138  A4D8               	btfss	status,2,c
  3391  00113A  D7EE               	goto	l101
  3392  00113C                     l105:
  3393  00113C  B2AC               	btfsc	4012,1,c	;volatile
  3394  00113E  0012               	return	
  3395  001140  D7FD               	goto	l105
  3396  001142                     __end_of_SerialTransmit:
  3397                           	opt stack 0
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           prodh	equ	0xFF4
  3403                           prodl	equ	0xFF3
  3404                           postinc2	equ	0xFDE
  3405                           postdec2	equ	0xFDD
  3406                           fsr2h	equ	0xFDA
  3407                           fsr2l	equ	0xFD9
  3408                           status	equ	0xFD8
  3409                           
  3410 ;; *************** function _strlen *****************
  3411 ;; Defined at:
  3412 ;;		line 4 in file "/opt/microchip/xc8/v1.41/sources/common/strlen.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  s               2    0[COMRAM] PTR const unsigned char 
  3415 ;;		 -> STR_1(10), 
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  3418 ;;		 -> STR_1(10), 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  2    0[COMRAM] unsigned int 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3428 ;;      Params:         2       0       0       0       0       0       0
  3429 ;;      Locals:         2       0       0       0       0       0       0
  3430 ;;      Temps:          2       0       0       0       0       0       0
  3431 ;;      Totals:         6       0       0       0       0       0       0
  3432 ;;Total ram usage:        6 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; This function calls:
  3435 ;;		Nothing
  3436 ;; This function is called by:
  3437 ;;		_SerialTransmit
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text25
  3442  001180                     __ptext25:
  3443                           	opt stack 0
  3444  001180                     _strlen:
  3445                           	opt stack 29
  3446                           
  3447                           ;incstack = 0
  3448  001180  C001  F005         	movff	strlen@s,strlen@cp
  3449  001184  C002  F006         	movff	strlen@s+1,strlen@cp+1
  3450  001188  D002               	goto	l2286
  3451  00118A                     l2284:
  3452  00118A  4A05               	infsnz	strlen@cp,f,c
  3453  00118C  2A06               	incf	strlen@cp+1,f,c
  3454  00118E                     l2286:
  3455  00118E  C005  FFF6         	movff	strlen@cp,tblptrl
  3456  001192  C006  FFF7         	movff	strlen@cp+1,tblptrh
  3457  001196                     	if	0	;tblptru may be non-zero
  3458  001196                     	endif
  3459  001196                     	if	0	;tblptru may be non-zero
  3460  001196                     	endif
  3461  001196  0008               	tblrd		*
  3462  001198  50F5               	movf	tablat,w,c
  3463  00119A  0900               	iorlw	0
  3464  00119C  A4D8               	btfss	status,2,c
  3465  00119E  D7F5               	goto	l2284
  3466  0011A0  C001  F003         	movff	strlen@s,??_strlen
  3467  0011A4  C002  F004         	movff	strlen@s+1,??_strlen+1
  3468  0011A8  1E03               	comf	??_strlen,f,c
  3469  0011AA  1E04               	comf	??_strlen+1,f,c
  3470  0011AC  4A03               	infsnz	??_strlen,f,c
  3471  0011AE  2A04               	incf	??_strlen+1,f,c
  3472  0011B0  5005               	movf	strlen@cp,w,c
  3473  0011B2  2403               	addwf	??_strlen,w,c
  3474  0011B4  6E01               	movwf	?_strlen,c
  3475  0011B6  5006               	movf	strlen@cp+1,w,c
  3476  0011B8  2004               	addwfc	??_strlen+1,w,c
  3477  0011BA  6E02               	movwf	?_strlen+1,c
  3478  0011BC  0012               	return	
  3479  0011BE                     __end_of_strlen:
  3480                           	opt stack 0
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           prodh	equ	0xFF4
  3486                           prodl	equ	0xFF3
  3487                           postinc2	equ	0xFDE
  3488                           postdec2	equ	0xFDD
  3489                           fsr2h	equ	0xFDA
  3490                           fsr2l	equ	0xFD9
  3491                           status	equ	0xFD8
  3492                           
  3493 ;; *************** function _SerialReceive *****************
  3494 ;; Defined at:
  3495 ;;		line 168 in file "hmi.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;		None
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      unsigned char 
  3502 ;; Registers used:
  3503 ;;		wreg, status,2
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3509 ;;      Params:         0       0       0       0       0       0       0
  3510 ;;      Locals:         0       0       0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0
  3512 ;;      Totals:         0       0       0       0       0       0       0
  3513 ;;Total ram usage:        0 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; This function calls:
  3516 ;;		Nothing
  3517 ;; This function is called by:
  3518 ;;		_main
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text26
  3523  001388                     __ptext26:
  3524                           	opt stack 0
  3525  001388                     _SerialReceive:
  3526                           	opt stack 30
  3527  001388                     l111:
  3528  001388  AA9E               	btfss	3998,5,c	;volatile
  3529  00138A  D7FE               	goto	l111
  3530                           
  3531                           ;hmi.c: 171: return RCREG;
  3532  00138C  50AE               	movf	4014,w,c	;volatile
  3533  00138E  0012               	return	
  3534  001390                     __end_of_SerialReceive:
  3535                           	opt stack 0
  3536                           tblptru	equ	0xFF8
  3537                           tblptrh	equ	0xFF7
  3538                           tblptrl	equ	0xFF6
  3539                           tablat	equ	0xFF5
  3540                           prodh	equ	0xFF4
  3541                           prodl	equ	0xFF3
  3542                           postinc2	equ	0xFDE
  3543                           postdec2	equ	0xFDD
  3544                           fsr2h	equ	0xFDA
  3545                           fsr2l	equ	0xFD9
  3546                           status	equ	0xFD8
  3547                           
  3548 ;; *************** function _InitLCD *****************
  3549 ;; Defined at:
  3550 ;;		line 10 in file "lcd.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      void 
  3557 ;; Registers used:
  3558 ;;		wreg, status,2, status,0, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3564 ;;      Params:         0       0       0       0       0       0       0
  3565 ;;      Locals:         0       0       0       0       0       0       0
  3566 ;;      Temps:          0       0       0       0       0       0       0
  3567 ;;      Totals:         0       0       0       0       0       0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    5
  3571 ;; This function calls:
  3572 ;;		_WriteCtrl
  3573 ;;		_clear_lcd
  3574 ;;		_delay
  3575 ;;		_pulse_enable
  3576 ;; This function is called by:
  3577 ;;		_main
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	text27
  3582  000BC2                     __ptext27:
  3583                           	opt stack 0
  3584  000BC2                     _InitLCD:
  3585                           	opt stack 25
  3586                           
  3587                           ;lcd.c: 55: delay(200);
  3588                           
  3589                           ;incstack = 0
  3590  000BC2  0E00               	movlw	0
  3591  000BC4  6E02               	movwf	delay@x+1,c
  3592  000BC6  0EC8               	movlw	200
  3593  000BC8  6E01               	movwf	delay@x,c
  3594  000BCA  EC36  F009         	call	_delay	;wreg free
  3595                           
  3596                           ;lcd.c: 57: PORTD = 3;
  3597  000BCE  0E03               	movlw	3
  3598  000BD0  6E83               	movwf	3971,c	;volatile
  3599                           
  3600                           ;lcd.c: 58: delay(2);
  3601  000BD2  0E00               	movlw	0
  3602  000BD4  6E02               	movwf	delay@x+1,c
  3603  000BD6  0E02               	movlw	2
  3604  000BD8  6E01               	movwf	delay@x,c
  3605  000BDA  EC36  F009         	call	_delay	;wreg free
  3606                           
  3607                           ;lcd.c: 59: pulse_enable();
  3608  000BDE  ECAF  F009         	call	_pulse_enable	;wreg free
  3609                           
  3610                           ;lcd.c: 60: delay(25);
  3611  000BE2  0E00               	movlw	0
  3612  000BE4  6E02               	movwf	delay@x+1,c
  3613  000BE6  0E19               	movlw	25
  3614  000BE8  6E01               	movwf	delay@x,c
  3615  000BEA  EC36  F009         	call	_delay	;wreg free
  3616                           
  3617                           ;lcd.c: 61: pulse_enable();
  3618  000BEE  ECAF  F009         	call	_pulse_enable	;wreg free
  3619                           
  3620                           ;lcd.c: 62: delay(25);
  3621  000BF2  0E00               	movlw	0
  3622  000BF4  6E02               	movwf	delay@x+1,c
  3623  000BF6  0E19               	movlw	25
  3624  000BF8  6E01               	movwf	delay@x,c
  3625  000BFA  EC36  F009         	call	_delay	;wreg free
  3626                           
  3627                           ;lcd.c: 63: pulse_enable();
  3628  000BFE  ECAF  F009         	call	_pulse_enable	;wreg free
  3629                           
  3630                           ;lcd.c: 64: PORTD = 2;
  3631  000C02  0E02               	movlw	2
  3632  000C04  6E83               	movwf	3971,c	;volatile
  3633                           
  3634                           ;lcd.c: 65: delay(2);
  3635  000C06  0E00               	movlw	0
  3636  000C08  6E02               	movwf	delay@x+1,c
  3637  000C0A  0E02               	movlw	2
  3638  000C0C  6E01               	movwf	delay@x,c
  3639  000C0E  EC36  F009         	call	_delay	;wreg free
  3640                           
  3641                           ;lcd.c: 66: pulse_enable();
  3642  000C12  ECAF  F009         	call	_pulse_enable	;wreg free
  3643                           
  3644                           ;lcd.c: 67: delay(25);
  3645  000C16  0E00               	movlw	0
  3646  000C18  6E02               	movwf	delay@x+1,c
  3647  000C1A  0E19               	movlw	25
  3648  000C1C  6E01               	movwf	delay@x,c
  3649  000C1E  EC36  F009         	call	_delay	;wreg free
  3650                           
  3651                           ;lcd.c: 68: WriteCtrl(0x08);
  3652  000C22  0E08               	movlw	8
  3653  000C24  ECA3  F009         	call	_WriteCtrl
  3654                           
  3655                           ;lcd.c: 69: delay(250);
  3656  000C28  0E00               	movlw	0
  3657  000C2A  6E02               	movwf	delay@x+1,c
  3658  000C2C  0EFA               	movlw	250
  3659  000C2E  6E01               	movwf	delay@x,c
  3660  000C30  EC36  F009         	call	_delay	;wreg free
  3661                           
  3662                           ;lcd.c: 70: WriteCtrl(0x28);
  3663  000C34  0E28               	movlw	40
  3664  000C36  ECA3  F009         	call	_WriteCtrl
  3665                           
  3666                           ;lcd.c: 71: delay(250);
  3667  000C3A  0E00               	movlw	0
  3668  000C3C  6E02               	movwf	delay@x+1,c
  3669  000C3E  0EFA               	movlw	250
  3670  000C40  6E01               	movwf	delay@x,c
  3671  000C42  EC36  F009         	call	_delay	;wreg free
  3672                           
  3673                           ;lcd.c: 73: WriteCtrl(0x14);
  3674  000C46  0E14               	movlw	20
  3675  000C48  ECA3  F009         	call	_WriteCtrl
  3676                           
  3677                           ;lcd.c: 74: delay(250);
  3678  000C4C  0E00               	movlw	0
  3679  000C4E  6E02               	movwf	delay@x+1,c
  3680  000C50  0EFA               	movlw	250
  3681  000C52  6E01               	movwf	delay@x,c
  3682  000C54  EC36  F009         	call	_delay	;wreg free
  3683                           
  3684                           ;lcd.c: 77: WriteCtrl(0x06);
  3685  000C58  0E06               	movlw	6
  3686  000C5A  ECA3  F009         	call	_WriteCtrl
  3687                           
  3688                           ;lcd.c: 78: delay(250);
  3689  000C5E  0E00               	movlw	0
  3690  000C60  6E02               	movwf	delay@x+1,c
  3691  000C62  0EFA               	movlw	250
  3692  000C64  6E01               	movwf	delay@x,c
  3693  000C66  EC36  F009         	call	_delay	;wreg free
  3694                           
  3695                           ;lcd.c: 79: WriteCtrl(0x80);
  3696  000C6A  0E80               	movlw	128
  3697  000C6C  ECA3  F009         	call	_WriteCtrl
  3698                           
  3699                           ;lcd.c: 80: delay(250);
  3700  000C70  0E00               	movlw	0
  3701  000C72  6E02               	movwf	delay@x+1,c
  3702  000C74  0EFA               	movlw	250
  3703  000C76  6E01               	movwf	delay@x,c
  3704  000C78  EC36  F009         	call	_delay	;wreg free
  3705                           
  3706                           ;lcd.c: 81: clear_lcd();
  3707  000C7C  ECC8  F009         	call	_clear_lcd	;wreg free
  3708                           
  3709                           ;lcd.c: 82: WriteCtrl(0x0C);
  3710  000C80  0E0C               	movlw	12
  3711  000C82  ECA3  F009         	call	_WriteCtrl
  3712                           
  3713                           ;lcd.c: 83: delay(250);
  3714  000C86  0E00               	movlw	0
  3715  000C88  6E02               	movwf	delay@x+1,c
  3716  000C8A  0EFA               	movlw	250
  3717  000C8C  6E01               	movwf	delay@x,c
  3718  000C8E  EC36  F009         	call	_delay	;wreg free
  3719  000C92  0012               	return		;funcret
  3720  000C94                     __end_of_InitLCD:
  3721                           	opt stack 0
  3722                           tblptru	equ	0xFF8
  3723                           tblptrh	equ	0xFF7
  3724                           tblptrl	equ	0xFF6
  3725                           tablat	equ	0xFF5
  3726                           prodh	equ	0xFF4
  3727                           prodl	equ	0xFF3
  3728                           postinc2	equ	0xFDE
  3729                           postdec2	equ	0xFDD
  3730                           fsr2h	equ	0xFDA
  3731                           fsr2l	equ	0xFD9
  3732                           status	equ	0xFD8
  3733                           
  3734 ;; *************** function _clear_lcd *****************
  3735 ;; Defined at:
  3736 ;;		line 5 in file "lcd.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;		None
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;		None
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      void 
  3743 ;; Registers used:
  3744 ;;		wreg, status,2, status,0, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3750 ;;      Params:         0       0       0       0       0       0       0
  3751 ;;      Locals:         0       0       0       0       0       0       0
  3752 ;;      Temps:          0       0       0       0       0       0       0
  3753 ;;      Totals:         0       0       0       0       0       0       0
  3754 ;;Total ram usage:        0 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    4
  3757 ;; This function calls:
  3758 ;;		_WriteCtrl
  3759 ;; This function is called by:
  3760 ;;		_adcToLcd
  3761 ;;		_hmi_out
  3762 ;;		_InitLCD
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text28
  3767  001390                     __ptext28:
  3768                           	opt stack 0
  3769  001390                     _clear_lcd:
  3770                           	opt stack 25
  3771                           
  3772                           ;lcd.c: 7: WriteCtrl(0x01);
  3773                           
  3774                           ;incstack = 0
  3775  001390  0E01               	movlw	1
  3776  001392  ECA3  F009         	call	_WriteCtrl
  3777  001396  0012               	return		;funcret
  3778  001398                     __end_of_clear_lcd:
  3779                           	opt stack 0
  3780                           tblptru	equ	0xFF8
  3781                           tblptrh	equ	0xFF7
  3782                           tblptrl	equ	0xFF6
  3783                           tablat	equ	0xFF5
  3784                           prodh	equ	0xFF4
  3785                           prodl	equ	0xFF3
  3786                           postinc2	equ	0xFDE
  3787                           postdec2	equ	0xFDD
  3788                           fsr2h	equ	0xFDA
  3789                           fsr2l	equ	0xFD9
  3790                           status	equ	0xFD8
  3791                           
  3792 ;; *************** function _WriteCtrl *****************
  3793 ;; Defined at:
  3794 ;;		line 99 in file "lcd.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  value           1    wreg     unsigned char 
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  value           1    5[COMRAM] unsigned char 
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  1    wreg      void 
  3801 ;; Registers used:
  3802 ;;		wreg, status,2, status,0, cstack
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3808 ;;      Params:         0       0       0       0       0       0       0
  3809 ;;      Locals:         1       0       0       0       0       0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0
  3811 ;;      Totals:         1       0       0       0       0       0       0
  3812 ;;Total ram usage:        1 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    3
  3815 ;; This function calls:
  3816 ;;		_WriteCommon
  3817 ;;		_delay
  3818 ;; This function is called by:
  3819 ;;		_clear_lcd
  3820 ;;		_InitLCD
  3821 ;;		_goto_xy
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text29
  3826  001346                     __ptext29:
  3827                           	opt stack 0
  3828  001346                     _WriteCtrl:
  3829                           	opt stack 25
  3830                           
  3831                           ;incstack = 0
  3832                           ;WriteCtrl@value stored from wreg
  3833  001346  6E06               	movwf	WriteCtrl@value,c
  3834                           
  3835                           ;lcd.c: 101: PORTCbits.RC0 = 0;
  3836  001348  9082               	bcf	3970,0,c	;volatile
  3837                           
  3838                           ;lcd.c: 102: delay(1);
  3839  00134A  0E00               	movlw	0
  3840  00134C  6E02               	movwf	delay@x+1,c
  3841  00134E  0E01               	movlw	1
  3842  001350  6E01               	movwf	delay@x,c
  3843  001352  EC36  F009         	call	_delay	;wreg free
  3844                           
  3845                           ;lcd.c: 103: WriteCommon( value );
  3846  001356  5006               	movf	WriteCtrl@value,w,c
  3847  001358  ECDF  F008         	call	_WriteCommon
  3848  00135C  0012               	return		;funcret
  3849  00135E                     __end_of_WriteCtrl:
  3850                           	opt stack 0
  3851                           tblptru	equ	0xFF8
  3852                           tblptrh	equ	0xFF7
  3853                           tblptrl	equ	0xFF6
  3854                           tablat	equ	0xFF5
  3855                           prodh	equ	0xFF4
  3856                           prodl	equ	0xFF3
  3857                           postinc2	equ	0xFDE
  3858                           postdec2	equ	0xFDD
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function _WriteCommon *****************
  3864 ;; Defined at:
  3865 ;;		line 120 in file "lcd.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  value           1    wreg     unsigned char 
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;  value           1    4[COMRAM] unsigned char 
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  1    wreg      void 
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0, cstack
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3879 ;;      Params:         0       0       0       0       0       0       0
  3880 ;;      Locals:         1       0       0       0       0       0       0
  3881 ;;      Temps:          0       0       0       0       0       0       0
  3882 ;;      Totals:         1       0       0       0       0       0       0
  3883 ;;Total ram usage:        1 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    2
  3886 ;; This function calls:
  3887 ;;		_delay
  3888 ;;		_pulse_enable
  3889 ;; This function is called by:
  3890 ;;		_WriteCtrl
  3891 ;;		_WriteData
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text30
  3896  0011BE                     __ptext30:
  3897                           	opt stack 0
  3898  0011BE                     _WriteCommon:
  3899                           	opt stack 25
  3900                           
  3901                           ;incstack = 0
  3902                           ;WriteCommon@value stored from wreg
  3903  0011BE  6E05               	movwf	WriteCommon@value,c
  3904                           
  3905                           ;lcd.c: 122: delay(1);
  3906  0011C0  0E00               	movlw	0
  3907  0011C2  6E02               	movwf	delay@x+1,c
  3908  0011C4  0E01               	movlw	1
  3909  0011C6  6E01               	movwf	delay@x,c
  3910  0011C8  EC36  F009         	call	_delay	;wreg free
  3911                           
  3912                           ;lcd.c: 124: PORTD = ((value >> 4) & 0x0F);
  3913  0011CC  3805               	swapf	WriteCommon@value,w,c
  3914  0011CE  0B0F               	andlw	15
  3915  0011D0  0B0F               	andlw	15
  3916  0011D2  6E83               	movwf	3971,c	;volatile
  3917                           
  3918                           ;lcd.c: 125: pulse_enable();
  3919  0011D4  ECAF  F009         	call	_pulse_enable	;wreg free
  3920                           
  3921                           ;lcd.c: 126: delay(5);
  3922  0011D8  0E00               	movlw	0
  3923  0011DA  6E02               	movwf	delay@x+1,c
  3924  0011DC  0E05               	movlw	5
  3925  0011DE  6E01               	movwf	delay@x,c
  3926  0011E0  EC36  F009         	call	_delay	;wreg free
  3927                           
  3928                           ;lcd.c: 128: PORTD = (value & 0x0F);
  3929  0011E4  5005               	movf	WriteCommon@value,w,c
  3930  0011E6  0B0F               	andlw	15
  3931  0011E8  6E83               	movwf	3971,c	;volatile
  3932                           
  3933                           ;lcd.c: 129: pulse_enable();
  3934  0011EA  ECAF  F009         	call	_pulse_enable	;wreg free
  3935                           
  3936                           ;lcd.c: 131: delay(1);
  3937  0011EE  0E00               	movlw	0
  3938  0011F0  6E02               	movwf	delay@x+1,c
  3939  0011F2  0E01               	movlw	1
  3940  0011F4  6E01               	movwf	delay@x,c
  3941  0011F6  EC36  F009         	call	_delay	;wreg free
  3942  0011FA  0012               	return		;funcret
  3943  0011FC                     __end_of_WriteCommon:
  3944                           	opt stack 0
  3945                           tblptru	equ	0xFF8
  3946                           tblptrh	equ	0xFF7
  3947                           tblptrl	equ	0xFF6
  3948                           tablat	equ	0xFF5
  3949                           prodh	equ	0xFF4
  3950                           prodl	equ	0xFF3
  3951                           postinc2	equ	0xFDE
  3952                           postdec2	equ	0xFDD
  3953                           fsr2h	equ	0xFDA
  3954                           fsr2l	equ	0xFD9
  3955                           status	equ	0xFD8
  3956                           
  3957 ;; *************** function _pulse_enable *****************
  3958 ;; Defined at:
  3959 ;;		line 113 in file "lcd.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;		None
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;		None
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  1    wreg      void 
  3966 ;; Registers used:
  3967 ;;		wreg, status,2, status,0, cstack
  3968 ;; Tracked objects:
  3969 ;;		On entry : 0/0
  3970 ;;		On exit  : 0/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3973 ;;      Params:         0       0       0       0       0       0       0
  3974 ;;      Locals:         0       0       0       0       0       0       0
  3975 ;;      Temps:          0       0       0       0       0       0       0
  3976 ;;      Totals:         0       0       0       0       0       0       0
  3977 ;;Total ram usage:        0 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; Hardware stack levels required when called:    1
  3980 ;; This function calls:
  3981 ;;		_delay
  3982 ;; This function is called by:
  3983 ;;		_InitLCD
  3984 ;;		_WriteCommon
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text31
  3989  00135E                     __ptext31:
  3990                           	opt stack 0
  3991  00135E                     _pulse_enable:
  3992                           	opt stack 25
  3993                           
  3994                           ;lcd.c: 115: PORTCbits.RC1 = 1;
  3995                           
  3996                           ;incstack = 0
  3997  00135E  8282               	bsf	3970,1,c	;volatile
  3998                           
  3999                           ;lcd.c: 116: delay(2);
  4000  001360  0E00               	movlw	0
  4001  001362  6E02               	movwf	delay@x+1,c
  4002  001364  0E02               	movlw	2
  4003  001366  6E01               	movwf	delay@x,c
  4004  001368  EC36  F009         	call	_delay	;wreg free
  4005                           
  4006                           ;lcd.c: 117: PORTCbits.RC1 = 0;
  4007  00136C  9282               	bcf	3970,1,c	;volatile
  4008  00136E  0012               	return		;funcret
  4009  001370                     __end_of_pulse_enable:
  4010                           	opt stack 0
  4011                           tblptru	equ	0xFF8
  4012                           tblptrh	equ	0xFF7
  4013                           tblptrl	equ	0xFF6
  4014                           tablat	equ	0xFF5
  4015                           prodh	equ	0xFF4
  4016                           prodl	equ	0xFF3
  4017                           postinc2	equ	0xFDE
  4018                           postdec2	equ	0xFDD
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           status	equ	0xFD8
  4022                           
  4023 ;; *************** function _delay *****************
  4024 ;; Defined at:
  4025 ;;		line 216 in file "hmi.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  x               2    0[COMRAM] int 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  i               2    2[COMRAM] int 
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      void 
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4039 ;;      Params:         2       0       0       0       0       0       0
  4040 ;;      Locals:         2       0       0       0       0       0       0
  4041 ;;      Temps:          0       0       0       0       0       0       0
  4042 ;;      Totals:         4       0       0       0       0       0       0
  4043 ;;Total ram usage:        4 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; This function calls:
  4046 ;;		Nothing
  4047 ;; This function is called by:
  4048 ;;		_main
  4049 ;;		_adcToLcd
  4050 ;;		_hmi_out
  4051 ;;		_init_adc
  4052 ;;		_InitLCD
  4053 ;;		_WriteLCD
  4054 ;;		_WriteCtrl
  4055 ;;		_WriteData
  4056 ;;		_pulse_enable
  4057 ;;		_WriteCommon
  4058 ;;		_get_input
  4059 ;;		_IQS333_setup
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	text32
  4064  00126C                     __ptext32:
  4065                           	opt stack 0
  4066  00126C                     _delay:
  4067                           	opt stack 29
  4068  00126C                     l1834:
  4069  00126C  BE02               	btfsc	delay@x+1,7,c
  4070  00126E  0012               	return	
  4071  001270  5002               	movf	delay@x+1,w,c
  4072  001272  E104               	bnz	l1838
  4073  001274  0E02               	movlw	2
  4074  001276  5C01               	subwf	delay@x,w,c
  4075  001278  A0D8               	btfss	status,0,c
  4076  00127A  0012               	return	
  4077  00127C                     l1838:
  4078                           
  4079                           ;hmi.c: 220: {
  4080                           ;hmi.c: 221: for (i=0;i<=110;i++);
  4081  00127C  0E00               	movlw	0
  4082  00127E  6E04               	movwf	delay@i+1,c
  4083  001280  0E00               	movlw	0
  4084  001282  6E03               	movwf	delay@i,c
  4085  001284                     l1840:
  4086  001284  BE04               	btfsc	delay@i+1,7,c
  4087  001286  D006               	goto	l1844
  4088  001288  5004               	movf	delay@i+1,w,c
  4089  00128A  E107               	bnz	l1848
  4090  00128C  0E6F               	movlw	111
  4091  00128E  5C03               	subwf	delay@i,w,c
  4092  001290  B0D8               	btfsc	status,0,c
  4093  001292  D003               	goto	l1848
  4094  001294                     l1844:
  4095  001294  4A03               	infsnz	delay@i,f,c
  4096  001296  2A04               	incf	delay@i+1,f,c
  4097  001298  D7F5               	goto	l1840
  4098  00129A                     l1848:
  4099  00129A  0601               	decf	delay@x,f,c
  4100  00129C  A0D8               	btfss	status,0,c
  4101  00129E  0602               	decf	delay@x+1,f,c
  4102  0012A0  D7E5               	goto	l1834
  4103  0012A2                     __end_of_delay:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           postinc2	equ	0xFDE
  4112                           postdec2	equ	0xFDD
  4113                           fsr2h	equ	0xFDA
  4114                           fsr2l	equ	0xFD9
  4115                           status	equ	0xFD8
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           prodh	equ	0xFF4
  4121                           prodl	equ	0xFF3
  4122                           postinc2	equ	0xFDE
  4123                           postdec2	equ	0xFDD
  4124                           fsr2h	equ	0xFDA
  4125                           fsr2l	equ	0xFD9
  4126                           status	equ	0xFD8
  4127                           
  4128                           	psect	rparam
  4129  0000                     tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           postinc2	equ	0xFDE
  4136                           postdec2	equ	0xFDD
  4137                           fsr2h	equ	0xFDA
  4138                           fsr2l	equ	0xFD9
  4139                           status	equ	0xFD8


Data Sizes:
    Strings     32
    Constant    27
    Data        4
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     92      94
    BANK0           160      0       6
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    WriteLCD@message	PTR unsigned char  size(2) Largest target is 7
		 -> STR_5(CODE[7]), STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), 

    SerialTransmit@buffer	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _init_adc->_delay
    _hmi_out->_display_temp
    _goto_xy->_WriteCtrl
    _display_temp->_get_temp
    _get_temp->___fttol
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___awdiv
    ___fttol->_log
    _display_speed->_integerToLcd
    _display_mode->_WriteLCD
    _adcToLcd->_integerToLcd
    _integerToLcd->___wmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    _WriteLCD->_WriteData
    _WriteData->_WriteCommon
    _SerialTransmit->_strlen
    _InitLCD->_WriteCtrl
    _clear_lcd->_WriteCtrl
    _WriteCtrl->_WriteCommon
    _WriteCommon->_delay
    _pulse_enable->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  131686
                                             90 COMRAM     2     2      0
                            _InitLCD
                      _SerialReceive
                     _SerialTransmit
                           _adcToLcd
                              _delay
                            _hmi_out
                           _init_adc
 ---------------------------------------------------------------------------------
 (1) _init_adc                                             0     0      0    2203
                              _delay
 ---------------------------------------------------------------------------------
 (1) _hmi_out                                              0     0      0   81537
                           _WriteLCD
                          _clear_lcd
                              _delay
                       _display_mode
                      _display_speed
                       _display_temp
                            _goto_xy
 ---------------------------------------------------------------------------------
 (2) _goto_xy                                              2     1      1    6935
                                              6 COMRAM     2     1      1
                          _WriteCtrl
 ---------------------------------------------------------------------------------
 (2) _display_temp                                         2     2      0   37658
                                             88 COMRAM     2     2      0
                          _WriteData
                           _get_temp
                       _integerToLcd
 ---------------------------------------------------------------------------------
 (3) _get_temp                                            11     9      2   21430
                                             77 COMRAM    11     9      2
                            ___awdiv
                           ___awtoft
                            ___fttol
                             ___wmul
                           _adc_poll
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   16859
                                             57 COMRAM     5     2      3
                            ___awdiv (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     352
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7    7573
                                             45 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             15     9      6    2945
                                             18 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             12     6      6    3459
                                             33 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    2250
                                             14 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     316
                                             62 COMRAM    15    11      4
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (2) _display_speed                                        0     0      0    9530
                       _integerToLcd
 ---------------------------------------------------------------------------------
 (2) _display_mode                                         0     0      0    9268
                           _WriteLCD
 ---------------------------------------------------------------------------------
 (1) _adcToLcd                                             2     2      0   27699
                                             26 COMRAM     2     2      0
                           _WriteLCD
                           _adc_poll
                          _clear_lcd
                              _delay
                       _integerToLcd
 ---------------------------------------------------------------------------------
 (3) _integerToLcd                                         6     4      2    9530
                                             20 COMRAM     6     4      2
                          _WriteData
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     799
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     552
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1068
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _adc_poll                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _WriteLCD                                             5     3      2    9268
                                              6 COMRAM     5     3      2
                          _WriteData
                              _delay
 ---------------------------------------------------------------------------------
 (4) _WriteData                                            1     1      0    6675
                                              5 COMRAM     1     1      0
                        _WriteCommon
                              _delay
 ---------------------------------------------------------------------------------
 (1) _SerialTransmit                                       4     2      2     287
                                              6 COMRAM     4     2      2
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     154
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _SerialReceive                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              0     0      0   17756
                          _WriteCtrl
                          _clear_lcd
                              _delay
                       _pulse_enable
 ---------------------------------------------------------------------------------
 (2) _clear_lcd                                            0     0      0    6675
                          _WriteCtrl
 ---------------------------------------------------------------------------------
 (3) _WriteCtrl                                            1     1      0    6675
                                              5 COMRAM     1     1      0
                        _WriteCommon
                              _delay
 ---------------------------------------------------------------------------------
 (4) _WriteCommon                                          1     1      0    4450
                                              4 COMRAM     1     1      0
                              _delay
                       _pulse_enable
 ---------------------------------------------------------------------------------
 (5) _pulse_enable                                         0     0      0    2203
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                4     2      2    2203
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitLCD
     _WriteCtrl
       _WriteCommon
         _delay
         _pulse_enable
           _delay
       _delay
     _clear_lcd
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
     _delay
     _pulse_enable
       _delay
   _SerialReceive
   _SerialTransmit
     _strlen
   _adcToLcd
     _WriteLCD
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       _delay
     _adc_poll
     _clear_lcd
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
     _delay
     _integerToLcd
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
   _delay
   _hmi_out
     _WriteLCD
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       _delay
     _clear_lcd
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
     _delay
     _display_mode
       _WriteLCD
         _WriteData
           _WriteCommon
             _delay
             _pulse_enable
               _delay
           _delay
         _delay
     _display_speed
       _integerToLcd
         _WriteData
           _WriteCommon
             _delay
             _pulse_enable
               _delay
           _delay
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
     _display_temp
       _WriteData
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
       _get_temp
         ___awdiv
           ___awmod (ARG)
         ___awtoft
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         ___fttol
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           _log (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
             _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
         _adc_poll
         _log
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
           _frexp (ARG)
       _integerToLcd
         _WriteData
           _WriteCommon
             _delay
             _pulse_enable
               _delay
           _delay
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
     _goto_xy
       _WriteCtrl
         _WriteCommon
           _delay
           _pulse_enable
             _delay
         _delay
   _init_adc
     _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       6       4        3.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5C      5E       1       98.9%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64      14        0.0%
DATA                 0      0      64      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Oct 22 13:34:03 2017

            _SSPSTATbits 000FC7             ___awdiv@sign 000C      ___wmul@multiplicand 0011  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000     __size_of_WriteCommon 003E             ___ftadd@exp1 002D  
           ___ftadd@exp2 002C             ___ftadd@sign 002B                      l101 1118  
                    l111 1388                      l105 113C                      l600 0682  
                    l604 06AC                      l615 075C                      l296 1398  
                    l624 0778                      l577 0DD6             __CFG_CPB$OFF 000000  
          ?_display_mode 0001             __CFG_CPD$OFF 000000            ?_display_temp 0001  
                    _log 07EA             __CFG_BORV$18 000000             ___awmod@sign 0006  
           _pulse_enable 135E             __CFG_LVP$OFF 000000                     l2000 099A  
                   l2010 09C2                     l2102 0F30                     l2006 09B2  
                   l2114 0F56                     l2130 0F88                     l2210 0AC2  
                   l2202 0A9E                     l2116 0F5E                     l2108 0F40  
                   l2212 0AC8                     l2036 1210                     l2134 0F96  
                   l2126 0F7E                     l2118 0F62                     l2150 0FC0  
                   l2062 0B30                     l2224 1020                     l2216 0ADE  
                   l2208 0AB6                     l2064 0BAC                     l2048 0EB4  
                   l2170 1006                     l2162 0FEE                     l2154 0FCE  
                   l2146 0FB4                     l2228 1028                     l2156 0FD6  
                   l2316 12BC                     l2180 0A28                     l2084 0828  
                   l2406 1134                     l2158 0FDA                     l2166 0FF8  
                   l2078 0806                     l2434 0E14                     l2284 118A  
                   l2286 118E                     l2198 0A8E                     l2526 10D8  
                   l1840 1284                     l1834 126C                     l1930 06EA  
                   l1914 06BA                     l2546 10F0                     l1844 1294  
                   l1860 0D66                     l1940 0720                     l1908 0690  
                   l1838 127C                     l1870 0DC2                     l1862 0D70  
                   l1950 0754                     l1942 0728                     l1848 129A  
                   l1872 0DCC                     l1864 0D8E                     l1856 0D58  
                   l1936 070C                     l1938 0716                     l1868 0DA4  
                   l1956 0794                     l1948 074A                     l1966 07C4  
                   l1982 0958                     l1976 0930                     l1996 098A  
                   ?_log 003A                     STR_1 061C                     STR_2 062D  
                   STR_3 0632                     STR_4 0637                     STR_5 0626  
                   u1251 064E                     u1261 0662                     u1540 0EDC  
                   u1461 0918                     u1711 0A0C                     u1481 0940  
                   u1730 0A46                     u1548 0EDE                     u1735 0A3E  
                   _RCIF 007CF5                     _TRMT 007D61                     _TXIF 007CF4  
         ?_display_speed 0001                     _main 10BE             ___ftpack@arg 0001  
                   _mode 0062             ___ftpack@exp 0004                     fsr2h 000FDA  
                   fsr2l 000FD9                     log@x 003A                     prodh 000FF4  
                   prodl 000FF3                     start 0002            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 0020             ___param_bank 000000  
           ___ftmul@sign 0021          __end_of_InitLCD 0C94             ___fttol@exp1 004D  
           ___fttol@lval 0049                    ??_log 003D    __end_of_SerialReceive 1390  
         ??_display_mode 000C                    ?_main 0001           ??_display_temp 0059  
        __end_of___awdiv 0FA0          __end_of___ftadd 07EA          __end_of___awmod 1010  
                  _ANSEL 000F7E          __end_of___ftmul 09FC          ___awdiv@divisor 0009  
        __end_of___fttol 0AF0          ___awdiv@counter 000B                    _RCREG 000FAE  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _PORTD 000F83  
                  _TRISC 000F94                    _TRISD 000F95                    _TXREG 000FAD  
                  _TXSTA 000FAC            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
          ___awtoft@sign 0012          __end_of_hmi_out 0E8C                    _delay 126C  
                  _frexp 0E8C                    _errno 0060          __end_of_goto_xy 132E  
          ___ftpack@sign 0005                    _speed 005D                    _state 0064  
                  tablat 000FF5                    status 000FD8           __CFG_HFOFST$ON 000000  
         __CFG_PBADEN$ON 000000           _SerialTransmit 1102          __initialization 1076  
            log@exponent 003D             __end_of_main 1102          integerToLcd@num 0015  
                 ??_main 005B            ___fttol@sign1 0048            __activetblptr 000001  
                 ?_delay 0001                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   ?_frexp 0001          ??_display_speed 001B  
                 _ADRESH 000FC4           WriteData@value 0006         __end_of_adcToLcd 126C  
       ___awdiv@dividend 0007         __end_of___awtoft 1234         __end_of___ftpack 0DF6  
       __end_of_WriteLCD 1076         __end_of_adc_poll 139E           __CFG_WDTEN$OFF 000000  
                 _SSPADD 000FC8                   _SSPBUF 000FC9                ??_InitLCD 0007  
 __end_of_SerialTransmit 1142           __CFG_XINST$OFF 000000         __end_of_get_temp 1388  
                 ___wmul 12F0                ??___awdiv 000B                ??___ftadd 0028  
              ??___awmod 0005                ??___ftmul 0019                ??___fttol 0043  
       __end_of_init_adc 1180                   delay@i 0003                   delay@x 0001  
       ___awdiv@quotient 000D          ___awmod@divisor 0003          ___awmod@counter 0005  
                 _strlen 1180    ___ftmul@f3_as_product 001D            ?_integerToLcd 0015  
              ??_hmi_out 005B             __pdataCOMRAM 005D                ??_goto_xy 0008  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8            main@state_old 005B         __end_oflog@coeff 061C  
             __accesstop 0060  __end_of__initialization 10B0           WriteCtrl@value 0006  
             ___ftadd@f1 0022               ___ftadd@f2 0025       __size_of_WriteData 0018  
     __size_of_WriteCtrl 0018     __end_of_display_mode 12CA     __end_of_display_temp 12F0  
        ?_SerialTransmit 0007             eval_poly@res 0037            ___rparam_used 000001  
             ___awtoft@c 000F               ___ftmul@f1 0013               ___ftmul@f2 0016  
             ___fttol@f1 003F           __pcstackCOMRAM 0001             __pidataBANK0 13A0  
          __end_of_delay 12A2            __end_of_frexp 0F1C       __size_of_clear_lcd 0008  
         ??_integerToLcd 0017         integerToLcd@ones 001A         integerToLcd@tens 0019  
                ??_delay 0003                  ??_frexp 0006               __pbssBANK0 0060  
     __size_of_eval_poly 00D2                  ?___wmul 000F            ??_WriteCommon 0005  
         get_temp@logres 0055           get_temp@result 0057                ?_adcToLcd 0001  
              ?___awtoft 000F                ?___ftpack 0001                ?_WriteLCD 0007  
              ?_adc_poll 0001                  ?_strlen 0001        __end_of_WriteData 1346  
      __end_of_WriteCtrl 135E                ?_get_temp 004E                ?_init_adc 0001  
      __end_of_clear_lcd 1398                  _InitLCD 0BC2     SerialTransmit@buffer 0007  
                __Hparam 0000                  __Lparam 0000                  ___awdiv 0F1C  
                ___ftadd 063E                  ___awmod 0FA0          __size_of___wmul 0026  
                ___ftmul 0908                  ___fttol 09FC             __psmallconst 0600  
        __CFG_STVREN$OFF 000000               ??_adcToLcd 001B                  __pcinit 1076  
             ??___awtoft 0012               ??___ftpack 0006                _ANSELbits 000F7E  
             ??_WriteLCD 0009        __end_of_eval_poly 0BC2                  __ramtop 0600  
                __ptext0 10BE                  __ptext1 1142                  __ptext2 0DF6  
                __ptext3 1316                  __ptext4 12CA                  __ptext5 137E  
                __ptext6 07EA                  __ptext7 0E8C                  __ptext8 0AF0  
                __ptext9 0908               ??_adc_poll 0001          __size_of_strlen 003E  
                _hmi_out 0DF6      __end_of_WriteCommon 11FC             __size_of_log 011E  
                _goto_xy 1316         ___awmod@dividend 0001    __size_of_display_mode 0028  
             ??_get_temp 0050    __size_of_display_temp 0026     end_of_initialization 10B0  
             ??_init_adc 0005     __end_of_integerToLcd 0D48   __size_of_SerialReceive 0008  
                postdec2 000FDD                  postinc2 000FDE                  strlen@s 0001  
              _PORTCbits 000F82                _PORTEbits 000F84             _display_mode 12A2  
           _display_temp 12CA                _TRISAbits 000F92                _TRISCbits 000F94  
              _TRISEbits 000F96         ??_SerialTransmit 0009    __end_of_display_speed 137E  
            ___ftmul@exp 001C              _WriteCommon 11BE           __end_of___wmul 1316  
            _BAUDCONbits 000FB8            __pidataCOMRAM 139E            _SerialReceive 1388  
          ?_pulse_enable 0001           __end_of_strlen 11BE      start_initialization 1076  
             eval_poly@d 0031               eval_poly@n 0033               eval_poly@x 002E  
            __end_of_log 0908               frexp@value 0001                 ??___wmul 0013  
            __pdataBANK0 0064         __CFG_LPT1OSC$OFF 000000           ?_SerialReceive 0001  
               ??_strlen 0003           ??_pulse_enable 0005        __size_of_adcToLcd 0038  
      __size_of___awtoft 0038        __size_of___ftpack 00AE        __size_of_WriteLCD 0066  
      __size_of_adc_poll 0006                _WriteData 132E                _WriteCtrl 1346  
  __size_of_integerToLcd 00B4        __size_of_get_temp 000A                WriteLCD@i 000B  
               ?_InitLCD 0001        __size_of_init_adc 003E                _clear_lcd 1390  
      __CFG_CCP2MX$PORTC 000000                 ?___awdiv 0007                 ?___ftadd 0022  
               ?___awmod 0001                 ?___ftmul 0013                 ?___fttol 003F  
  integerToLcd@thousands 0017                 ?_hmi_out 0001              __smallconst 0600  
           _integerToLcd 0C94                 ?_goto_xy 0007                _eval_poly 0AF0  
         adcToLcd@result 001B               ?_WriteData 0001               ?_WriteCtrl 0001  
         __size_of_delay 0036           __size_of_frexp 0090           ___wmul@product 0013  
               _PIR1bits 000F9E               ?_clear_lcd 0001         __CFG_WDTPS$32768 000000  
        ??_SerialReceive 0001               _ADCON0bits 000FC2        ___wmul@multiplier 000F  
             ?_eval_poly 002E                frexp@eptr 0004     __end_of_pulse_enable 1370  
       __size_of_InitLCD 00D2                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0600       __CFG_BOREN$SBORDIS 000000             ?_WriteCommon 0001  
       __size_of___awdiv 0084         __size_of___ftadd 01AC         __size_of___awmod 0070  
       __size_of___ftmul 00F4         __size_of___fttol 00F4                 _adcToLcd 1234  
               ___awtoft 11FC                 ___ftpack 0D48                 _WriteLCD 1010  
               _adc_poll 1398     integerToLcd@hundreds 0018         __size_of_hmi_out 0096  
       __size_of_goto_xy 0018              ??_WriteData 0006              ??_WriteCtrl 0006  
               __ptext10 063E                 __ptext11 11FC                 __ptext20 0F1C  
               __ptext12 0D48                 __ptext21 1398                 __ptext13 09FC  
               __ptext30 11BE                 __ptext22 1010                 __ptext14 1370  
               __ptext31 135E                 __ptext23 132E                 __ptext15 12A2  
               __ptext32 126C                 __ptext24 1102                 __ptext16 1234  
               __ptext25 1180                 __ptext17 0C94                 __ptext26 1388  
               __ptext18 12F0                 __ptext27 0BC2                 __ptext19 0FA0  
               __ptext28 1390                 __ptext29 1346                 _get_temp 137E  
     SerialTransmit@size 0009                 _init_adc 1142            __size_of_main 0044  
            ??_clear_lcd 0007   __size_of_display_speed 000E                 log@coeff 0601  
            ??_eval_poly 0035         display_temp@temp 0059                 goto_xy@x 0008  
               goto_xy@y 0007            _get_temp$1684 0052               _OSCCONbits 000FD3  
__size_of_SerialTransmit 0040                 strlen@cp 0005         WriteCommon@value 0005  
            _SSPCON1bits 000FC6              _SSPCON2bits 000FC5    __size_of_pulse_enable 0012  
          _display_speed 1370        __CFG_FOSC$INTIO67 000000          WriteLCD@message 0007  
